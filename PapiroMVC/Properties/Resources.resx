<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="StoredProcedureMysql" xml:space="preserve">
    <value>-- --------------------------------------------------------
-- Host:                         192.168.0.99
-- Server version:               5.5.29 - MySQL Community Server (GPL)
-- Server OS:                    osx10.6
-- HeidiSQL version:             7.0.0.4053
-- Date/time:                    2013-05-09 14:20:58
-- --------------------------------------------------------

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET NAMES utf8 */;
/*!40014 SET FOREIGN_KEY_CHECKS=0 */;

-- Dumping structure for procedure db.AddColumnToTable
DROP PROCEDURE IF EXISTS `AddColumnToTable`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `AddColumnToTable`(IN `tableName` TEXT, IN `columnName` TEXT, IN `typeName` TEXT, IN `typeDimension` INT)
BEGIN
  
SET @typeMysql = 'INT';

IF typeName = 'time' THEN
  SET @typeMysql = CONCAT('TIME');
END IF;

IF typeName = 'intPK' THEN
  SET @typeMysql = CONCAT('INT(10) UNSIGNED NOT NULL AUTO_INCREMENT, ADD PRIMARY KEY (',columnName,') ');
END IF;

IF typeName = 'intUS' THEN
  SET @typeMysql = CONCAT('INT(10) UNSIGNED');
END IF;

IF typeName = 'bool' THEN
  SET @typeMysql = 'BIT(1)';
END IF;

IF typeName = 'int' THEN
  SET @typeMysql = 'INT';
END IF;

IF typeName = 'byteUS' THEN
  SET @typeMysql = CONCAT('TINYINT UNSIGNED');
END IF;

IF typeName = 'byte' THEN
  SET @typeMysql = 'TINYINT';
END IF;
 
IF typeName = 'string' THEN
  SET @typeMysql = CONCAT('CHAR(',typeDimension,') NULL ');
END IF;

IF typeName = 'stringPK' THEN
  SET @typeMysql =  CONCAT('CHAR(',typeDimension,'), ADD PRIMARY KEY (',columnName,')');
END IF;

IF typeName = 'memo' THEN
  SET @typeMysql = 'TEXT NULL ';
END IF;

IF typeName = 'double' THEN
  SET @typeMysql = CONCAT('DOUBLE ');
END IF;

 
SET @sql = CONCAT('ALTER TABLE ', tableName , ' ADD ', columnName ,'  ', @typeMysql , ';');
 PREPARE s1 from @sql;
 EXECUTE s1;
    
END//
DELIMITER ;


-- Dumping structure for procedure db.AddForeignKey
DROP PROCEDURE IF EXISTS `AddForeignKey`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `AddForeignKey`(IN `tableName` TEXT, IN `columnName` TEXT, IN `tableName2` TEXT, IN `columnName2` TEXT)
BEGIN

SET @sql = CONCAT('ALTER TABLE ', 
							tableName , 
							' ADD CONSTRAINT FK_',tableName, '_', columnName,' FOREIGN KEY (',
							columnName,
							') REFERENCES ', 
							tableName2, 
							' (',columnName2,
							')  ON UPDATE CASCADE ON DELETE CASCADE;');
    PREPARE s1 from @sql;
    EXECUTE s1;
    
END//
DELIMITER ;


-- Dumping structure for procedure db.AddIndex
DROP PROCEDURE IF EXISTS `AddIndex`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `AddIndex`(IN `TableName` TEXT, IN `ColumnName` TEXT)
BEGIN

SET @sql = CONCAT('ALTER TABLE ', tableName , ' ADD INDEX ' , columnName , '(', columnName,');'); 
    PREPARE s1 from @sql;
    EXECUTE s1;    
END//
DELIMITER ;


-- Dumping structure for procedure db.AddTable
DROP PROCEDURE IF EXISTS `AddTable`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `AddTable`(IN `name` TEXT)
BEGIN

SET @sql = CONCAT('CREATE TABLE IF NOT EXISTS ', name , ' (`TimeStampTable` TIMESTAMP) ENGINE=InnoDB DEFAULT CHARSET=latin1;'); 
    PREPARE s1 from @sql;
    EXECUTE s1;
END//
DELIMITER ;


-- Dumping structure for procedure db.ChangeStringColumnLegth
DROP PROCEDURE IF EXISTS `ChangeStringColumnLegth`;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `ChangeStringColumnLegth`(IN `tableName` TEXT, IN `columnName` TEXT, IN `columnLenght` INT)
BEGIN

SET @sql = CONCAT('ALTER TABLE ', tableName , ' CHANGE COLUMN ', columnName ,' ', columnName, ' CHAR(', columnLenght, ');');
 PREPARE s1 from @sql;
 EXECUTE s1;

END//
DELIMITER ;
/*!40014 SET FOREIGN_KEY_CHECKS=1 */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;</value>
  </data>
</root>