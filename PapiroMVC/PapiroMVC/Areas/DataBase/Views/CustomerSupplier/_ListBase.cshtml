@model PapiroMVC.Models.CustomerSupplier
@using Mvc.HtmlHelpers
@using PapiroMVC.Validation


@{    
    string strings = "~/Areas/DataBase/Views/CustomerSupplier/Strings";
    ViewBag.Title = (string)HttpContext.GetLocalResourceObject(strings, "TitleIndexBase");

    try
    {
        if ((bool)TempData["CreateCustomerSupplier"] == true)
        {
            
        
    <div class="alert alert-block alert-success">
        <button type="button" class="close" data-dismiss="alert">
            <i class="icon-remove"></i>
        </button>

        <i class="icon-ok green"></i>
        @Html.T(strings, "CustomerSupplierCreatedMessage")
    </div>

        }
        else
        {
            ViewBag.Message = "";
        }
    }
    catch (Exception e)
    {
        ViewBag.Message = "";
        Console.WriteLine(e.Message);
    }        
}

@Html.HiddenFor(o => o.TimeStampTable)

   




<div id="containerbox">
    <!-- Main Page -->

    <table id="listBase"><tr><td /></tr></table>
    <div id="pager"></div>


    <br />


    <button class="btn btn-primary" type="button" onclick="Javascript:window.location.replace('@Url.Action("Index", "CustomerSupplier", new { Area = "Database" })');">
        <i class="icon-plus"></i>
        @Html.T(strings, "BackToCustomerSupplierList")
    </button>

    <button class="btn btn-primary" type="button" onclick="Javascript:window.location.replace('@Url.Action("CreateBase", "CustomerSupplier", new { Area = "Database" })');">
        <i class="icon-plus"></i>
        @Html.T(strings, "CreateBase")
    </button>

</div>

<script src="@Url.Content("~/Scripts/jquery.unobtrusive-ajax.min.js")" type="text/javascript"></script>

<script type="text/javascript">
    //<![CDATA[
    /*global $ */
    /*jslint devel: true, browser: true, plusplus: true */
    //$.jgrid.formatter.integer.thousandsSeparator = ',';
    //$.jgrid.formatter.number.thousandsSeparator = ',';
    //$.jgrid.formatter.currency.thousandsSeparator = ',';
    $(document).ready(function () {
        'use strict';
        var // myData = [],
            $grid = $("#listBase"),

            numberSearchOptions = ['eq', 'ne', 'lt', 'le', 'gt', 'ge', 'nu', 'nn', 'in', 'ni'],
            numberTemplate = {
                formatter: 'number', align: 'right', sorttype: 'number',
                searchoptions: { sopt: numberSearchOptions }
            },
            myDefaultSearch = 'cn',
            getColumnIndex = function (grid, columnIndex) {
                var cm = grid.jqGrid('getGridParam', 'colModel'), i, l = cm.length;
                for (i = 0; i < l; i++) {
                    if ((cm[i].index || cm[i].name) === columnIndex) {
                        return i; // return the colModel index
                    }
                }
                return -1;
            },
            refreshSerchingToolbar = function ($grid, myDefaultSearch) {
                var postData = $grid.jqGrid('getGridParam', 'postData'), filters, i, l,
                    rules, rule, iCol, cm = $grid.jqGrid('getGridParam', 'colModel'),
                    cmi, control, tagName;

                for (i = 0, l = cm.length; i < l; i++) {
                    control = $("#gs_" + $.jgrid.jqID(cm[i].name));
                    if (control.length > 0) {
                        tagName = control[0].tagName.toUpperCase();
                        if (tagName === "SELECT") { // && cmi.stype === "select"
                            control.find("option[value='']")
                                .attr('selected', 'selected');
                        } else if (tagName === "INPUT") {
                            control.val('');
                        }
                    }
                }

                if (typeof (postData.filters) === "string" &&
                        typeof ($grid[0].ftoolbar) === "boolean" && $grid[0].ftoolbar) {

                    filters = $.parseJSON(postData.filters);
                    if (filters && filters.groupOp === "AND" && typeof (filters.groups) === "undefined") {
                        // only in case of advance searching without grouping we import filters in the
                        // searching toolbar
                        rules = filters.rules;
                        for (i = 0, l = rules.length; i < l; i++) {
                            rule = rules[i];
                            iCol = getColumnIndex($grid, rule.field);
                            if (iCol >= 0) {
                                cmi = cm[iCol];
                                control = $("#gs_" + $.jgrid.jqID(cmi.name));
                                if (control.length > 0 &&
                                        (((typeof (cmi.searchoptions) === "undefined" ||
                                        typeof (cmi.searchoptions.sopt) === "undefined")
                                        && rule.op === myDefaultSearch) ||
                                          (typeof (cmi.searchoptions) === "object" &&
                                              $.isArray(cmi.searchoptions.sopt) &&
                                              cmi.searchoptions.sopt.length > 0 &&
                                              cmi.searchoptions.sopt[0] === rule.op))) {
                                    tagName = control[0].tagName.toUpperCase();
                                    if (tagName === "SELECT") { // && cmi.stype === "select"
                                        control.find("option[value='" + $.jgrid.jqID(rule.data) + "']")
                                            .attr('selected', 'selected');
                                    } else if (tagName === "INPUT") {
                                        control.val(rule.data);
                                    }
                                }
                            }
                        }
                    }
                }
            },

            cm = [
                   { name: 'Id', label: '@Html.T(strings, "OperationsCaption")', sortable: false }, //, formatter: editCustomerSupplier
                   { name: 'AddressCaption', label: '@Html.T(strings, "AddressCaption")', width: 80, sortable: true },
                   { name: 'PostalCode', label: '@Html.T(strings, "PostalCodeCaption")', width: 30, sortable: true, search: true },
                   { name: 'City', label: '@Html.T(strings, "CityCaption")', width: 80, sortable: true, search: true },
                   { name: 'Province', label: '@Html.T(strings, "ProvinceCaption")', width: 50, sortable: true, search: true },
                   { name: 'Country', label: '@Html.T(strings, "CountryCaption")', width: 50, sortable: true, search: true },
                   { name: 'Phone', label: '@Html.T(strings, "PhoneCaption")', width: 50, sortable: true, search: true },
                   { name: 'Fax', label: '@Html.T(strings, "FaxCaption")', width: 50, sortable: true, search: true },
                   { name: 'Email', label: '@Html.T(strings, "EmailCaption")', width: 50, sortable: true, search: true },
                   { name: 'Pec', label: '@Html.T(strings, "PecCaption")', width: 50, sortable: true, search: true },
                   { name: 'Note', label: '@Html.T(strings, "NoteCaption")', width: 50, sortable: true, search: true },
                   { name: 'Referee', label: '@Html.T(strings, "RefereeCaption")', width: 50, sortable: true, search: true }                    
            ],
    saveObjectInLocalStorage = function (storageItemName, object) {
        if (typeof window.localStorage !== 'undefined') {
            window.localStorage.setItem(storageItemName, JSON.stringify(object));
        }
    },
       removeObjectFromLocalStorage = function (storageItemName) {
           if (typeof window.localStorage !== 'undefined') {
               window.localStorage.removeItem(storageItemName);
           }
       },
       getObjectFromLocalStorage = function (storageItemName) {
           if (typeof window.localStorage !== 'undefined') {
               return JSON.parse(window.localStorage.getItem(storageItemName));
           }
       },
       myColumnStateName = 'ListBase.colState',
       saveColumnState = function (perm) {
           var colModel = this.jqGrid('getGridParam', 'colModel'), i, l = colModel.length, colItem, cmName,
               postData = this.jqGrid('getGridParam', 'postData'),
               columnsState = {
                   search: this.jqGrid('getGridParam', 'search'),
                   page: this.jqGrid('getGridParam', 'page'),
                   sortname: this.jqGrid('getGridParam', 'sortname'),
                   sortorder: this.jqGrid('getGridParam', 'sortorder'),
                   permutation: perm,
                   colStates: {}
               },
               colStates = columnsState.colStates;

           if (typeof (postData.filters) !== 'undefined') {
               columnsState.filters = postData.filters;
           }

           for (i = 0; i < l; i++) {
               colItem = colModel[i];
               cmName = colItem.name;
               if (cmName !== 'rn' && cmName !== 'cb' && cmName !== 'subgrid') {
                   colStates[cmName] = {
                       width: colItem.width,
                       hidden: colItem.hidden
                   };
               }
           }
           saveObjectInLocalStorage(myColumnStateName, columnsState);
       },
       myColumnsState,
       isColState,
       restoreColumnState = function (colModel) {
           var colItem, i, l = colModel.length, colStates, cmName,
               columnsState = getObjectFromLocalStorage(myColumnStateName);

           if (columnsState) {
               colStates = columnsState.colStates;
               for (i = 0; i < l; i++) {
                   colItem = colModel[i];
                   cmName = colItem.name;
                   if (cmName !== 'rn' && cmName !== 'cb' && cmName !== 'subgrid') {
                       colModel[i] = $.extend(true, {}, colModel[i], colStates[cmName]);
                   }
               }
           }
           return columnsState;
       },
       firstLoad = true;

        myColumnsState = restoreColumnState(cm);
        isColState = typeof (myColumnsState) !== 'undefined' && myColumnsState !== null;

        $grid.jqGrid({
            url: '@Url.Action("CustomerSupplierBaseList", "CustomerSupplier")',
            datatype: 'json',
            colModel: cm,

            loadtext: '',
            viewrecords: true,
            autowidth: true,
            shrinkToFit:false,
            print: true,
            rowNum: 10,

            caption: '@(Html.T(strings, "TitleIndexBase") + " " + Html.DisplayFor(o => o.BusinessName))',
            rowList: [15, 20, 50, 100],
            gridview: true,
            multiselect: true,
            pager: '#pager',
            page: isColState ? myColumnsState.page : 1,
            search: isColState ? myColumnsState.search : false,
            postData: isColState ? { filters: myColumnsState.filters } : {},
            sortname: isColState ? myColumnsState.sortname : 'invdate',
            sortorder: isColState ? myColumnsState.sortorder : 'desc',
            ignoreCase: true,
            //shrinkToFit: false,
            //viewrecords: true,
            height: 300,
            loaderror: '@(Html.T(strings, "ErrorLoading"))',
            loadComplete: function () {

                var $this = $(this);

                var table = this;
                setTimeout(function () {
                    updateActionIcons(table);
                    updatePagerIcons(table);
                    enableTooltips(table);
                }, 0);


                if (firstLoad) {
                    firstLoad = false;
                    if (isColState) {
                        $this.jqGrid("remapColumns", myColumnsState.permutation, true);

                    }
                    if (typeof (this.ftoolbar) !== "boolean" || !this.ftoolbar) {
                        // create toolbar if needed
                        $this.jqGrid('filterToolbar',
                            { stringResult: true, searchOnEnter: true, defaultSearch: myDefaultSearch });
                    }
                }
                refreshSerchingToolbar($this, myDefaultSearch);
                saveColumnState.call($this, this.p.remapColumns);
            },
            resizeStop: function () {
                saveColumnState.call($grid, $grid[0].p.remapColumns);
            }
        });
        $.extend($.jgrid.search, {
            multipleSearch: true,
            multipleGroup: true,
            recreateFilter: true,
            closeOnEscape: true,
            closeAfterSearch: true,
            overlay: 0
        });
        $grid.jqGrid('navGrid', '#pager', { edit: false, add: false, del: false });
        $grid.jqGrid('navButtonAdd', '#pager', {
            caption: "",
            buttonicon: "ui-icon-calculator",
            title: "choose columns",
            onClickButton: function () {
                $(this).jqGrid('columnChooser', {
                    done: function (perm) {
                        if (perm) {
                            this.jqGrid("remapColumns", perm, true);
                            saveColumnState.call(this, perm);
                        }
                    }
                });
            }
        });
        $grid.jqGrid('navButtonAdd', '#pager', {
            caption: "",
            buttonicon: "ui-icon-closethick",
            title: "clear saved grid's settings",
            onClickButton: function () {
                removeObjectFromLocalStorage(myColumnStateName);
                window.location.reload();
            }
        });
    });
    //]]>
    </script>

    <script type="text/javascript">

        //resize jqgrid after windows resize
        $(window).bind('resize', function () {

            var myGrid = $("#listBase");
            var width = $("#body-container").width();
            try {
                myGrid.jqGrid('setGridWidth', width, true);

            } catch (e) {

            }

        }).trigger('resize');

    </script>



 @*function editCustomerSupplier(cellvalue, options, rowobject) {

        var link = '@Html.ActionLink((string)HttpContext.GetLocalResourceObject(strings, "Edit"), "Edit" + "Base", new { id = "-1" }, new { @class = "tbutton smalledit" })';
        return link.replace("-1", cellvalue);
        }


        jQuery(document).ready(function ($) {

        if ('@(ViewBag.Message)' != "") {
        $.blockUI({
        message: '@(ViewBag.Message)',
        css: {
        border: 'none',
        padding: '15px',
        backgroundColor: '#000',
        '-webkit-border-radius': '10px',
        '-moz-border-radius': '10px',
        opacity: .5,
        color: '#fff'
        }
        });
        $('.blockOverlay').attr('title', 'Click to unblock').click($.unblockUI);
        }
        });*@