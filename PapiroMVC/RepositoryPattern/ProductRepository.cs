using System;
using System.Linq;
using PapiroMVC.Models;
using PapiroMVC.DbCodeManagement;
using System.Threading;
using System.Data;
using System.Collections.Generic;

namespace Services
{
    public class ProductRepository : GenericRepository<dbEntities, Product>, IProductRepository
    {
        public string GetNewCode(Product a)
        {
            var codes = (from COD in this.GetAll() select COD.CodProduct).ToArray().OrderBy(x => x, new SemiNumericComparer());
            var csCode = codes.Count() != 0 ? codes.Last() : "0";

            return AlphaCode.GetNextCode(csCode);
        }

        private void ProductPartCodeRigen(Product c)
        {
            c.TimeStampTable = DateTime.Now;

            //parti del prodotto
            var ppart = c.ProductParts.ToList();
            foreach (var item in c.ProductParts)
            {
             
                item.CodProductPart = c.CodProduct + "-" +  ppart.IndexOf(item).ToString();
                item.CodProduct = c.CodProduct;
                item.TimeStampTable = DateTime.Now;

                //task della parte del prodotto
                var pptask = item.ProductPartTasks.ToList();
                foreach (var item2 in item.ProductPartTasks)
                {
                    item2.CodProductPart = item.CodProductPart;
                    item2.TimeStampTable = DateTime.Now;
                    item2.CodProductPartTask = item.CodProductPart + "-" + pptask.IndexOf(item2).ToString();                    
                }

                //articoli della parte del prodotto
                var pppart = item.ProductPartPrintableArticles.ToList();
                foreach (var item2 in item.ProductPartPrintableArticles)
                {
                    item2.CodProductPart = item.CodProductPart;
                    item2.TimeStampTable = DateTime.Now;
                    item2.CodProductPartPrintableArticle = item.CodProductPart + "-" + pppart.IndexOf(item2).ToString();
                }

            }

            //task del prodotto
            var pt = c.ProductTasks.ToList();
            foreach (var item in c.ProductTasks)
            {
                item.CodProductTask = c.CodProduct + "-" + pt.IndexOf(item).ToString();
                item.CodProduct = c.CodProduct;
                item.TimeStampTable = DateTime.Now;
            }


            if (c.ProductName == "" || c.ProductName == null)
            {
                c.ProductName = c.ToString();
            }

       }

        public override void Add(Product entity)
        {
            ProductPartCodeRigen(entity);
            base.Add(entity);
        }

        public override IQueryable<Product> GetAll()
        {
            Console.WriteLine(Context.Database.Connection.ConnectionString);
            return Context.Products.Include("ProductParts").Include("ProductTasks");
        }


        public override void Save()
        {
            try
            {
                base.Save();
            }
            catch (OptimisticConcurrencyException)
            {                
                Context.SaveChanges();
            }           
        }


        public override void Edit(Product entity)
        {
            
            ProductPartCodeRigen(entity);

            foreach (var item in entity.ProductParts)
            {
                Context.Entry(item).State = System.Data.EntityState.Modified;

                foreach (var item2 in item.ProductPartPrintableArticles)
                {
                    Context.Entry(item2).State = System.Data.EntityState.Modified;
                }

                foreach (var item2 in item.ProductPartTasks)
                {
                    Context.Entry(item2).State = System.Data.EntityState.Modified;
                }
            }

            foreach (var item in entity.ProductTasks)
            {
                Context.Entry(item).State = System.Data.EntityState.Modified;
            }

            base.Edit(entity);
        }

        public Product GetSingle(string codProduct)
        {

//            var query = Context.Products.Include("ProductParts").Include("ProductParts.ProductPartTasks").Include("ProductTasks.OptionTypeOfTask").Include("ProductParts.ProductPartPrintableArticles").Include("ProductTasks.OptionTypeOfTask.TypeOfTask").Include("ProductTasks").FirstOrDefault(x => x.CodProduct == codProduct);
            
            var query = Context.Products.Include("ProductParts").Include("ProductTasks.OptionTypeOfTask").Include("ProductParts.ProductPartPrintableArticles").Include("ProductTasks.OptionTypeOfTask.TypeOfTask").Include("ProductTasks").FirstOrDefault(x => x.CodProduct == codProduct);
            
            //Including ProductPartTask creates a problem with autogenerated SQL statement... 
            //so it's necessary inject single ProductPartTask list e to each ProductPart manually
            foreach (var item in query.ProductParts)
	        {
                List<ProductPartTask> q = Context.ProductPartTasks.Include("OptionTypeOfTask").Where(x => x.CodProductPart == item.CodProductPart).ToList();
                item.ProductPartTasks = q.ToList();
            }

            return query;
        }

        public override void SetDbName(string name)
        {
            base.SetDbName(name);
        }
    }
}