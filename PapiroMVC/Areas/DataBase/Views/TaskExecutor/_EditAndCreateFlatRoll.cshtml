@model PapiroMVC.Models.FlatRoll
@using PapiroMVC.Validation

@{

    string strings = "~/Areas/DataBase/Views/TaskExecutor/Strings";
    string stringsCod = "~/Views/Shared/TypeOfTaskAndCodTypeOfTask";

    foreach (PapiroMVC.Models.TypeOfTask item in ViewBag.TypeOfTaskList)
    {
        item.TaskName = Html.T(stringsCod, "Cod" + item.CodTypeOfTask);
    }

        int[] printingUnitName = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 };

    Model.CodTypeOfTask = Model.CodTypeOfTask == null ? "0001" : Model.CodTypeOfTask;
}

<div id="status">


    @ViewBag.ReturnUrl

    @Scripts.Render("~/bundles/autocomplete")
    @using (Ajax.BeginForm("Action", "TaskExecutor", new { ReturnUrl = ViewBag.ReturnUrl }, new AjaxOptions { UpdateTargetId = "status", OnBegin = "showProcessingMsg", OnComplete = "hideProcessingMsg", OnSuccess = "OnSuccess" }, new { @class = "form-horizontal" }))
    {
        <div class="row">
            <div class="col-xs-12">

                @Html.ValidationSummary(true)

                @Html.Hidden("returnUrl", TempData["TaskExecutorIndex"])


                @Html.HiddenFor(x => x.CodTypeOfTask)

                @Html.HiddenFor(model => model.TimeStampTable)

                @Html.AlgolaEditorFor(model => model.TaskExecutorName)
                @Html.HiddenFor(model => model.Version)
                @Html.HiddenFor(model => model.Dismissed)

                @Html.HiddenFor(model => model.UniversalCodPapiro)

                @Html.HiddenFor(model => model.FlatRollWidth)
                @Html.AlgolaEditorFor(model => model.Laterale)

                @Html.AlgolaEditorFor(model => model.FormatMin)
                @Html.AlgolaEditorFor(model => model.FormatMax)

                @Html.AlgolaEditorFor(model => model.WeightMin)
                @Html.AlgolaEditorFor(model => model.WeightMax)

                <div class="space-10"></div>

                @Html.HiddenFor(model => model.InkUsage)
                @Html.HiddenFor(model => model.InkUsageForfait)

                @Html.HiddenFor(model => model.TimeStampTable)
                @Html.HiddenFor(model => model.CodTaskExecutor)

                <h3>@Html.T(strings, "PrintSection")</h3>

                <div>
                    <div class="form-group">
                        <div class="col-sm-3 control-label no-padding-right">
                            @Html.LabelFor(model => model.PrintingUnit)
                        </div>

                        <div class="controls col-sm-9">
                            @Html.DropDownListFor(model => model.PrintingUnit,
                    new SelectList(printingUnitName))
                        </div>
                    </div>
                </div>


                @Html.AlgolaEditorFor(model => model.CostImplant)
                @Html.AlgolaEditorFor(model => model.ProofSheetFirstStart)
                @Html.AlgolaEditorFor(model => model.ProofSheetSecondsStart)


                <div id="divSerigraphy">
                    @Html.EditorFor(model => model.Serigraphy)

                    <div class="moduleBox">
                        @Html.AlgolaEditorFor(model => model.SerigraphyPrintingUnit)
                        @Html.AlgolaEditorFor(model => model.ProofSheetFirstStartSerigraphy)

                    </div>

                </div>


                <div id="divFoilStamping">
                    @Html.EditorFor(model => model.FoilStamping)

                    <div class="moduleBox">
                        @Html.AlgolaEditorFor(model => model.FoilStampingPrintingUnit)

                        @Html.AlgolaEditorFor(model => model.ProofSheetFirstStartFoilStamping)
                        @Html.AlgolaEditorFor(model => model.CostImplantFoilStamping)

                    </div>

                </div>


                <div id="divDieCutting">
                    @Html.EditorFor(model => model.DieCutting)

                    <div class="moduleBox">
                        @Html.AlgolaEditorFor(model => model.ProofSheetFirstStartDieCutting)
                        @Html.AlgolaEditorFor(model => model.CostImplantDieCutting)
                    </div>

                </div>






                <input type="hidden" name="returnCodTypeOfTask" value="@ViewBag.ReturnCodTypeOfTask" />

                <div class="controls col-sm-9 col-sm-offset-3">
                    <button class="btn btn-warning" type="button" onclick="Javascript:window.location.replace('@Url.Action(ViewBag.ReturnUrl, "TaskExecutor", new { Area = "Database", codTypeOfTask = ViewBag.ReturnCodTypeOfTask })');">
                        <i class="icon-arrow-left"></i>
                        @HttpContext.GetLocalResourceObject(strings, "Cancel")
                    </button>

                    <button class="default btn btn-primary" type="submit" name="@ViewBag.ActionMethod">
                        <i class="icon-save"></i>
                        @HttpContext.GetLocalResourceObject(strings, "Save")
                    </button>

                    @if (ViewBag.ActionMethod != "CreateFlatRoll")
                    {
                        <button class="btn" type="submit" name="CreateLithoRoll">
                            <i class="icon-save"></i>
                            @HttpContext.GetLocalResourceObject(strings, "SaveNewBasedOn")
                        </button>
                    }

                </div>


            </div>
        </div>

    }

</div>


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}

@* Show/hide box sections(=>checkbox) function*@
<script>


    function initFlatRollPage() {

        function show(element) {
            var elm = "#" + "div" + element;

            var well = document.querySelector(elm);
            well.setAttribute("class", "well no-padding-left");

            var cnt = elm + " .moduleBox";

            $(cnt).show();

        }

        function hide(element) {
            var elm = "#" + "div" + element;

            var well = document.querySelector(elm);
            well.setAttribute("class", "");

            var cnt = elm + " .moduleBox";
            $(cnt).hide();
        }


        function editView(e) {

            if (this.checked) {
                show(e.target.id);
            }
            else {
                hide(e.target.id);
            }
        }

        //hide all sections to the user
        $(".moduleBox").hide();

        var checked = document.querySelectorAll("input[type='checkbox']:checked");
        for (var i = 0; i < checked.length; i++) {
            show(checked[i].id);
        }

        //add event listener to all checkboxes
        var checkboxes = document.querySelectorAll("input[type='checkbox']");
        for (var i = 0; i < checkboxes.length; i++) checkboxes[i].addEventListener("change", editView);



        hideProcessingMsg();

    }



    $(function () {
        initFlatRollPage();
    });

</script>
