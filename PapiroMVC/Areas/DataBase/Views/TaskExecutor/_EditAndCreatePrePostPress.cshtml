@model PapiroMVC.Models.PrePostPress
@using PapiroMVC.Validation
@using Services

@{
    string strings = "~/Areas/DataBase/Views/TaskExecutor/Strings";
    string stringsCod = "~/Views/Shared/TypeOfTaskAndCodTypeOfTask";

    foreach (PapiroMVC.Models.TypeOfTask item in ViewBag.TypeOfTaskList)
    {
        item.TaskName = Html.T(stringsCod, "Cod" + item.CodTypeOfTask);
    }

    var typeOfTaskRepository = (ITypeOfTaskRepository)ViewBag.typeOfTaskRepository;
    var optList = typeOfTaskRepository.GetAllOptionTypeOfTask().ToList();

    foreach (var item in optList)
    {
        item.OptionName = Html.T(stringsCod, "Cod" + item.CodOptionTypeOfTask);
        typeOfTaskRepository.EditOptionTypeOfTask(item);
    }

    typeOfTaskRepository.Save();

    Model.CodTypeOfTask = Model.CodTypeOfTask == null ? "0001" : Model.CodTypeOfTask;

}

<div id="status">

    @Scripts.Render("~/bundles/autocomplete")
    @using (Ajax.BeginForm("Action", "TaskExecutor", new { ReturnUrl = ViewBag.ReturnUrl }, new AjaxOptions { UpdateTargetId = "status", OnBegin = "showProcessingMsg", OnComplete = "hideProcessingMsg", OnSuccess = "OnSuccess" }, new { @class = "form-horizontal" }))
    {
        <div class="row">
            <div class="col-xs-12">
                @Html.ValidationSummary(true)

                <div class="form-group">
                    <div class="controls col-sm-3"></div>

                    <div class="controls col-sm-9">
                        @Html.DropDownListFor(y => y.CodTypeOfTask,
                new SelectList(ViewBag.TypeOfTaskList, "CodTypeOfTask", "TaskName"), new { id = "ddBuyingFormat" })

                    </div>
               </div>

                @Html.AlgolaEditorFor(model => model.TaskExecutorSecondName)

                @Html.HiddenFor(model => model.TimeStampTable)

                @Html.AlgolaEditorFor(model => model.TaskExecutorName)

                @Html.HiddenFor(model => model.Version)
                @Html.HiddenFor(model => model.Dismissed)
                @Html.HiddenFor(model => model.UniversalCodPapiro)


                @Html.AlgolaAutocompleteFor(model => model.FormatMin, "FormatMin", "TaskExecutor")
                @Html.AlgolaAutocompleteFor(model => model.FormatMax, "FormatMax", "TaskExecutor")
                @Html.AlgolaEditorFor(model => model.WeightMin)
                @Html.AlgolaEditorFor(model => model.WeightMax)

                @Html.AlgolaEditorFor(model => model.Pinza)
                @Html.AlgolaEditorFor(model => model.ControPinza)
                @Html.AlgolaEditorFor(model => model.Laterale)

                @Html.HiddenFor(model => model.TimeStampTable)
                @Html.HiddenFor(model => model.CodTaskExecutor)

                <input type="hidden" name="returnCodTypeOfTask" value="@ViewBag.ReturnCodTypeOfTask" />


                <div class="controls col-sm-9 col-sm-offset-3">

                    <button class="btn btn-warning" type="button" onclick="Javascript:window.location.replace('@Url.Action(ViewBag.ReturnUrl, "TaskExecutor", new { Area = "Database", codTypeOfTask = ViewBag.ReturnCodTypeOfTask })');">
                        <i class="icon-arrow-left"></i>
                        @HttpContext.GetLocalResourceObject(strings, "Cancel")
                    </button>

                    <button class="default btn btn-primary" type="submit" name="@ViewBag.ActionMethod">
                        <i class="icon-save"></i>
                        @HttpContext.GetLocalResourceObject(strings, "Save")
                    </button>

                    @if (ViewBag.ActionMethod != "CreatePrePostPress" && ViewBag.ActionMethod != "CreateControlTableRoll")
                    {

                        if (((String)ViewBag.ActionMethod).Contains("PrePostPress"))
                        {
                            <button class="btn" type="submit" name="CreatePrePostPress">
                                <i class="icon-save"></i>
                                @HttpContext.GetLocalResourceObject(strings, "SaveNewBasedOn")
                            </button>
                        }

                    }
                </div>

            </div>
        </div>

    }

</div>


<script>



    $(function() {

        var updateOptions = function ()
        {

            var buyingFormat = "";
            $("#ddBuyingFormat option:selected").each(function () {
                buyingFormat += $(this)[0].value;
            });

            //data are collected into
            var dataToPass = {
                codTypeOfTask: buyingFormat,
            };

            $.ajax({
                url: '@(Url.Action("GetOptionTypeOfTask", "TaskExecutor", new { area = "DataBase" }))',
                type: 'POST',
                data: JSON.stringify(dataToPass),
                contentType: 'application/json; charset=utf-8',
                success: function (data) {
                    availableTags = data;
                    $("#TaskExecutorSecondName").autocomplete("option", { source: availableTags });
                },
                error: function () {
                    alert("error");
                },

            });

        }
        
        updateOptions();

        $("#ddBuyingFormat").change(function () {
            updateOptions();
        });

    });


</script>
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
