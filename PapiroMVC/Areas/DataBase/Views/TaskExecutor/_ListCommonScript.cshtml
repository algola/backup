@{
    string strings = "~/Areas/DataBase/Views/TaskExecutor/Strings";
}

<script type="text/javascript">



    function typeOfTaskExecutor(cellvalue, options, rowobject) {

        var link = "type";


        //following string has to be located in view and in validation (metadata)
        var sheet = '@HttpContext.GetLocalResourceObject(strings, "SheetType")';
        var roll = '@HttpContext.GetLocalResourceObject(strings, "RollType")';
        var plotterRoll = '@HttpContext.GetLocalResourceObject(strings, "PlotterRollType")';
        var plotterSheet = '@HttpContext.GetLocalResourceObject(strings, "PlotterSheetType")';

            if (cellvalue == "LithoSheet")
                return link.replace("type", sheet);

            if (cellvalue == "LithoRoll")
                return link.replace("type", roll);

            if (cellvalue == "DigitalSheet")
                return link.replace("type", sheet);

            if (cellvalue == "DigitalRoll")
                return link.replace("type", roll);

            if (cellvalue == "PlotterRoll")
                return link.replace("type", plotterRoll);

            if (cellvalue == "PlotterSheet")
                return link.replace("type", plotterSheet);

            return link;
        }


    function editRow(cellvalue, options, rowobject) {


        var link2 = '@Html.ActionLink((string)HttpContext.GetLocalResourceObject(strings, "Costs"),
                                          "TaskExecutorCost",
                                          "TaskExecutor",
                                          (object) new { id = -1 },
                                          new {@class=""})';
       
        if (rowobject[0] === 'CostError') {
            var link2 = '@Html.ActionLink((string)HttpContext.GetLocalResourceObject(strings, "Costs"),
                                          "TaskExecutorCost",
                                          "TaskExecutor",
                                          (object) new { id = -1 },
                                          new {@class=""})';
        }

        if (rowobject[0] === 'CostMq') {
            var link2 = '@Html.ActionLink((string)HttpContext.GetLocalResourceObject(strings, "CostsOnMq"),
                                          "TaskExecutorCost",
                                          "TaskExecutor",
                                          (object) new { id = -1 },
                                          new {@class=""})';
                }

        if (rowobject[0] === 'CostRun') {
            var link2 = '@Html.ActionLink((string)HttpContext.GetLocalResourceObject(strings, "CostsOnRun"),
                                          "TaskExecutorCost",
                                          "TaskExecutor",
                                          (object) new { id = -1 },
                                          new {@class=""})';
                }

        if (rowobject[0] === 'CostTime') {
            var link2 = '@Html.ActionLink((string)HttpContext.GetLocalResourceObject(strings, "CostsOnTime"),
                                          "TaskExecutorCost",
                                          "TaskExecutor",
                                          (object) new { id = -1 },
                                          new {@class=""})';
                }

        if (rowobject[0] === 'PlotterOnMq') {
            var link2 = '@Html.ActionLink((string)HttpContext.GetLocalResourceObject(strings, "CostsOnMq"),
                                          "TaskExecutorCost",
                                          "TaskExecutor",
                                          (object) new { id = -1 },
                                          new {@class=""})';
        }

        var link = '@Html.ActionLink((string)HttpContext.GetLocalResourceObject(strings, "Edit"), "Edit", new {id= "-1"},new {@class=""})';

        var link = '@Ajax.ActionLink((string)HttpContext.GetLocalResourceObject(strings, "Edit"), 
                 "Edit", 
                 new {id= "-1"}, 
                 new AjaxOptions { HttpMethod = "GET", 
                 InsertionMode = InsertionMode.InsertBefore, 
                 UpdateTargetId = "",
                 OnBegin="showProcessingMsg();",
                 OnComplete = "hideProcessingMsg();"
                 },
                 new {@class=""})'

        

        return link.replace("-1", cellvalue) + " | " + link2.replace("-1", cellvalue);

    }
</script>

