@using PapiroMVC.Validation;

@{
    string strings = "~/Areas/DataBase/Views/TaskExecutor/Strings";
}

<script type="text/javascript">


    function typeOfTaskExecutor(cellvalue, options, rowobject) {

        var link = "type";

        //following string has to be located in view and in validation (metadata)
        var sheet = '@HttpContext.GetLocalResourceObject(strings, "SheetType")';
        var roll = '@HttpContext.GetLocalResourceObject(strings, "RollType")';
        var plotterRoll = '@HttpContext.GetLocalResourceObject(strings, "PlotterRollType")';
        var plotterSheet = '@HttpContext.GetLocalResourceObject(strings, "PlotterSheetType")';
        var flexo = '@HttpContext.GetLocalResourceObject(strings, "FlexoType")';
        var flatRoll = '@HttpContext.GetLocalResourceObject(strings, "FlatRollType")';
        var ctrlTblRoll = '@HttpContext.GetLocalResourceObject(strings, "ControlTableRollType")';
        var prePostPress = '@HttpContext.GetLocalResourceObject(strings, "PrePostPressType")';

        if (cellvalue == "LithoSheet")
            return link.replace("type", sheet);

        if (cellvalue == "LithoRoll")
            return link.replace("type", roll);

        if (cellvalue == "DigitalSheet")
            return link.replace("type", sheet);

        if (cellvalue == "DigitalRoll")
            return link.replace("type", roll);

        if (cellvalue == "PlotterRoll")
            return link.replace("type", plotterRoll);

        if (cellvalue == "PlotterSheet")
            return link.replace("type", plotterSheet);

        if (cellvalue == "Flexo")
            return link.replace("type", flexo);

        if (cellvalue == "FlatRoll")
            return link.replace("type", flatRoll);

        if (cellvalue == "ControlTableRoll")
            return link.replace("type", ctrlTblRoll);

        if (cellvalue == "PrePostPress")
            return link.replace("type", prePostPress);

        return link;
    }


    function editRow(cellvalue, options, rowobject) {


        var link2 = '@Html.ActionLink((string)HttpContext.GetLocalResourceObject(strings, "Costs"),
                                          "TaskExecutorCost",
                                          "TaskExecutor",
                                      (object)new { id = -1, returnUrl = ViewBag.ReturnUrl, returnCodTypeOfTask = ViewBag.ReturnCodTypeOfTask },
                                          new {@class=""})';

        if (rowobject[0] === 'CostError') {
            var link2 = '@Html.ActionLink((string)HttpContext.GetLocalResourceObject(strings, "Costs"),
                                          "TaskExecutorCost",
                                          "TaskExecutor",
                                  (object)new { id = -1, returnUrl = ViewBag.ReturnUrl, returnCodTypeOfTask = ViewBag.ReturnCodTypeOfTask },
                                          new {@class=""})';
        }

        if (rowobject[0] === 'CostMq') {
            var link2 = '@Html.ActionLink((string)HttpContext.GetLocalResourceObject(strings, "CostsOnMq"),
                                          "TaskExecutorCost",
                                          "TaskExecutor",
                                  (object)new { id = -1, returnUrl = ViewBag.ReturnUrl, returnCodTypeOfTask = ViewBag.ReturnCodTypeOfTask },
                                          new {@class=""})';
        }

        if (rowobject[0] === 'CostRun') {
            var link2 = '@Html.ActionLink((string)HttpContext.GetLocalResourceObject(strings, "CostsOnRun"),
                                          "TaskExecutorCost",
                                          "TaskExecutor",
                                  (object)new { id = -1, returnUrl = ViewBag.ReturnUrl, returnCodTypeOfTask = ViewBag.ReturnCodTypeOfTask },
                                          new {@class=""})';
        }

        if (rowobject[0] === 'CostTime') {
            var link2 = '@Html.ActionLink((string)HttpContext.GetLocalResourceObject(strings, "CostsOnTime"),
                                          "TaskExecutorCost",
                                          "TaskExecutor",
                                  (object)new { id = -1, returnUrl = ViewBag.ReturnUrl, returnCodTypeOfTask = ViewBag.ReturnCodTypeOfTask },
                                          new {@class=""})';
        }

        if (rowobject[0] === 'PlotterOnMq') {
            var link2 = '@Html.ActionLink((string)HttpContext.GetLocalResourceObject(strings, "CostsOnMq"),
                                          "TaskExecutorCost",
                                          "TaskExecutor",
                                  (object)new { id = -1, returnUrl = ViewBag.ReturnUrl, returnCodTypeOfTask = ViewBag.ReturnCodTypeOfTask },
                                          new {@class=""})';
        }

        //var link = '@Html.ActionLink((string)HttpContext.GetLocalResourceObject(strings, "Edit"), "Edit", new { id = "-1", returnUrl = ViewBag.ReturnUrl }, new { @class = "" })';
        var link = '@Html.ActionLinkImage((string)HttpContext.GetLocalResourceObject(strings, "Edit"), "Edit", "TaskExecutor", new { area = "DataBase", id = "-1" }, "fa fa-book fa-fw")';
        @* var link = '@Ajax.ActionLink((string)HttpContext.GetLocalResourceObject(strings, "Edit"),
                 "Edit",
                 new {id= "-1"},
                 new AjaxOptions { HttpMethod = "GET",
                 InsertionMode = InsertionMode.InsertBefore,
                 UpdateTargetId = "",
                 OnBegin="showProcessingMsg();",
                 OnComplete = "hideProcessingMsg();"
                 },
                 new {@class=""})' *@


        return link.replace("-1", cellvalue) + " | " + link2.replace("-1", cellvalue);

    }
</script>

