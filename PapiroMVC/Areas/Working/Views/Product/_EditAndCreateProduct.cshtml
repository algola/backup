@using PapiroMVC.Validation
@model PapiroMVC.Models.ProductViewModel

@{
    string stringsGrid = "~/Areas/Working/Views/Document/CustomerSupplierStrings";

    string strings = "~/Areas/Working/Views/Product/Strings";
    ViewBag.FormatsName = Model.Product.FormatsName.ToList();

    var err = ViewData.ModelState.FirstOrDefault(x => x.Key == "PersError");
    if (err.Key != null)
    {
        ViewData.ModelState.AddModelError(string.Empty, Html.T(strings, err.Value.Errors[0].ErrorMessage));
    }

}

<div id="status">

    @Scripts.Render("~/bundles/autocomplete")
    @using (Ajax.BeginForm("Action", "Product", new AjaxOptions
    {
        UpdateTargetId = "status",
        OnBegin = "showProcessingMsg",
        OnComplete = "hideProcessingMsg",
        OnSuccess = "OnSuccess",
        OnFailure = "reload",
    }, new { @class = "form-horizontal" }))
    {
        @Html.ValidationSummary(true)

        <div class="row-fluid">

            <div class="span7">
                @if (Model.Customer != "" && Model.Customer != null)
                {
                    <fieldset @(Model.Customer != "" && Model.Customer != null ? "disabled" : "")>
                        @Html.AlgolaEditorFor(model => model.Customer)
                        @Html.AlgolaEditorFor(model => model.DocumentName)
                    </fieldset>

                    @Html.HiddenFor(model => model.Customer)
                    @Html.HiddenFor(model => model.DocumentName)
                }

                else
                {
                    @Html.AlgolaAutocompleteFor(model => model.Customer, "CustomerBusinessNameAutoComplete", "CustomerSupplier")
                    @Html.AlgolaEditorFor(model => model.DocumentName)
                }

                @Html.AlgolaEditorFor(model => model.Quantity)

            </div>

            <div class="span5">


            </div>

            <div class="span9"></div>
        </div>

        <div class="well no-padding-left no-padding-right">
            @Html.AlgolaEditorFor(model => model.ProductRefName)

            @Html.EditorFor(x => x.Product)
        </div>
        <p>
            <button class="btn btn-warning" type="button" onclick="Javascript:window.location.replace('@Url.Action("Index", "Product", new { Area = "Working" })');">
                <i class="icon-undo bigger-125"></i>
                @HttpContext.GetLocalResourceObject(strings, "Cancel")
            </button>

            <button class="default btn btn-primary" type="submit" name="@ViewBag.ActionMethod">
                <i class="icon-save bigger-160"></i>
                @HttpContext.GetLocalResourceObject(strings, "Save")
            </button>

            @if (ViewBag.ActionMethod != "CreateProduct")
            {
                <input class="btn" type="submit" name="CreateProductSingleSheet" value='@HttpContext.GetLocalResourceObject(strings, "SaveNewBasedOn")' />
            }
        </p>
    }

</div>

