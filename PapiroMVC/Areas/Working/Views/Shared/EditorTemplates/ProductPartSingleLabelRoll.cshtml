@using PapiroMVC.Validation
@model PapiroMVC.Models.ProductPartSingleLabelRoll

@{
    string strings = "~/Areas/Working/Views/Product/Strings";


    //Controllo del formato se è presente nell'elenco dei formati
    //Se non è presente lo aggiungo

    //da controllare solo se l'elenco non è vuoto

    if (((List<PapiroMVC.Models.ProductFormatName>)ViewBag.FormatsName).Count > 0)
    {
        var ele = ((List<PapiroMVC.Models.ProductFormatName>)ViewBag.FormatsName).Find(x => x.CodFormat == Model.Format);
        if (ele == null && Model.Format != null)
        {

            ((List<PapiroMVC.Models.ProductFormatName>)ViewBag.FormatsName).Add(new
            PapiroMVC.Models.ProductFormatName { CodFormat = Model.Format, FormatName = Model.Format });
        }
    }

    foreach (PapiroMVC.Models.ProductFormatName Item in ViewBag.FormatsName)
    {
        var value = (string)HttpContext.GetLocalResourceObject(strings, "Cod" + Item.CodFormat);
        Item.FormatName = value == null ? Item.FormatName : value;
    }

}


<div id="ProductPartsPerView_@(ViewBag.IndexPart)__FormatDiv" class="control-group">
    @if (ViewBag.FormatsName == null || ViewBag.FormatsName.Count == 0)
    {
        @Html.AlgolaEditorFor(model => model.Format)
    }
    else
    {
        @Html.LabelFor(model => model.Format, new { @class = "col-sm-3 control-label no-padding-right" })

        <div class="controls col-sm-9">

            @Html.DropDownListFor((model => model.Format),
            new SelectList(ViewBag.FormatsName, "CodFormat", "FormatName"))
        </div>

    }
</div>

@if (Model.ShowDCut)
{
    @Html.EditorFor(model => model.IsDCut);
    @Html.HiddenFor(model => model.DCut);
    @Html.HiddenFor(model => model.DCut1);
    @Html.HiddenFor(model => model.DCut2);
}
else
{
    @Html.HiddenFor(model => model.IsDCut);
    @Html.HiddenFor(model => model.DCut);
    @Html.HiddenFor(model => model.DCut1);
    @Html.HiddenFor(model => model.DCut2);
}

@Html.HiddenFor(model => model.ShowDCut)
@Html.HiddenFor(model => model.HaveDCutLimit)
@Html.HiddenFor(model => model.MinDCut)
@Html.HiddenFor(model => model.MaxDCut)
@Html.HiddenFor(model => model.TypeOfDCut1)
@Html.HiddenFor(model => model.FormatType)

<div id="ProductPartsPerView_@(ViewBag.IndexPart)__FormatTxTDiv" hidden="hidden">

    @Html.AlgolaEditorFor(model => model.FormatPersonalized, new { @class = "personal" })

</div>

<hr />

@Html.AlgolaEditorFor(model => model.LabelsPerRoll)
@Html.HiddenFor(model => model.SoulDiameter)
@Html.HiddenFor(model => model.MaxDiameter)

<hr />

<!-- artilce -->
@for (int i = 0; i < Model.ProductPartsPrintableArticlePerView.Count; i++)
{
    ViewBag.IndexPartArticle = i;

    @Html.EditorFor(model => model.ProductPartsPrintableArticlePerView[i])
}

@Html.HiddenFor(model => model.IsSelected)
@Html.HiddenFor(model => model.SubjectNumber)
@Html.HiddenFor(model => model.TimeStampTable)
@Html.HiddenFor(model => model.CodProductPart)
@Html.HiddenFor(model => model.CodProduct)
@Html.HiddenFor(model => model.ProductPartName)
@Html.HiddenFor(model => model.PrintingType)

@Html.HiddenFor(model => model.ServicesNumber)
@Html.HiddenFor(mode => Model.TypeOfProductPart)

<!-- task -->
@for (int i = 0; i < Model.ProductPartTasksPerView.Count; i++)
{
    @Html.EditorFor(model => model.ProductPartTasksPerView[i])
}

@*@Model.ProductPartTasks.First().ToString() *@

<script type="text/javascript">

    //0x0 is the key to switch from downbox to textbox
    $('#Product_ProductPartsPerView_@(ViewBag.IndexPart)__Format').bind('change', function () {
        var singleValues = $("#Product_ProductPartsPerView_@(ViewBag.IndexPart)__Format").val();

        if (singleValues == '0x0') {
            $('#ProductPartsPerView_@(ViewBag.IndexPart)__FormatDiv').hide();
            $('#ProductPartsPerView_@(ViewBag.IndexPart)__FormatTxTDiv').show();
            $('#Product_ProductPartsPerView_@(ViewBag.IndexPart)__FormatPersonalized').focus();
        }
    });

</script>
