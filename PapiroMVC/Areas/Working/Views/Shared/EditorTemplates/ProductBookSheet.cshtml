@using PapiroMVC.Validation
@model PapiroMVC.Models.ProductBookSheet

@{
    string strings = "~/Areas/Working/Views/Product/Strings";


    //Controllo del formato se è presente nell'elenco dei formati
    //Se non è presente lo aggiungo

    //da controllare solo se l'elenco non è vuoto    
    if (((List<PapiroMVC.Models.ProductFormatName>)ViewBag.FormatsName).Count > 0)
    {
        var ele = ((List<PapiroMVC.Models.ProductFormatName>)ViewBag.FormatsName).Find(x => x.CodFormat == Model.Format);
        if (ele == null && Model.Format != null)
        {

            ((List<PapiroMVC.Models.ProductFormatName>)ViewBag.FormatsName).Add(new
            PapiroMVC.Models.ProductFormatName { CodFormat = Model.Format, FormatName = Model.Format });
        }
    }

    foreach (PapiroMVC.Models.ProductFormatName Item in ViewBag.FormatsName)
    {
        var value = (string)HttpContext.GetLocalResourceObject(strings, "Cod" + Item.CodFormat);
        Item.FormatName = value == null ? Item.FormatName : value;
    }

}

<div id="FormatDiv">
    @if (ViewBag.FormatsName == null || ViewBag.FormatsName.Count == 0)
    {
        <div class="controls col-sm-9">

            @Html.AlgolaEditorFor(model => model.Format)
        </div>
    }
    else
    {
        @Html.LabelFor(model => model.Format, new { @class = "col-sm-3 control-label no-padding-right" })

        <div class="controls col-sm-9">

            @Html.DropDownListFor((model => model.Format),
            new SelectList(ViewBag.FormatsName, "CodFormat", "FormatName"))
        </div>
    }
</div>

<div id="FormatTxTDiv" hidden="hidden">

    @Html.AlgolaEditorFor(model => model.FormatPersonalized)

</div>


@Html.HiddenFor(model => model.ProductName)
@Html.HiddenFor(model => model.TimeStampTable)
@Html.HiddenFor(model => model.CodProduct)
@Html.HiddenFor(model => model.ProductName)
@Html.HiddenFor(model => model.CodMenuProduct)
@Html.HiddenFor(model => model.TypeOfProduct)


<div class="tabbable">
    <ul class="nav nav-tabs" id="myTab">
        <!-- parts -->
        @for (int i = 0; i < Model.ProductPartsPerView.Count; i++)
        {
            if (i == 0)
            {                        
            <li class="active">
                <a data-toggle="tab" href="#frame1">
                    @Html.T(strings, "Frame" + Model.ProductPartsPerView[i].TypeOfProductPart)
                </a>
            </li>
            }
            else
            {
            <li>
                <a data-toggle="tab"href="#frame@((i + 1).ToString())">
                    @Html.T(strings, "Frame" + Model.ProductPartsPerView[i].TypeOfProductPart)
                </a>
            </li>
            }
        }
    </ul>

    <div class="tab-content">

        <!-- parts -->
        @for (int i = 0; i < Model.ProductPartsPerView.Count; i++)
        {

            ViewBag.IndexPart = i;

            if (i == 0)
            {
            <div class="tab-pane in active" id="frame@((i + 1).ToString())">
                @Html.EditorFor(model => model.ProductPartsPerView[i])
            </div>
            }
            else
            {
            <div class="tab-pane" id="frame@((i + 1).ToString())">
                @Html.EditorFor(model => model.ProductPartsPerView[i])
            </div>

            }
        }

    </div>
</div>


<!-- ProductTasks -->
@for (int i = 0; i < Model.ProductTasks.Count; i++)
{
    @Html.EditorFor(model => model.ProductTasksPerView[i])           
}

<script type="text/javascript">

    $('#Product_Format').bind('change', function () {
        var singleValues = $("#Product_Format").val();

        if (singleValues == '0x0') {
            $('#FormatDiv').hide();
            $('#FormatTxTDiv').show();
        }

    });


</script>


