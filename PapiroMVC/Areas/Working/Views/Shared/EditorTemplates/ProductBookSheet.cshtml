@using PapiroMVC.Validation
@model PapiroMVC.Models.ProductBookSheet

@{
    string strings = "~/Areas/Working/Views/Product/Strings";
    
    

    //Controllo del formato se è presente nell'elenco dei formati
    //Se non è presente lo aggiungo

    //da controllare solo se l'elenco non è vuoto    
    if(((List<PapiroMVC.Models.ProductFormatName>)ViewBag.FormatsName).Count > 0 )
    {
       var ele = ((List<PapiroMVC.Models.ProductFormatName>)ViewBag.FormatsName).Find(x => x.CodFormat == Model.Format);
       if(ele == null && Model.Format != null)
       {

          ((List<PapiroMVC.Models.ProductFormatName>)ViewBag.FormatsName).Add(new
          PapiroMVC.Models.ProductFormatName { CodFormat = Model.Format, FormatName = Model.Format });
       }
    }
    
    foreach (PapiroMVC.Models.ProductFormatName Item in ViewBag.FormatsName)
    {
        var value = (string)HttpContext.GetLocalResourceObject(strings, "Cod" + Item.CodFormat);
        Item.FormatName = value == null ? Item.FormatName : value;
    }

    }


<div id="status">

@Scripts.Render("~/bundles/jqueryval")

@using (Ajax.BeginForm("Action", "Product", new AjaxOptions { UpdateTargetId = "status", OnBegin = "ShowProcessingMsg", OnComplete = "HideProcessingMsg", OnSuccess = "OnSuccess" }))
{

      @Html.ValidationSummary(true)

    <fieldset>
        <legend>ProductSingleSheet</legend>


        <div id="FormatDiv">
        @if (ViewBag.FormatsName == null || ViewBag.FormatsName.Count == 0)
        {
           @Html.AlgolaEditorFor(model => model.Format)
        }
        else
        {
             @Html.LabelFor(model => model.Format) 
             <br />    
             @Html.DropDownListFor((model => model.Format),
            new SelectList(ViewBag.FormatsName,"CodFormat","FormatName"))
            <br />
        }
</div>

<div id ="FormatTxTDiv" hidden="hidden">

    @Html.AlgolaEditorFor(model => model.FormatPersonalized)

</div>


        @Html.HiddenFor(model => model.ProductName)
        @Html.HiddenFor(model => model.TimeStampTable)
        @Html.HiddenFor(model => model.CodProduct)
        @Html.HiddenFor(model => model.ProductName)
        @Html.HiddenFor(model => model.CodMenuProduct)
        @Html.HiddenFor(model => model.TypeOfProduct)


        <br />

        <div class="page-control" data-role="page-control">

            <span class="menu-pull"></span> 
            <div class="menu-pull-bar"></div>
            <!-- Tabs -->
            <ul>

                <!-- parts -->
                @for (int i = 0; i < Model.ProductPartsPerView.Count; i++)
                { 
                    if (i==0)
                    {                        
                        <li class="active"><a href="#frame1">@Html.T(strings, "Frame" + Model.ProductPartsPerView[i].TypeOfProductPart)</a></li>
                    }
                    else
                    {
                        <li><a href="#frame@((i + 1).ToString())">@Html.T(strings, "Frame" + Model.ProductPartsPerView[i].TypeOfProductPart)</a></li>
                    }
                }

            </ul>

            <!-- Tabs content -->
            <div class="frames">
                <!-- parts -->
                @for (int i = 0; i < Model.ProductPartsPerView.Count; i++)
                {
                    
                    ViewBag.IndexPart = i;
                    
                    if (i==0)
                    {
                    <div class="frame active" id="frame@((i+1).ToString())">
                        @Html.EditorFor(model => model.ProductPartsPerView[i])           
                    </div>
                    }             
                    else
                    {
                        <div class="frame" id="frame@((i+1).ToString())">
                        @Html.EditorFor(model => model.ProductPartsPerView[i])           
                    </div>

                    }
                }
            </div>
            
        </div>
         <br />   
        <!-- ProductTasks -->
        @for (int i = 0; i < Model.ProductTasks.Count; i++)
        {
            @Html.EditorFor(model => model.ProductTasksPerView[i])           
        }

        <br />                       
<br />

        <script type="text/javascript">

            $('#Format').bind('change', function () {
                var singleValues = $("#Format").val();

                if (singleValues == '0x0') {
                    $('#FormatDiv').hide();
            $('#FormatTxTDiv').show();
                }


            });


            $('[data-role="page-control"]').each(function () {
            $(this).PageControl();
            });



        </script>

    </fieldset>
       
    <p>
        
        <button type="button" onclick="Javascript:window.location.replace('@Url.Action("Index", "Product", new {Area="Working"})');">            
            <i class ="icon-arrow-left"></i>
            @HttpContext.GetLocalResourceObject(strings, "Cancel")
        </button>

        <button class="default" type="submit" name="@ViewBag.ActionMethod">
            <i class="icon-save"></i>    
            @HttpContext.GetLocalResourceObject(strings, "Save")
        </button>        
        
        @if (ViewBag.ActionMethod != "CreateProductSingleSheet")               
        {
            <input class="button" type="submit" name="CreateProductSingleSheet"  value='@HttpContext.GetLocalResourceObject(strings, "SaveNewBasedOn")' />
        }
    </p>
}

</div>

    @section Scripts {
        @Scripts.Render("~/bundles/jqueryval")
    }