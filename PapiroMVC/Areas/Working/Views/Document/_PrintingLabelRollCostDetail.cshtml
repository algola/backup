@using PapiroMVC.Validation
@using PapiroMVC.Models
@model PapiroMVC.Models.PrintingLabelRollCostDetail
@{

    string strings = "~/Areas/Working/Views/Document/Strings";
    string stringsCod = "~/Views/Shared/Cuts";

    var x = Model.Cuts;

    MakereadyPrintingSingleSheet g = (MakereadyPrintingSingleSheet)Model.GainPrintingOnBuying.Makereadies.FirstOrDefault();


}

<div id="sheetCostDetail">
    @*   <h3 class="header smaller lighter green">@Html.T(strings, "BuyingFormat")</h3> *@
    <h3 class="header smaller lighter green">@Html.T(strings, "Drafting")</h3>


    <div class="control-group" hidden="hidden">
        <div class="controls col-sm-9">

            @Html.DropDownListFor((y => y.BuyingFormat),
            new SelectList(Model.BuyingFormatsName, "CodFormat", "FormatName"), new { id = "ddBuyingFormat" })

        </div>
        <canvas id="buyingSheet" width="0" height="0"></canvas>
    </div>

    @* <div class="space"></div>
        <h3 class="header smaller lighter green">@Html.T(strings, "Drafting")</h3>
    *@

    <div class="control-group" hidden="hidden">
        <div class="controls col-sm-9">
            @Html.DropDownListFor(y => y.PrintingFormat,
                new SelectList(x, "CutName", "CutName"), new { id = "ddPrintingFormat" })
        </div>
    </div>

    @Html.Partial("_DCutLabel", Model)

    <canvas id="printingSingleSheet" width="300" height="170"></canvas>
    <div id="partialPrinting">
        @if (Model.ProductPartPrinting != null)
        {
            switch (Model.ProductPartPrinting.TypeOfProductPartPrinting) //TODO: fare il tipo TypeOfPartPrinting
            {
                case ProductPartSheetPrinting.ProductPartPrintingType.ProductPartSingleSheetPrinting:
                    Html.RenderPartial("_ProductPartSingleSheetPrinting", Model.ProductPartPrinting);
                    break;
                case ProductPartSheetPrinting.ProductPartPrintingType.ProductPartCoverSheetPrinting:
                    Html.RenderPartial("_ProductPartCoverSheetPrinting", Model.ProductPartPrinting);
                    break;
                case ProductPartSheetPrinting.ProductPartPrintingType.ProductPartBookSheetPrinting:
                    Html.RenderPartial("_ProductPartBookSheetPrinting", Model.ProductPartPrinting);
                    break;
                case ProductPartSheetPrinting.ProductPartPrintingType.ProductPartRigidPrinting:
                    Html.RenderPartial("_ProductPartRigidPrinting", Model.ProductPartPrinting);
                    break;
                default:
                    break;
            }
        }
    </div>


    <table class="table" id="htmlTable">
        <thead>
            <tr>
                <th>Format</th>
                <th>Int.s Banda</th>
                <th>Int.s Passo</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var i in Model.PrintingHints)
            {
            <tr>
                <td class="padding-2 no-padding-bottom">@i.Description</td>
                <td class="padding-2 no-padding-bottom">@i.BuyingFormat</td>
                <td class="padding-2 no-padding-bottom">@i.DCut1</td>
                <td class="padding-2 no-padding-bottom">@i.DCut2</td>
            </tr>
            }

        </tbody>
    </table>

    <div id="results">
        @Html.Partial("_PrintingLabelRollCostDetailResult", Model)
    </div>

</div>

<script type="text/javascript">

    $("#ddPartFormat, #ddPartDCut1, #ddPartDCut2").keypress(function (event) {
        if (event.which == 13) {
            event.preventDefault();

            //data are collected into
            var dataToPass = {
                format: $("#ddPartFormat").val(),
                dCut1: $("#ddPartDCut1").val(),
                dCut2: $("#ddPartDCut2").val()
            };


            $.ajax({
                url: '@(Url.Action("ChangePPartFormat", "Document", new { area = "Working" }))',
                type: 'POST',
                data: JSON.stringify(dataToPass),
                contentType: 'application/json; charset=utf-8',
                success: function (data) {
                    $('#sheetCostDetail').html(data);
                    reloadFormat();
                    initAndPosition();

                },
                error: function () {
                    alert("error");
                },

            });
        }
    });


    $("#ddBuyingFormat").change(function () {

        var buyingFormat = "";
        $("#ddBuyingFormat option:selected").each(function () {
            buyingFormat += $(this)[0].value;
        });

        //data are collected into
        var dataToPass = {
            buyingFormat: buyingFormat,
            format: $("#ddPartFormat").val(),
            dCut1: $("#ddPartDCut1").val(),
            dCut2: $("#ddPartDCut2").val()
        };

        $.ajax({
            url: '@(Url.Action("ChangeBuyingFormatAndPPartFormat", "Document", new { area = "Working" }))',
            type: 'POST',
            data: JSON.stringify(dataToPass),
            contentType: 'application/json; charset=utf-8',
            success: function (data) {
                $('#sheetCostDetail').html(data);
                reloadFormat();
                initAndPosition();

            },
            error: function () {
                alert("error");
            },

        });
    });

    function getPrintingLabelRollCostDetailResult() {

        $.ajax({
            url: '@(Url.Action("getPrintingLabelRollCostDetailResult", "Document", new { area = "Working" }))',
            type: 'GET',
            contentType: 'application/json; charset=utf-8',
            success: function (data) {
                $('#results').html(data);
            },
            error: function () {
                alert("error");
            },

        });
    }

</script>

<script type="text/javascript">

    $("#ddPrintingFormat").change(function () {

        var printingFormat = "";
        $("#ddPrintingFormat option:selected").each(function () {
            printingFormat += $(this)[0].value;
        });

        //data are collected into
        var dataToPass = {
            printingFormat: printingFormat,
        };

        $.ajax({
            url: '@(Url.Action("ChangePrintingFormat", "Document", new { area = "Working" }))',
            type: 'POST',
            data: JSON.stringify(dataToPass),
            contentType: 'application/json; charset=utf-8',
            success: function (data) {
                $('#sheetCostDetail').html(data);
                reloadFormat();
                initAndPosition();
            },
            error: function () {
                alert("error");
            },

        });
    });

</script>

<script type="text/javascript">

    function drawBuiyngFormat(context, buyingFormatV, buyingFormatH, offsety, offsetx, zoom, bv) {

        buyingFormatH.replace(/[\.,]/g, function (m) { return m == '.' ? ',' : '.' });
        buyingFormatV.replace(/[\.,]/g, function (m) { return m == '.' ? ',' : '.' });

        buyingFormatH *= zoom;
        buyingFormatV *= zoom;

        var passo = 10 * zoom;

        context.beginPath();

        context.strokeStyle = "#eee";
        context.stroke();

        context.beginPath();
        context.rect(offsetx + 0, offsety + 0, buyingFormatH, buyingFormatV);
        context.strokeStyle = "rgb(10, 10, 10)";
        context.stroke();

    }

    function drawPrintingFormat(context, printingFormatV, printingFormatH, offsety, offsetx, zoom, sideOnside, gainOnSide1, gainOnSide2) {


        printingFormatH.replace(/[\.,]/g, function (m) { return m == '.' ? ',' : '.' });
        printingFormatV.replace(/[\.,]/g, function (m) { return m == '.' ? ',' : '.' });

        printingFormatH *= zoom;
        printingFormatV *= zoom;

        var passo = 10 * zoom;

        context.beginPath();

        context.strokeStyle = "#eee";
        context.stroke();

        context.beginPath();
        if (sideOnside == 'True') {

            for (var j = 0; j < gainOnSide1; j++) {
                for (var i = 0; i < gainOnSide2; i++) {
                    context.rect(offsetx + printingFormatH * i, offsety + printingFormatV * j, printingFormatH, printingFormatV);
                }
            }
        }
        else {
            for (var j = 0; j < gainOnSide2; j++) {
                for (var i = 0; i < gainOnSide1; i++) {
                    context.rect(offsetx + printingFormatV * j, offsety + printingFormatH * i, printingFormatV, printingFormatH);
                }
            }
        }


        context.strokeStyle = "rgb(10, 10, 10)";
        context.stroke();

    }

    var zoomGlo = 2;

    function reloadFormat() {

        var side1 = '@Model.BuyingFormat.GetSide1()';
        var side2 = '@Model.BuyingFormat.GetSide2()';

        var c_canvas = document.getElementById("buyingSheet");
        var context = c_canvas.getContext("2d");

        side1 = side1.replace(/[\.,]/g, function (m) { return m == '.' ? ',' : '.' });
        side2 = side2.replace(/[\.,]/g, function (m) { return m == '.' ? ',' : '.' });

        zoomGlo = 5;
        var zoom = 2;
        zoom = zoomGlo;

        //alert(zoom);

        var offsetX = 0;
        var offsetY = 0;

        drawBuiyngFormat(context, side1, side2, offsetX, offsetY, zoom, 0);

        var side1pr = '@Model.PrintingFormat.GetSide1()';
        var side2pr = '@Model.PrintingFormat.GetSide2()';

        side1pr = side1pr.replace(/[\.,]/g, function (m) { return m == '.' ? ',' : '.' });
        side2pr = side2pr.replace(/[\.,]/g, function (m) { return m == '.' ? ',' : '.' });


        var sideOnSide = '@g.SideOnSide';

        var gain1 = parseInt('@g.ShapeOnSide1');
        var gain2 = parseInt('@g.ShapeOnSide2');

        drawPrintingFormat(context, side1pr, side2pr, offsetX, offsetY, zoom, sideOnSide, gain1, gain2);

        drawPrintingAndSheet();
        save();

    }

</script>

<script type="text/javascript">

    //this event is fired only the first time
    $(document).ready(function () {
        reloadFormat(); //draw buying and printing
        initAndPosition();
    });


    function initAndPosition() {

        //elimino il contenuto
        $('#printingHintTable').html('');
        var myDiv1Para = $('#htmlTable').remove();
        //sposto la tabella a dx
        myDiv1Para.appendTo('#printingHintTable');

        $('#htmlTable td:nth-child(2)').toggle();
        $('#ddBuyingFormat').toggle();


        $('tr').not(':first').on('click', function () {
            $(".highlight").removeClass("highlight");
            $(this).addClass("highlight");

            var pFormat = $(this).closest('tr').find('td:eq(1)').text();
            var dCut1 = $(this).closest('tr').find('td:eq(2)').text();
            var dCut2 = $(this).closest('tr').find('td:eq(3)').text();

            $('#ddBuyingFormat').val(pFormat);
            $('#ddPartDCut1').val(dCut1);
            $('#ddPartDCut2').val(dCut2);

            //submit with dropdown change event
            $('#ddBuyingFormat').trigger('change');

        });

        var searchText = '@(Model.BuyingFormat)';

        $("tr").removeClass("highlight");

        $("#htmlTable tr").filter(function () {
            return $("td:eq(" + '1' + ")", this).text().indexOf(searchText) !== -1;
        }).closest("tr").addClass("highlight");


        //ributto i risultati nella pagina
        getPrintingLabelRollCostDetailResult();
    }

</script>

<style>
    .highlight {
        background-color: #2ba6cb;
    }
</style>
