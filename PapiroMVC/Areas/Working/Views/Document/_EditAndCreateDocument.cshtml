@model PapiroMVC.Models.Document
@using PapiroMVC.Validation
@using PapiroMVC.Models


@{
    string stringsGrid = "~/Areas/Working/Views/Document/CustomerSupplierStrings";
    string strings = "~/Areas/Working/Views/Document/Strings";

    string url = Url.Action("CustomerSupplierList", new { onlyCustomer = true, controller = "CustomerSupplier", area = "DataBase" });

    var pageMessage = Html.T(strings, "LeavingPageMsg");


    if (Model.NewProductCommand == null)
    {
        Model.NewProductCommand = new NewProductCommand();
    }

}

<div id="status">
    @Scripts.Render("~/bundles/autocomplete")
    @using (Ajax.BeginForm("Action", "Document", new AjaxOptions { UpdateTargetId = "status", OnBegin = "showProcessingMsg", OnComplete = "hideProcessingMsg", OnSuccess = "OnSuccess" }, new { @class = "form-horizontal", @id = "documentForm" }))
    {
        <div class="row-fluid">

            <div class="btn-group">
                <button class="btn btn-small btn-info">@Html.T(strings, "Menu")</button>

                <button data-toggle="dropdown" class="btn btn-small btn-info dropdown-toggle">
                    <span class="caret"></span>
                </button>

                <ul class="dropdown-menu">
                    <li>
                        <a href="#" onclick="save();">@Html.T(strings, "Save")</a>
                    </li>

                    <li>
                        <a href="#" onclick="estimateOpenxml();">@Html.T(strings, "Print")</a>
                    </li>

                    <li class="divider"></li>

                    <li>
                        <a href="#">No link</a>
                    </li>
                </ul>
            </div>


            <div class="span12">

                @Html.ValidationSummary(true)

                <p>
                    <div class="well no-padding-left no-padding-rigth">
                        <div class="controls col-sm-9">
                            <a href="javascript:void(0)" id="staticDialog">@Html.T(stringsGrid, "DialogTitle")</a>
                        </div>
                        @Html.AlgolaEditorFor(model => model.Customer, new { @readonly = "true" })
                        @Html.HiddenFor(model => model.CodDocument)
                        @Html.AlgolaEditorFor(model => model.DateDocument)
                        @Html.AlgolaTextAreaFor(model => model.DocumentName, new { @style = "overflow: hidden; word-wrap: break-word; resize: horizontal; height: 50px;" })
                        @Html.HiddenFor(model => model.Notes)

                        @Html.AlgolaEditorFor(model => model.EstimateNumber)
                        @Html.HiddenFor(model => model.TimeStampTable)

                        @Html.HiddenFor(model => model.CodCustomer)

                        @Scripts.Render("~/bundles/autocomplete")
                    </div>

                    @if (Model.TypeOfDocument == Document.DocumentType.Estimate)
                    {
                        <div id="status2">
                            @Html.AlgolaAutocompleteFor(model => model.NewProductCommand.NewProduct, "NewProductAutoComplete", "Document")
                        </div>
                    }

                </p>
            </div>


        </div>

        <div id="_listDocumentProduct">
            @Html.Partial("_ListDocumentProduct", Model)
        </div>


        <div id="dialog-message" class="hide">

            <table id="gridCustomer">
                <tr>
                    <td />
                </tr>
            </table>
            <div id="pagerCustomer"></div>

        </div>

        <div class="space"></div>

    }


</div>

<script type="text/javascript">



    function estimateOpenxml() {

        clearValidationErrors();

        var datastring = $("#documentForm").serialize();

        //at firt time save estimate or
        $.ajax({
            type: "POST",
            url: "@(Url.Action(ViewBag.ActionMethod, "Document"))",
            data: datastring,
            success: function (data) {
                window.location.href = "@(Url.Action("PrintEstimate", "Document", new { id = Model.CodDocument }))";
                return;
            },
            error: function (xhr) {
                $('#status').html(xhr);
            }
        });
    }

    function save() {


        window.onbeforeunload = null;

        clearValidationErrors();

        var datastring = $("#documentForm").serialize();

        //at firt time save estimate or
        $.ajax({
            type: "POST",
            url: "@(Url.Action(ViewBag.ActionMethod, "Document"))",
            data: datastring,
            success: function (data) {
                return;
            },
            error: function (xhr) {
                alert('error');
                $('#status').html(xhr);
            }
        });
    }


    function clearValidationErrors() {
        $('.validation-summary-errors').html('');
        $('.input-validation-error').removeClass('input-validation-error');
        $('.field-validation-error').remove();
    }

    var lastSel = -1;

    $(document).ready(

        function () {

            $('textarea').autosize({ append: "\n" });
            $('#DateDocument').datepicker({ dateFormat: "dd/mm/yy" });
            //            var lastSel = -1;

            var myGrid = $("#gridCustomer").jqGrid({
                url: '@url',
                datatype: 'json',
                colModel: [
                    { name: 'Id', label: 'OperationsCaption', key: true, width: 80, editable: false, hidden: true },
                    { name: 'CodCustomer', label: '@HttpContext.GetLocalResourceObject(stringsGrid, "CodCustemerSupplierCaption")', width: 120, align: 'left', editable: false, hidden: true },
                { name: 'Customer', label: '@HttpContext.GetLocalResourceObject(stringsGrid, "CustomersCaption")', width: 120, align: 'left', editable: false, hidden: true },
                { name: 'BusinessName', label: '@HttpContext.GetLocalResourceObject(stringsGrid, "BusinessNameCaption")', width: 200, align: 'left', editable: false, hidden: false },

                ],

                pager: '#pagerCustomer',

                rowNum: 15,
                rowList: [15, 20, 50],
                viewrecords: true,
                autowidth: false,

                onSelectRow: function (id) {
                    if (id && id !== lastSel) {
                        myGrid.jqGrid('restoreRow', lastSel);
                        lastSel = id;
                    }
                },

                ondblClickRow: function (id, ri, ci) {
                    myGrid.jqGrid('editRow', id, {
                        keys: true,
                        oneditfunc: function () {
                            //...
                        },
                        aftersavefunc: function () {
                            $("#gridCustomer").trigger("reloadGrid");
                        },
                        url: 'editUrl'
                    });
                    //editRow(rowid, keys, oneditfunc, successfunc, url, extraparam, aftersavefunc, errorfunc, afterrestorefunc);
                    return;
                }

            });

            myGrid.jqGrid('navGrid', '#pagerCustomer', { edit: false, add: false, del: false, search: true });
            myGrid.jqGrid('filterToolbar', { stringResult: true, searchOnEnter: false, defaultSearch: "cn" });

        });

    $("#staticDialog").on('click', function (e) {
        e.preventDefault();

        window.onbeforeunload = function () {
            return "@pageMessage";
        };


        var dialog = $("#dialog-message").dialog({
            width: 'auto',
            modal: true,
            title: '@Html.T(stringsGrid, "DialogSubTitle")',
            title_html: true,
            buttons: [
                {
                    text: '@Html.T(stringsGrid, "Cancel")',
                    "class": "btn btn-mini",
                    click: function () {
                        $(this).dialog("close");
                    }
                },
        {
            text: '@Html.T(stringsGrid, "Ok")',
            "class": "btn btn-primary btn-mini",
            click: function () {

                var myGrid = $('#gridCustomer'),
                    selRowId = myGrid.jqGrid('getGridParam', 'selrow'),
                    celValueCodCustemerSupplier = myGrid.jqGrid('getCell', lastSel, 'CodCustomer');

                $('#CodCustomer').val(celValueCodCustemerSupplier);

                var myGrid = $('#gridCustomer'),
                    selRowId = myGrid.jqGrid('getGridParam', 'selrow'),
                    celValueCustemerSupplier = myGrid.jqGrid('getCell', lastSel, 'BusinessName');

                $('#Customer').val(celValueCustemerSupplier);
                $(this).dialog("close");

            }
        }
            ]
        });

        /**
        dialog.data( "uiDialog" )._title = function(title) {
            title.html( this.options.title );
        };
        **/
    });

    function reloadArticle() {
        $("#gridCustomer").trigger("reloadGrid");
    }


    $('input[name=Customer]')
           .focusout(function () {
               save();
           })
            .change(function () {
                window.onbeforeunload = function () {
                    return "@pageMessage";
                };
            });

    $('input[name=DateDocument]')
       .focusout(function () {
           save();
       })
       .change(function () {
           alert("cha");
           window.onbeforeunload = function () {
               return "@pageMessage";
           };
       });

    $('input[name=DocumentName]')
           .focusout(function () {
               save();
           })
        .change(function () {
            window.onbeforeunload = function () {
                return "@pageMessage";
            };
        });


    $('#NewProductCommand_NewProduct')
        .on("keypress", function (e) {
            /* ENTER PRESSED*/
            if (e.keyCode == 13) {

                var datastring = $("#documentForm").serialize();

                //at firt time save estimate or
                $.ajax({
                    type: "POST",
                    url: "@(Url.Action("NewProductCurrentEstimate", "Document"))",
                    data: datastring,
                    success: function (data) {
                        if (data.redirectUrl) {
                            hideProcessingMsg();
                            // if the server returned a JSON object containing an url
                            // property we redirect the browser to that url
                            window.location.href = data.redirectUrl;
                        } else {
                            if (data.error) {
                                $('#NewProductCommand_NewProduct').val("");
                            }
                        }

                        return;
                    },
                    error: function (xhr) {
                        alert('error');
                        $('#status2').html(xhr);
                    }
                });



                return false;
            }
        });

</script>
