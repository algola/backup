@using PapiroMVC.Validation
@using PapiroMVC.Models
@model PapiroMVC.Models.PrePostPressCostDetail
@{

    string strings = "~/Areas/Working/Views/Document/Strings";
    // string stringsCod = "~/Views/Shared/Cuts";

    var x = Model.Cuts;

    Model.BuyingFormats = new List<string>();
    Model.BuyingFormats.Add(Model.BuyingFormat ?? "");

    var gain = Model.Printers.FirstOrDefault().GainPrintingOnBuying;
    MakereadyPrintingSingleSheet g = (MakereadyPrintingSingleSheet)gain.Makereadies.FirstOrDefault();

    if (Model.WorkingFormat == null)
    {
        //        Model.WorkingFormat = x.FirstOrDefault().CutName;
    }
}

<div id="sheetCostDetail">

    @*
        @(Model.GainForRun ?? 1)
        @(Model.WorkingFormat)
    *@

    <div class="container-fluid">
        <!-- div che contiene tutto il formato di acquisto -->

        <div class="row">
            <div class="col-xs-12 col-sm-6">
                <h3 class="header smaller lighter green">@Html.T(strings, "Drafting")</h3>
            </div>
        </div>

        <div class="hide">
            @Html.DropDownListFor(y => y.BuyingFormat,
                                  new SelectList(Model.BuyingFormats), new { id = "ddBuyingFormat", @class = "col-xs-12" })
            <canvas id="buyingSheet" width="300" height="170" style="margin-left: auto; margin-right: auto;display: block;"></canvas>

        </div>


        <div class="container-fluid">
            <div class="col-xs-12 col-sm-6">
                <div class="form-group">
                    <div class="controls col-xs-12">
                        @Html.DropDownListFor(y => y.WorkingFormat,
                new SelectList(x, "CutName", "CutName"), new { id = "ddPrintingFormat", @class = "col-xs-12" })
                    </div>
                </div>
            </div>

        </div>

        <div class="space"></div>

        <div class="row">
            <div class="col-xs-12 col-sm-6">
                <canvas id="printingSingleSheet" width="300" height="170" style="margin-left: auto; margin-right: auto;display: block;"></canvas>
            </div>
        </div>


        <div class="row">
            <div class="col-xs-12 col-sm-6">

            </div>

            <div class="col-xs-12 col-sm-6">

            </div>
        </div>

        @*@if (Model.TypeOfRepass == 0)
        {
            @Html.Partial("_ProductPartSerigraphyOptions", Model)
        }

        @if (Model.TypeOfRepass == 1)
        {
            @Html.Partial("_ProductPartHotPrintingOptions", Model)
        }*@

    </div>


    <div id="partialPrinting">
        @if (Model.ProductPartPrinting != null)
        {
            switch (Model.ProductPartPrinting.TypeOfProductPartPrinting) //TODO: fare il tipo TypeOfPartPrinting
            {
                case ProductPartSheetPrinting.ProductPartPrintingType.ProductPartSingleSheetPrinting:
                    Html.RenderPartial("_ProductPartSingleSheetPrinting", Model.ProductPartPrinting);
                    break;
                case ProductPartSheetPrinting.ProductPartPrintingType.ProductPartDoubleSheetPrinting:
                    Html.RenderPartial("_ProductPartDoubleSheetPrinting", Model.ProductPartPrinting);
                    break;
                case ProductPartSheetPrinting.ProductPartPrintingType.ProductPartCoverSheetPrinting:
                    Html.RenderPartial("_ProductPartCoverSheetPrinting", Model.ProductPartPrinting);
                    break;
                case ProductPartSheetPrinting.ProductPartPrintingType.ProductPartBookSheetPrinting:
                    Html.RenderPartial("_ProductPartBookSheetPrinting", Model.ProductPartPrinting);
                    break;
                case ProductPartSheetPrinting.ProductPartPrintingType.ProductPartRigidPrinting:
                    Html.RenderPartial("_ProductPartRigidPrinting", Model.ProductPartPrinting);
                    break;
                default:
                    break;
            }
        }

    </div>

</div>

<script type="text/javascript">

    $(function () {

        var printingFormat = "";
        printingFormat = '@Model.WorkingFormat';

        //   alert(printingFormat);

        if (printingFormat == '') {

            //data are collected into
            var dataToPass = {
                printingFormat: '@x.FirstOrDefault().CutName',
            };

            $.ajax({
                url: '@(Url.Action("ChangePrintingFormatRepass", "Document", new { area = "Working" }))',
                type: 'POST',
                data: JSON.stringify(dataToPass),
                contentType: 'application/json; charset=utf-8',
                success: function (data) {
                    $('#sheetCostDetail').html(data);
                    //reloadFormat();
                    //initAndPosition();
                    //alert("sheetCostDetail")
                },
                error: function () {
                    alert("error");
                },

            });


        }


    });

</script>


<script type="text/javascript">

    $("#ddPrintingFormat").change(function () {

        event.preventDefault();

        var printingFormat = "";
        $("#ddPrintingFormat option:selected").each(function () {
            printingFormat += $(this)[0].value;
        });

        //data are collected into
        var dataToPass = {
            printingFormat: printingFormat,
        };

        $.ajax({
            url: '@(Url.Action("ChangePrintingFormatRepass", "Document", new { area = "Working" }))',
            type: 'POST',
            data: JSON.stringify(dataToPass),
            contentType: 'application/json; charset=utf-8',
            success: function (data) {
                $('#sheetCostDetail').html(data);
                //reloadFormat();
                //initAndPosition();
                //alert("sheetCostDetail")
            },
            error: function () {
                alert("error");
            },

        });
    });

</script>




<script type="text/javascript">

    function drawBuiyngFormat(context, buyingFormatV, buyingFormatH, offsety, offsetx, zoom, bv) {

        buyingFormatH.replace(/[\.,]/g, function (m) { return m == '.' ? ',' : '.' });
        buyingFormatV.replace(/[\.,]/g, function (m) { return m == '.' ? ',' : '.' });

        buyingFormatH *= zoom;
        buyingFormatV *= zoom;

        var passo = 10 * zoom;

        context.beginPath();

        context.strokeStyle = "#eee";
        context.stroke();

        context.beginPath();
        context.rect(offsetx + 0, offsety + 0, buyingFormatH, buyingFormatV);
        context.strokeStyle = "rgb(10, 10, 10)";
        context.stroke();

    }

    function drawPrintingFormat(context, printingFormatV, printingFormatH, offsety, offsetx, zoom, sideOnside, gainOnSide1, gainOnSide2) {


        printingFormatH.replace(/[\.,]/g, function (m) { return m == '.' ? ',' : '.' });
        printingFormatV.replace(/[\.,]/g, function (m) { return m == '.' ? ',' : '.' });

        printingFormatH *= zoom;
        printingFormatV *= zoom;

        var passo = 10 * zoom;

        context.beginPath();

        context.strokeStyle = "#eee";
        context.stroke();

        context.beginPath();
        if (sideOnside == 'True') {

            for (var j = 0; j < gainOnSide1; j++) {
                for (var i = 0; i < gainOnSide2; i++) {
                    context.rect(offsetx + printingFormatH * i, offsety + printingFormatV * j, printingFormatH, printingFormatV);
                }
            }
        }
        else {
            for (var j = 0; j < gainOnSide2; j++) {
                for (var i = 0; i < gainOnSide1; i++) {
                    context.rect(offsetx + printingFormatV * j, offsety + printingFormatH * i, printingFormatV, printingFormatH);
                }
            }
        }


        context.strokeStyle = "rgb(10, 10, 10)";
        context.stroke();

    }

    var zoomGlo = 2;

    function reloadFormat() {

        var side1 = '@Model.BuyingFormat.GetSide1()';
        var side2 = '@Model.BuyingFormat.GetSide2()';

        var c_canvas = document.getElementById("buyingSheet");
        var context = c_canvas.getContext("2d");

        side1 = side1.replace(/[\.,]/g, function (m) { return m == '.' ? ',' : '.' });
        side2 = side2.replace(/[\.,]/g, function (m) { return m == '.' ? ',' : '.' });

        zoomGlo = 5;
        var zoom = 2;
        zoom = zoomGlo;

        //alert(zoom);

        var offsetX = 0;
        var offsetY = 0;

        drawBuiyngFormat(context, side1, side2, offsetX, offsetY, zoom, 0);

        var side1pr = '@Model.PrintingFormat.GetSide1()';
        var side2pr = '@Model.PrintingFormat.GetSide2()';

        side1pr = side1pr.replace(/[\.,]/g, function (m) { return m == '.' ? ',' : '.' });
        side2pr = side2pr.replace(/[\.,]/g, function (m) { return m == '.' ? ',' : '.' });


        var sideOnSide = '@g.SideOnSide';

        var gain1 = parseInt('@g.ShapeOnSide1');
        var gain2 = parseInt('@g.ShapeOnSide2');

        drawPrintingFormat(context, side1pr, side2pr, offsetX, offsetY, zoom, sideOnSide, gain1, gain2);

        drawPrintingAndSheet();
        save();

    }

</script>

<script type="text/javascript">

    //this event is fired only the first time
    $(document).ready(function () {
        reloadFormat(); //draw buying and printing
        initAndPosition();
    });


    function initAndPosition() {

        $('#ddBuyingFormat').toggle();
        //submit with dropdown change event
        //      $('#ddPrintingFormat').trigger('change');

    }

</script>


<script type="text/javascript">

    $(document).ready(function () {

        //unbind and bind ensure that is fired one time only
        $("#tsk").unbind('change').bind('change', function () {

            event.preventDefault();

            var codTaskExecutor = "";
            $("#tsk option:selected").each(function () {
                codTaskExecutor += $(this)[0].value;
            });

            //data are collected into
            var dataToPass = {
                codTaskExecutor: codTaskExecutor,
                codCost: '@(Model.TaskCost.CodCost)'
            };

            $.ajax({
                url: '@(Url.Action("GetPrintingZRollCostDetailPartial", "Document", new { area = "Working" }))',
                type: 'POST',
                data: JSON.stringify(dataToPass),
                contentType: 'application/json; charset=utf-8',
                success: function (data) {
                    $('#sheetCostDetail').html(data);

                    ////alert('partail');
                    ////ributto i risultati nella pagina
                    //initAndPosition();
                    //reloadFormat();

                },
                error: function () {
                    alert("error");
                },

            });

        });
    });


</script>

<script type="text/javascript">

    //this event is fired only the first time
    $(document).ready(function () {

        drawWorking();
    });

    function drawWorking() {

        var side1 = '@Model.WorkingFormat.GetSide1()';
        var side2 = '@Model.WorkingFormat.GetSide2()';

        side1 = side1.replace(/[\.,]/g, function (m) { return m == '.' ? ',' : '.' });
        side2 = side2.replace(/[\.,]/g, function (m) { return m == '.' ? ',' : '.' });

        var c_canvas = document.getElementById("printingSingleSheet");
        var context = c_canvas.getContext("2d");

        var zoom = 2.5;
        zoom = zoomGlo;

        var offsetX = 0;
        var offsetY = 0;

        drawRepass(context, side1, side2, offsetX, offsetY, zoom, 0);
    }

</script>

