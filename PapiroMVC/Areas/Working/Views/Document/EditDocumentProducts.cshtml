@using PapiroMVC.Validation
@model List<PapiroMVC.Models.DocumentProduct>

@{
    string strings = "~/Areas/Working/Views/Document/Strings";
    ViewBag.Title = "EditDocumentProducts";
}

@section title{
    @Html.T(strings, "Document")
}

@section description{
    @Html.T(strings, "EditDocumentProductsDesc")
}

@section specificPlugInStyle {
    <link rel="stylesheet" href="~/Content/acetheme/assets/css/jquery-ui-1.10.3.full.min.css" />
    <link rel="stylesheet" href="~/Content/acetheme/assets/css/datepicker.css" />
    <link rel="stylesheet" href="~/Content/acetheme/assets/css/ui.jqgrid.css" />
    <link rel="stylesheet" href="~/Content/tabHidden.css" />
}

@section specificPluginScript {
    <script src="~/Content/acetheme/assets/js/date-time/bootstrap-datepicker.min.js"></script>
    <script src="~/Content/acetheme/assets/js/jqGrid/jquery.jqGrid.min.js"></script>
    <script src="~/Content/acetheme/assets/js/jqGrid/i18n/grid.locale-en.js"></script>
    <script src="~/Scripts/jqgridHelper.js"></script>

    <script src="~/Content/acetheme/assets/js/jquery.slimscroll.min.js"></script>
    <script src="~/Content/acetheme/assets/js/jquery.easy-pie-chart.min.js"></script>
    <script src="~/Content/acetheme/assets/js/jquery.sparkline.min.js"></script>
    <script src="~/Content/acetheme/assets/js/flot/jquery.flot.min.js"></script>
    <script src="~/Content/acetheme/assets/js/flot/jquery.flot.pie.min.js"></script>
    <script src="~/Content/acetheme/assets/js/flot/jquery.flot.resize.min.js"></script>

    <script src="~/Content/acetheme/assets/js/jquery-ui-1.10.3.full.min.js"></script>

    <script type="text/javascript">
        jQuery(function ($) {
            $('.easy-pie-chart.percentage').each(function () {
                var $box = $(this).closest('.infobox');
                var barColor = $(this).data('color') || (!$box.hasClass('infobox-dark') ? $box.css('color') : 'rgba(255,255,255,0.95)');
                var trackColor = barColor == 'rgba(255,255,255,0.95)' ? 'rgba(255,255,255,0.25)' : '#E2E2E2';
                var size = parseInt($(this).data('size')) || 50;
                $(this).easyPieChart({
                    barColor: barColor,
                    trackColor: trackColor,
                    scaleColor: false,
                    lineCap: 'butt',
                    lineWidth: parseInt(size / 10),
                    animate: /msie\s*(8|7|6)/.test(navigator.userAgent.toLowerCase()) ? false : 1000,
                    size: size
                });
            })

            //$('.sparkline').each(function () {
            //    var $box = $(this).closest('.infobox');
            //    var barColor = !$box.hasClass('infobox-dark') ? $box.css('color') : '#FFF';
            //    $(this).sparkline('html', { tagValuesAttribute: 'data-values', type: 'bar', barColor: barColor, chartRangeMin: $(this).data('min') || 0 });
            //});

            var placeholder = $('#piechart-placeholder').css({ 'width': '90%', 'min-height': '150px' });


            var data = [
              { label: "Materie Prime", data: 38.7, color: "#68BC31" },
              { label: "Lavorazioni", data: 34.5, color: "#2091CF" },
              { label: "Consumabili", data: 26.8, color: "#AF4E96" },
            ]

            function drawPieChart(placeholder, data, position) {
                $.plot(placeholder, data, {
                    series: {
                        pie: {
                            show: true,
                            tilt: 0.8,
                            highlight: {
                                opacity: 0.25
                            },
                            stroke: {
                                color: '#fff',
                                width: 2
                            },
                            startAngle: 2
                        }
                    },
                    legend: {
                        show: true,
                        position: position || "ne",
                        labelBoxBorderColor: null,
                        margin: [-30, 15]
                    }
                  ,
                    grid: {
                        hoverable: true,
                        clickable: true
                    }
                })
            }
            drawPieChart(placeholder, data);

            /**
            we saved the drawing function and the data to redraw with different position later when switching to RTL mode dynamically
            so that's not needed actually.
            */
            placeholder.data('chart', data);
            placeholder.data('draw', drawPieChart);



            var $tooltip = $("<div class='tooltip top in hide'><div class='tooltip-inner'></div></div>").appendTo('body');
            var previousPoint = null;

            placeholder.on('plothover', function (event, pos, item) {
                if (item) {
                    if (previousPoint != item.seriesIndex) {
                        previousPoint = item.seriesIndex;
                        var tip = item.series['label'] + " : " + item.series['percent'] + '%';
                        $tooltip.show().children(0).text(tip);
                    }
                    $tooltip.css({ top: pos.pageY + 10, left: pos.pageX + 10 });
                } else {
                    $tooltip.hide();
                    previousPoint = null;
                }

            });



        })
    </script>


}

<div class="row-fluid">
    <div class="alert alert-block alert-success">
        @Html.Label(Model.First().Product.ProductName)
    </div>

</div>

<div class="widget-header">

    <h4 class="lighter">

        @if (Model.FirstOrDefault().Document.TypeOfDocument == PapiroMVC.Models.Document.DocumentType.Estimate)
        {
            @Html.ActionLink("<-- Preventivo", "EditEstimate", "Document", new { area = "Working", id = Model.FirstOrDefault().Document.CodDocument }, null);
        }

    </h4>

    <div class="widget-toolbar no-border">
        <ul class="nav nav-tabs" id="myTabo">

            @for (int i = 0; i < Model.Count; i++)
            {
                if (i == 0)
                {
                    <li class="active">

                        <a data-toggle="tab" href="#frame@((i + 1).ToString())" onclick="resize@(Model[i].CodDocumentProduct.Replace("-", "_"))();">
                            <i class="blue icon-stackexchange bigger-110"></i>

                            @if (Model[i].Quantity != null)
                            {
                                @Model[i].Quantity.ToString()
                            }
                            else
                            {
                                @Html.Label("****Quantità non impostata");
                            }

                        </a>
                    </li>
                }
                else
                {
                    <li>
                        <a data-toggle="tab" href="#frame@((i + 1).ToString())" onclick="resize@(Model[i].CodDocumentProduct.Replace("-", "_"))();">
    <i class="blue icon-stackexchange bigger-110"></i>

    @if (Model[i].Quantity != null)
    {
        @Model[i].Quantity.ToString()
    }
    else
    {
        @Html.Label("****Quantità non impostata");
    }
                    </a>
                    </li>
                }
            }

        </ul>
    </div>
</div>

<div class="widget-body" style="height: 500px;">
    <div class="widget-main padding-5 no-padding-left no-padding-right">
        <div class="tab-content padding-0">

            <!-- DocumentProducts -->
            @for (int i = 0; i < Model.Count; i++)
            {
                ViewBag.IndexPart = i;

                if (i == 0)
                {
                    <div class="tab-pane in active" id="frame@((i + 1).ToString())">
                        @*griglia dei costi di questa quantità*@
                        @Html.Partial("_Costs", Model[i])
                        <div id="documentProduct@(Model[i].CodDocumentProduct)">
                            @Html.EditorFor(model => model[i])
                            @*
                                <div class="control-group" id="dlgQta@(Model[i].CodDocumentProduct)" hidden="hidden">
                                    <div class="controls">
                                        <input type="text" id="copyQta@(Model[i].CodDocumentProduct)" placeholder="Nuova Quantità">
                                    </div>
                                </div>
                            *@
                        </div>
                    </div>
                }
                else
                {
                    <div class="tab-pane" id="frame@((i + 1).ToString())">
                        @*griglia dei costi di questa quantità*@
                        @Html.Partial("_Costs", Model[i])

                        <div id="documentProduct@(Model[i].CodDocumentProduct)">


                            @*                            @Html.Partial("_DocumentProduct", Model[i])*@
                            @Html.EditorFor(model => model[i])
                        </div>
                    </div>
                }
            }

        </div>
    </div>
</div>

@Html.Partial("_CostsCommonScript")

<script>

    $(function () {

        $('a[data-toggle="tab"]').on('shown', function () {
            //save the latest tab; use cookies if you like 'em better:
            localStorage.setItem('lastTab@(Model.First().CodDocumentProduct)', $(this).attr('href'));
        });

        //go to the latest tab, if it exists:
        var lastTab = localStorage.getItem('lastTab@(Model.First().CodDocumentProduct)');

        if (lastTab) {
            $('a[href=' + lastTab + ']').tab('show');
        }
        else {
            // Set the first tab if cookie do not exist
            $('a[data-toggle="tab"]:first').tab('show');
        }
    });

</script>

