@using PapiroMVC.Validation
@model PapiroMVC.Models.CostDetail
@using System.Web.Script.Serialization;


@{
    string strings = "~/Areas/Working/Views/Document/Strings";
    //Prendo il titolo dal menù
    ViewBag.Title = Html.T(strings, "EditCost");

    string url = Url.Action("Costs", "Document", new { codDocumentProduct = Model.TaskCost.CodDocumentProduct });
    string editUrl = Url.Action("EditCostManual", new { controller = "Document", area = "Working" });

}

@section title{
    @Html.T(strings, "Document")
}

@section description{
    @Html.T(strings, "EditCostDesc")
}


@Html.Partial("_CostsCommonScript")

@*

    <div id="dialog" title="***Basic dialog" class="span4">

        <table id="costGrid@(Model.TaskCost.CodDocumentProduct)">
            <tr>
                <td />
            </tr>
        </table>
        <div id="pagerCostGrid(@Model.TaskCost.CodDocumentProduct)"></div>
    </div>

*@


<p>
    <button class="btn btn-warning" type="button" onclick="Javascript:window.location.replace('@Url.Action("EditDocumentProducts", "Document", new { Area = "Working", id=Model.TaskCost.DocumentProduct.CodProduct})');">
        <i class="icon-undo bigger-125"></i>
        @Html.T(strings, "Back")
    </button>
    @*
        <button class="default btn btn-primary" onclick="Javascrip:save()" name="@ViewBag.ActionMethod">
            <i class="icon-save bigger-160"></i>
            @Html.T(strings, "Save")
        </button>
    *@
</p>


<div class="container-fluid">
    <div class="row">
        <div class="col-xs-12 col-sm-6">
            <h3 class="header smaller lighter green">Macchina da stampa / lavorazione</h3>
            <div class="form-group">
                <div class="controls col-xs-12">
                    @Html.DropDownListFor(y => y.CodTaskExecutorSelected,
                new SelectList(Model.TaskExecutors, "CodTaskExecutor", "TaskExecutorName"), new { @class = "col-xs-12", id = "tsk" })
                </div>
            </div>

        </div>
        <div class="col-xs-12 col-sm-6 hidden-xs">

            <button class="btn btn-mini btn-danger toggle-btn btn-block">
                <i class="icon-bolt"></i>

                Costi
                <i class="icon-arrow-right  icon-on-right"></i>
            </button>

            <div id="dialog" title="***Basic dialog" style="position: absolute;">

                <div id="divCostGrid@(Model.TaskCost.CodDocumentProduct)">
                    <table id="costGrid@(Model.TaskCost.CodDocumentProduct)">
                        <tr>
                            <td />
                        </tr>
                    </table>
                    <div id="pagerCostGrid(@Model.TaskCost.CodDocumentProduct)"></div>

                </div>
            </div>
            @*</div>*@

        </div>

    </div>
    @*@Model.Error*@
</div>

@if (Model.Error == 0 || Model.Error == null)
{

    <div id="partial">
        @{switch (Model.TypeOfCostDetail)
        {
            case PapiroMVC.Models.CostDetail.CostDetailType.PrintingSheetCostDetail:
                Html.RenderPartial("_PrintingSheetCostDetail", Model);
                break;
            case PapiroMVC.Models.CostDetail.CostDetailType.PrintingZRollCostDetail:
                Html.RenderPartial("_PrintingZRollCostDetail", Model);
                break;
            case PapiroMVC.Models.CostDetail.CostDetailType.PrintingFlatRollCostDetail:
                Html.RenderPartial("_PrintingFlatRollCostDetail", Model);
                break;
            case PapiroMVC.Models.CostDetail.CostDetailType.PrintingRollCostDetail:
                Html.RenderPartial("_PrintingRollCostDetail", Model);
                break;

                @*  case PapiroMVC.Models.CostDetail.CostDetailType.LithoSheetCostDetail:
                        break;
                    case PapiroMVC.Models.CostDetail.CostDetailType.DigitalSheetCostDetail:
                        break;
                *@
            default:
                break;
        }}


    </div>

}
else
{
    if (Model.Error == 3)
    {
        <p>***Errore nel format stampa</p>
    }
}


<script type="text/javascript">
    function save() {

        var url = '@Url.Action("SaveCostDetail", "Document", new { Area = "Working" })'
        $.ajax({
            url: url,
            data: {}, //parameters go here in object literal form
            type: 'GET',
            datatype: 'json',
            success: function (result) {
                //if (result.redirectUrl) {
                //    hideProcessingMsg();
                //    // if the server returned a JSON object containing an url
                //    // property we redirect the browser to that url
                //    window.location.href = result.redirectUrl;
                reloadGrid();
                //                }
            },

            error: function (XMLHttpRequest, textStatus, errorThrown) {

                var msg = JSON.parse(XMLHttpRequest.responseText);
                alert('@Url.Action("Error","Home",new {Area=""})/' + msg.View);
                window.location.href = '@Url.Action("Error","Home",new {Area=""})/' + msg.View;
                return;
            }
        });
    }
</script>

<script>

    //$(function () {
    //    var offset = $("#dialog").offset();
    //    var topPadding = 50;

    //    $("#dialog").stop().animate({
    //        marginTop: $(window).scrollTop() - offset.top + topPadding
    //    });

    //    $(window).scroll(function () {
    //        $("#dialog").stop().animate({
    //            marginTop: $(window).scrollTop() - offset.top + topPadding
    //        });
    //    });
    //})

</script>


<script type="text/javascript">

    $(function () {


        //mostra e nascondi costi
        //        $("#divCostGrid@(Model.TaskCost.CodDocumentProduct)").collapse('toggle');


        $(".toggle-btn").click(function () {
            $("#divCostGrid@(Model.TaskCost.CodDocumentProduct)").collapse('toggle');

        });

        //////

        var lastSel = -1;

        var myGrid = $("#costGrid@(Model.TaskCost.CodDocumentProduct)").jqGrid({
            url: '@url',
            datatype: 'json',
            colModel: [
                { name: 'Operation', label: '@HttpContext.GetLocalResourceObject(strings, "OperationsCaption")', width: 80, align: 'right', editable: false, hidden: true },
                    { name: 'CodCost', width: 60, align: 'right', editable: false, hidden: true },
                    { name: 'Locked', label: '@HttpContext.GetLocalResourceObject(strings, "Locked")', width: 30, align: 'center', editable: false, search: false, formatter: blkFormatter },
                    { name: 'Inclusion', label: '@HttpContext.GetLocalResourceObject(strings, "Inclusion")', width: 30, align: 'center', editable: false, search: false, formatter: InclFormatter },
                    { name: 'Description', label: '@HttpContext.GetLocalResourceObject(strings, "Description")', width: 70, align: 'right', editable: false },
                    { name: 'TypeOfQuantity', label: '@HttpContext.GetLocalResourceObject(strings, "Um")', width: 50, align: 'center', editable: false, search: false, formatter: umFormatter },
                    { name: 'Quantity', label: '@HttpContext.GetLocalResourceObject(strings, "Quantity")', width: 50, align: 'right', editable: true },
                    { name: 'UnitCost', label: '@HttpContext.GetLocalResourceObject(strings, "UnitCost")', width: 50, align: 'right', editable: true },
                    { name: 'TotalCost', label: '@HttpContext.GetLocalResourceObject(strings, "TotalCost")', width: 50, align: 'right', editable: false },
                    { name: 'Markup', label: '@HttpContext.GetLocalResourceObject(strings, "Markup")', width: 50, align: 'right', editable: true, search: false },
                    { name: 'GranTotalCost', label: '@HttpContext.GetLocalResourceObject(strings, "GranTotalCost")', width: 50, align: 'right', editable: false, search: false }],

            pager: '#pagercostGrid@(Model.TaskCost.CodDocumentProduct)',

            rowNum: 100,
            rowList: [100, 200, 500],
            viewrecords: true,
            autowidth: true,
            shrinkToFit: true,
            width: 'auto',

            onSelectRow: function (id) {
                if (id && id !== lastSel) {
                    $("#costGrid@(Model.TaskCost.CodDocumentProduct)").jqGrid('restoreRow', lastSel);
                    lastSel = id;
                }
            },

            ondblClickRow: function (id, ri, ci) {

                if (ci === 2) {

                    var link = '@Url.Action("EditCostTroggleLock", "Document", new { Area = "Working", id = "type" })'.replace("type", id);

                    var jqxhr = $.get(link, function () {
                        $("#costGrid@(Model.TaskCost.CodDocumentProduct)").trigger("reloadGrid");
                    })
                    .done(function () {

                    })
                    .fail(function () {

                    });


                }

                else if (ci === 3) {

                    var link = '@Url.Action("EditCostTroggleInclusion", "Document", new { Area = "Working", id = "type" })'.replace("type", id);

                    var jqxhr = $.get(link, function () {
                        $("#costGrid@(Model.TaskCost.CodDocumentProduct)").trigger("reloadGrid");
                    })
                    .done(function () {

                    })
                    .fail(function () {

                    });


                } else {
                    $("#costGrid@(Model.TaskCost.CodDocumentProduct)").jqGrid('editRow', id, {
                        keys: true,
                        oneditfunc: function () {
                            //...
                        },
                        aftersavefunc: function () {
                            $("#costGrid@(Model.TaskCost.CodDocumentProduct)").trigger("reloadGrid");
                        },
                        url: '@editUrl'
                    });
                    //editRow(rowid, keys, oneditfunc, successfunc, url, extraparam, aftersavefunc, errorfunc, afterrestorefunc);
                }
                return;
            },

        });

        myGrid.jqGrid('navGrid', '#pagercostGrid@(Model.TaskCost.CodDocumentProduct)', { edit: false, add: false, del: false, search: false });

    });

    function reloadGrid() {
        $("#costGrid@(Model.TaskCost.CodDocumentProduct)").trigger("reloadGrid");
    }

</script>


@*
    @Html.Partial("_EditAndCreateDocument", Model)
*@

@section specificPlugInStyle {
    <link rel="stylesheet" href="~/Content/acetheme/assets/css/ui.jqgrid.css" />
    <link rel="stylesheet" href="~/Content/acetheme/assets/css/datepicker.css" />
    <link rel="stylesheet" href="~/Content/acetheme/assets/css/jquery-ui.min.css" />


    <style type="text/css">
        #dialog {
            width: 100% !important;
        }
    </style>

}

@section specificPluginScript {
    <script src="~/Content/acetheme/assets/js/date-time/bootstrap-datepicker.min.js"></script>
    <script src="~/Content/acetheme/assets/js/jqGrid/jquery.jqGrid.min.js"></script>
    <script src="~/Content/acetheme/assets/js/jqGrid/i18n/grid.locale-en.js"></script>
    <script src="~/Content/acetheme/assets/js/jquery-ui.min.js"></script>
}

@section ScriptS{
    @Scripts.Render("~/bundles/jqueryval")
}
