@model PapiroMVC.Models.Order
@using PapiroMVC.Validation
@using PapiroMVC.Models


@{
    string stringsGrid = "~/Areas/Working/Views/Document/CustomerSupplierStrings";
    string strings = "~/Areas/Working/Views/Document/Strings";

    string url = Url.Action("CustomerSupplierList", new { onlyCustomer = true, controller = "CustomerSupplier", area = "DataBase" });

    var pageMessage = Html.T(strings, "LeavingPageMsg");


    if (Model.NewProductCommand == null)
    {
        Model.NewProductCommand = new NewProductCommand();
    }

}

<div id="status" class="no-padding">
    @Scripts.Render("~/bundles/autocomplete")
    @using (Ajax.BeginForm("Action", "Document", new AjaxOptions { UpdateTargetId = "status", OnBegin = "showProcessingMsg", OnComplete = "hideProcessingMsg", OnSuccess = "OnSuccess" }, new { @class = "form-horizontal", @id = "documentForm" }))
    {





        <div class="span12">
            <div class="span6">

                @Html.ValidationSummary(true)

                <div class="well no-padding">
                    <div class="controls col-sm-9">
                        <a class="dialogRef" href="javascript:void(0)" id="staticDialog">@Html.T(stringsGrid, "DialogTitle")</a>
                    </div>
                    @Html.AlgolaEditorFor(model => model.Customer, new { @readonly = "true" })
                    @Html.HiddenFor(model => model.CodDocument)
                    @Html.AlgolaEditorFor(model => model.DateDocument)
                    @Html.AlgolaTextAreaFor(model => model.DocumentName, new { @style = "overflow: hidden; word-wrap: break-word; resize: horizontal; height: 50px;" })
                    @Html.HiddenFor(model => model.Notes)

                    @Html.AlgolaEditorFor(model => model.OrderNumberSerie)
                    @Html.AlgolaEditorFor(model => model.OrderNumber)

                    @Html.HiddenFor(model => model.TimeStampTable)

                    @Html.HiddenFor(model => model.CodCustomer)
                    @Html.HiddenFor(model => model.CodDocumentProduct)


                    @Scripts.Render("~/bundles/autocomplete")
                </div>


            </div>

            <div class="span5">

                @*@Html.Partial("_ListDocumentStates", Model.DocumentStatesPerView)*@

                <!-- states -->
                @for (int i = 0; i < Model.DocumentStatesPerView.Count; i++)
                {
                    @*@Html.EditorFor(model => model.DocumentStatesPerView[i])*@

                    @*@Html.LabelFor(model => model.DocumentStatesPerView[i].TimeStampTable, new { @class = "control-label col-md-2" })*@
                    @Html.HiddenFor(model => model.DocumentStatesPerView[i].TimeStampTable)
                    @Html.HiddenFor(model => model.DocumentStatesPerView[i].CodDocumentState)
                    @Html.HiddenFor(model => model.DocumentStatesPerView[i].CodDocument)
                    @Html.HiddenFor(model => model.DocumentStatesPerView[i].StateName)
                    @Html.HiddenFor(model => model.DocumentStatesPerView[i].StateNumber)
                    @Html.HiddenFor(model => model.DocumentStatesPerView[i].StateNumberPrev)
                    @Html.HiddenFor(model => model.DocumentStatesPerView[i].Completed)
                    @Html.HiddenFor(model => model.DocumentStatesPerView[i].ResetLinkedStates)

                    <div class="row no-padding-bottom no-padding-top">
                        <div class="col-sm-3 control-label no-padding-right no-padding-bottom no-padding-top">
                            @Html.Label(Html.T(strings, Model.DocumentStatesPerView[i].StateName))
                        </div>
                        <div class="controls col-sm-9 no-padding-bottom no-padding-top">
                            @Html.CheckBoxFor(m => m.DocumentStatesPerView[i].Selected)
                            @*@Html.CheckBox(" ", Model.DocumentStatesPerView[i].Selected.GetValueOrDefault())*@

                        </div>
                    </div>
                }
            </div>




            <div class="span1"></div>
            <div class="span11 well no-padding">@Model.OrderProduct.ProductName</div>
            <div class="vspace-20"></div>
        </div>



        <div id="dialog-message" class="hide">

            <table id="gridCustomer">
                <tr>
                    <td />
                </tr>
            </table>
            <div id="pagerCustomer"></div>

        </div>
        <button class="btn btn-danger" type="button" id="delete">
            <i class="icon-trash bigger-125"></i>
            @HttpContext.GetLocalResourceObject(strings, "DeleteCommand")
            <span class="badge badge-transparent">
                <i class="light-red icon-asterisk"></i>
            </span>
        </button>

        <button class="default btn btn-primary" type="submit" name="@ViewBag.ActionMethod">
            <i class="icon-save bigger-160"></i>
            @HttpContext.GetLocalResourceObject(strings, "Save")
        </button>

        <a href="#" class="btn btn-primary" role="button" id="btnPrinterOrder" onclick="showPrinter();">
            <i class="icon-print bigger-160"></i>
            @HttpContext.GetLocalResourceObject(strings, "PrintOrder")
        </a>
    }



    <div id="dialog-printreport" class="hide">

        <table>

            @{foreach (var item in Model.ReportOrderNames)
            {
                <tr>
                    <td>@item.Description</td>
                    <td>
                        <button class="default btn-mini btn btn-primary" type="button" onclick="printComm('@item.Name');">
                            <i class="icon-print bigger-125"></i>
                        </button>
                    </td>
                </tr>
            }}
        </table>

    </div>

</div>

<script type="text/javascript">

    //stampa della commessa
    function printComm(reportName) {
        $("#dialog-printreport").dialog("close");
        ret = '@Url.Action("PrintOrder", new { codDocument = Model.CodDocument, reportName = -1 })';
        location.href = ret.replace('-1', reportName).replace('amp;', '');

    }

    function showPrinter() {

        var dialog = $("#dialog-printreport").removeClass("hide").dialog({
            width: 'auto',
            modal: true,
            title: '@Html.T(strings, "DialogPrintOrderTitle")',
            title_html: true,
            buttons: [
                {
                    text: '@Html.T(stringsGrid, "Cancel")',
                    "class": "btn btn-mini",
                    click: function () {
                        $(this).dialog("close");
                    }
                }
            ]

        });

        /**
        dialog.data( "uiDialog" )._title = function(title) {
            title.html( this.options.title );
        };
        **/
    };





    function save() {

        window.onbeforeunload = null;

        clearValidationErrors();

        var datastring = $("#documentForm").serialize();

        //at firt time save estimate or
        $.ajax({
            type: "POST",
            url: "@(Url.Action(ViewBag.ActionMethod, "Document"))",
            data: datastring,
            success: function (data) {
                return;
            },
            error: function (xhr) {
                alert('error');
                $('#status').html(xhr);
            }
        });
    }


    function clearValidationErrors() {
        $('.validation-summary-errors').html('');
        $('.input-validation-error').removeClass('input-validation-error');
        $('.field-validation-error').remove();
    }

    var lastSel = -1;

    $(document).ready(

        function () {

            $('textarea').autosize({ append: "\n" });
            $('#DateDocument').datepicker({ dateFormat: "dd/mm/yy" });
            //            var lastSel = -1;

            var myGrid = $("#gridCustomer").jqGrid({
                url: '@url',
                datatype: 'json',
                colModel: [
                    { name: 'Id', label: 'OperationsCaption', key: true, width: 80, editable: false, hidden: true },
                    { name: 'CodCustomer', label: '@HttpContext.GetLocalResourceObject(stringsGrid, "CodCustemerSupplierCaption")', width: 120, align: 'left', editable: false, hidden: true },
                { name: 'Customer', label: '@HttpContext.GetLocalResourceObject(stringsGrid, "CustomersCaption")', width: 120, align: 'left', editable: false, hidden: true },
                { name: 'BusinessName', label: '@HttpContext.GetLocalResourceObject(stringsGrid, "BusinessNameCaption")', width: 200, align: 'left', editable: false, hidden: false },

                ],

                pager: '#pagerCustomer',

                rowNum: 15,
                rowList: [15, 20, 50],
                viewrecords: true,
                autowidth: false,

                onSelectRow: function (id) {
                    if (id && id !== lastSel) {
                        myGrid.jqGrid('restoreRow', lastSel);
                        lastSel = id;
                    }
                },

                ondblClickRow: function (id, ri, ci) {
                    myGrid.jqGrid('editRow', id, {
                        keys: true,
                        oneditfunc: function () {
                            //...
                        },
                        aftersavefunc: function () {
                            $("#gridCustomer").trigger("reloadGrid");
                        },
                        url: 'editUrl'
                    });
                    //editRow(rowid, keys, oneditfunc, successfunc, url, extraparam, aftersavefunc, errorfunc, afterrestorefunc);
                    return;
                }

            });

            myGrid.jqGrid('navGrid', '#pagerCustomer', { edit: false, add: false, del: false, search: true });
            myGrid.jqGrid('filterToolbar', { stringResult: true, searchOnEnter: false, defaultSearch: "cn" });

        });

    $("#staticDialog").on('click', function (e) {
        e.preventDefault();

        var dialog = $("#dialog-message").removeClass("hide").dialog({
            width: 'auto',
            modal: true,
            title: '@Html.T(stringsGrid, "DialogSubTitle")',
            title_html: true,

            buttons: [
        {
            text: '@Html.T(stringsGrid, "Cancel")',
            "class": "btn btn-mini",
            click: function () {
                $(this).dialog("close");
            }
        },
                {
                    text: '@Html.T(stringsGrid, "Ok")',
                    "class": "btn btn-primary btn-mini",
                    click: function () {

                        var myGrid = $('#gridCustomer'),
                            selRowId = myGrid.jqGrid('getGridParam', 'selrow'),
                            celValueCodCustemerSupplier = myGrid.jqGrid('getCell', lastSel, 'CodCustomer');

                        $('#CodCustomer').val(celValueCodCustemerSupplier);

                        var myGrid = $('#gridCustomer'),
                            selRowId = myGrid.jqGrid('getGridParam', 'selrow'),
                            celValueCustemerSupplier = myGrid.jqGrid('getCell', lastSel, 'BusinessName');

                        $('#Customer').val(celValueCustemerSupplier);
                        $(this).dialog("close");

                    }
                }
            ]
        });

        /**
        dialog.data( "uiDialog" )._title = function(title) {
            title.html( this.options.title );
        };
        **/
    });

    function reloadArticle() {
        $("#gridCustomer").trigger("reloadGrid");
    }


    $('input:text')
           .focusout(function () {
               save();
           });

    $("input:checkbox")
        .focusout(function () {
            save();
        });

    $('#NewProductCommand_NewProduct')
        .on("keypress", function (e) {
            /* ENTER PRESSED*/
            if (e.keyCode == 13) {
                e.preventDefault();
                var datastring = $("#documentForm").serialize();

                //at firt time save estimate or
                $.ajax({
                    type: "POST",
                    url: "@(Url.Action("NewProductCurrentOrder", "Document"))",
                    data: datastring,
                    success: function (data) {
                        if (data.redirectUrl) {
                            hideProcessingMsg();
                            // if the server returned a JSON object containing an url
                            // property we redirect the browser to that url
                            window.location.href = data.redirectUrl;
                        } else {
                            if (data.error) {
                                $('#NewProductCommand_NewProduct').val("");
                            }
                        }

                        return;
                    },
                    error: function (xhr) {
                        alert('error');
                        $('#status2').html(xhr);
                    }
                });



                return false;
            }







        });

</script>
