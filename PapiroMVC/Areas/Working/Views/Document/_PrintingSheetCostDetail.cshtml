@using PapiroMVC.Validation
@using PapiroMVC.Models
@model PapiroMVC.Models.PrintingSheetCostDetail

@{
    
    string strings = "~/Areas/Working/Views/Document/Strings";
    string stringsCod = "~/Views/Shared/Cuts";

    var x = PapiroMVC.Models.SheetCut.Cuts();

    foreach (var item in x)
    {
        item.CutName = item.GetCuttetFormat(Model.BuyingFormat);
    }

    //Controllo del formato se è presente nell'elenco dei formati
    //Se non è presente lo aggiungo

    //da controllare solo se l'elenco non è vuoto    
    if (x.Count > 0)
    {
        var ele = x.Find(z => z.CutName == Model.PrintingFormat);
        if (ele == null && Model.PrintingFormat != null)
        {
            var toAdd = new Cut("manual", 0, 0);
            toAdd.ManualFormat = Model.PrintingFormat;
            toAdd.CutName = toAdd.GetCuttetFormat(Model.BuyingFormat);
            x.Add(toAdd);
        }
    }

    MakereadyPrintingSingleSheet g = (MakereadyPrintingSingleSheet)Model.GainPrintingOnBuying.Makereadys.FirstOrDefault();

}

<div id="sheetCostDetail">
    <div class="control-group">
        <div class="controls col-sm-9">
            @Html.DropDownListFor(y => y.BuyingFormat,
                new SelectList(Model.BuyingFormats), new { id = "ddBuyingFormat" })
        </div>
    </div>

    <div class="control-group">
        <div class="controls col-sm-9">
            @Html.DropDownListFor(y => y.PrintingFormat,
                new SelectList(x, "CutName", "CutName"), new { id = "ddPrintingFormat" })
        </div>
    </div>

    @Html.AlgolaEditorFor(y => y.ProductPart.Format)

    <canvas id="buyingSheet" width="500" height="170"></canvas>

    <div id="partialPrinting">
    @if (Model.ProductPartPrinting != null)
    {
        switch (Model.ProductPartPrinting.TypeOfProductPartPrinting) //TODO: fare il tipo TypeOfPartPrinting
        {
            case ProductPartPrintingSheet.ProductPartPrintingType.ProductPartSingleSheetPrinting:
                Html.RenderPartial("_ProductPartSingleSheetPrinting", Model.ProductPartPrinting);
                break;
            case ProductPartPrintingSheet.ProductPartPrintingType.ProductPartCoverSheetPrinting:
                Html.RenderPartial("_ProductPartCoverSheetPrinting", Model.ProductPartPrinting);
                break;
            case ProductPartPrintingSheet.ProductPartPrintingType.ProductPartBookSheetPrinting:
                Html.RenderPartial("_ProductPartBookSheetPrinting", Model.ProductPartPrinting);
                break;
            default:
                break;
        }        
    }
    </div>


</div>

<script type="text/javascript">

    $("#ddBuyingFormat").change(function () {

        var buyingFormat = "";
        $("#ddBuyingFormat option:selected").each(function () {
            buyingFormat += $(this)[0].value;
        });

        //data are collected into
        var dataToPass = {
            buyingFormat: buyingFormat,
        };

        $.ajax({
            url: '@(Url.Action("ChangeBuyingFormatInPrintingSheetCostDetail", "Document", new { area = "Working" }))',
            type: 'POST',
            data: JSON.stringify(dataToPass),
            contentType: 'application/json; charset=utf-8',
            success: function (data) {
                $('#sheetCostDetail').html(data);
                reloadFormat();
            },
            error: function () {
                alert("error");
            },

        });
    });

</script>

<script type="text/javascript">

    $("#ddPrintingFormat").change(function () {

        var printingFormat = "";
        $("#ddPrintingFormat option:selected").each(function () {
            printingFormat += $(this)[0].value;
        });

        //data are collected into
        var dataToPass = {
            printingFormat: printingFormat,
        };

        $.ajax({
            url: '@(Url.Action("ChangePrintingFormatInPrintingSheetCostDetail", "Document", new { area = "Working" }))',
            type: 'POST',
            data: JSON.stringify(dataToPass),
            contentType: 'application/json; charset=utf-8',
            success: function (data) {
                $('#sheetCostDetail').html(data);
                reloadFormat();
            },
            error: function () {
                alert("error");
            },

        });
    });

</script>

<script type="text/javascript">

    function drawBuiyngFormat(context, buyingFormatV, buyingFormatH, offsety, offsetx, zoom, bv) {

        buyingFormatH *= zoom;
        buyingFormatV *= zoom;

        var passo = 10 * zoom;

        context.beginPath();

        context.strokeStyle = "#eee";
        context.stroke();

        context.beginPath();
        context.rect(offsetx + 0, offsety + 0, buyingFormatH, buyingFormatV);
        context.strokeStyle = "rgb(10, 10, 10)";
        context.stroke();

    }

    function drawPrintingFormat(context, printingFormatV, printingFormatH, offsety, offsetx, zoom, sideOnside, gainOnSide1, gainOnSide2) {

        printingFormatH *= zoom;
        printingFormatV *= zoom;

        var passo = 10 * zoom;

        context.beginPath();

        context.strokeStyle = "#eee";
        context.stroke();

        context.beginPath();
        if (sideOnside == 'True') {

            for (var j = 0; j < gainOnSide1; j++) {
                for (var i = 0; i < gainOnSide2; i++) {
                    context.rect(offsetx + printingFormatH * i, offsety + printingFormatV * j, printingFormatH, printingFormatV);
                }
            }
        }
        else {
            for (var j = 0; j < gainOnSide2; j++) {
                for (var i = 0; i < gainOnSide1; i++) {
                    context.rect(offsetx + printingFormatV * j, offsety + printingFormatH * i, printingFormatV, printingFormatH);
                }
            }
        }


        context.strokeStyle = "rgb(10, 10, 10)";
        context.stroke();

    }

    function reloadFormat() {

        var side1 = '@Model.BuyingFormat.GetSide1()';
        var side2 = '@Model.BuyingFormat.GetSide2()';

        var c_canvas = document.getElementById("buyingSheet");
        var context = c_canvas.getContext("2d");

        var zoom = 2.5;
        var offsetX = 0;
        var offsetY = 0;

        drawBuiyngFormat(context, side1, side2, offsetX, offsetY, zoom, 0);

        var side1pr = '@Model.PrintingFormat.GetSide1()';
        var side2pr = '@Model.PrintingFormat.GetSide2()';

        var sideOnSide = '@g.SideOnSide';

        var gain1 = parseInt('@g.ShapeOnSide1');
        var gain2 = parseInt('@g.ShapeOnSide2');

        drawPrintingFormat(context, side1pr, side2pr, offsetX, offsetY, zoom, sideOnSide, gain1, gain2);

        drawPrintingAndSheet();

    }

</script>

<script type="text/javascript">

    //this event is fired only the first time
    $(document).ready(function () {
        reloadFormat(); //draw buying and printing
    });
</script>
