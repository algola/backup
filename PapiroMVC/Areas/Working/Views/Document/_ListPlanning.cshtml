@using Mvc.HtmlHelpers
@using PapiroMVC.Validation
@model PapiroMVC.Models.TaskCenter
@using System.Web.Script.Serialization


@{
    string strings = "~/Areas/Working/Views/Document/Strings";
    string[] codTaskCenters = Model.TaskCenters;
    string editUrl = Url.Action("EditDocumentTaskCenter", new { controller = "Document", area = "Working" });

    Console.Write(codTaskCenters);

}

<table id="list@(Model.CodTaskCenter)"><tr><td /></tr></table>
<div id="pager@(Model.CodTaskCenter)"></div>

<script type="text/javascript">

    //<![CDATA[
    /*global $ */
    /*jslint devel: true, browser: true, plusplus: true */
    //$.jgrid.formatter.integer.thousandsSeparator = ',';
    //$.jgrid.formatter.number.thousandsSeparator = ',';
    //$.jgrid.formatter.currency.thousandsSeparator = ',';
    $(document).ready(function () {


        'use strict';

        var // myData = [],
            $grid@(Model.CodTaskCenter) = $("#list@(Model.CodTaskCenter)"),

           numberSearchOptions = ['eq', 'ne', 'lt', 'le', 'gt', 'ge', 'nu', 'nn', 'in', 'ni'],
           numberTemplate = {
               formatter: 'number', align: 'right', sorttype: 'number',
               searchoptions: { sopt: numberSearchOptions }
           },
            myDefaultSearch = 'cn',
            getColumnIndex = function (grid, columnIndex) {
                var cm = grid.jqGrid('getGridParam', 'colModel'), i, l = cm.length;
                for (i = 0; i < l; i++) {
                    if ((cm[i].index || cm[i].name) === columnIndex) {
                        return i; // return the colModel index
                    }
                }
                return -1;
            },
            refreshSerchingToolbar = function ($grid@(Model.CodTaskCenter), myDefaultSearch) {
                var postData = $grid@(Model.CodTaskCenter).jqGrid('getGridParam', 'postData'), filters, i, l,
                    rules, rule, iCol, cm = $grid@(Model.CodTaskCenter).jqGrid('getGridParam', 'colModel'),
                    cmi, control, tagName;

                for (i = 0, l = cm.length; i < l; i++) {
                    control = $("#gs_" + $.jgrid.jqID(cm[i].name));
                    if (control.length > 0) {
                        tagName = control[0].tagName.toUpperCase();
                        if (tagName === "SELECT") { // && cmi.stype === "select"
                            control.find("option[value='']")
                                .attr('selected', 'selected');
                        } else if (tagName === "INPUT") {
                            control.val('');
                        }
                    }
                }

                if (typeof (postData.filters) === "string" &&
                        typeof ($grid@(Model.CodTaskCenter)[0].ftoolbar) === "boolean" && $grid@(Model.CodTaskCenter)[0].ftoolbar) {

                    filters = $.parseJSON(postData.filters);
                    if (filters && filters.groupOp === "AND" && typeof (filters.groups) === "undefined") {
                        // only in case of advance searching without grouping we import filters in the
                        // searching toolbar
                        rules = filters.rules;
                        for (i = 0, l = rules.length; i < l; i++) {
                            rule = rules[i];
                            iCol = getColumnIndex($grid@(Model.CodTaskCenter), rule.field);
                            if (iCol >= 0) {
                                cmi = cm[iCol];
                                control = $("#gs_" + $.jgrid.jqID(cmi.name));
                                if (control.length > 0 &&
                                        (((typeof (cmi.searchoptions) === "undefined" ||
                                        typeof (cmi.searchoptions.sopt) === "undefined")
                                        && rule.op === myDefaultSearch) ||
                                          (typeof (cmi.searchoptions) === "object" &&
                                              $.isArray(cmi.searchoptions.sopt) &&
                                              cmi.searchoptions.sopt.length > 0 &&
                                              cmi.searchoptions.sopt[0] === rule.op))) {
                                    tagName = control[0].tagName.toUpperCase();
                                    if (tagName === "SELECT") { // && cmi.stype === "select"
                                        control.find("option[value='" + $.jgrid.jqID(rule.data) + "']")
                                            .attr('selected', 'selected');
                                    } else if (tagName === "INPUT") {
                                        control.val(rule.data);
                                    }
                                }
                            }
                        }
                    }
                }
            },
            cm = [

                        { name: 'DocumentName', label: '@Model.TaskCenterName', width: 80},
                        { name: 'CodDocumentTask', label: '', width: 1, hidden:true },
//                        { name: 'Finished', label: '@Html.T(strings, "Finished")', width: 30, align: 'center', editable: false, search: false, formatter: finishFormatter }

                        { name: 'FieldA', label: '@Html.T(strings, "FieldA")', width: 1, hidden: true, align: 'left', editable: false, search: false },
                        { name: 'FieldB', label: '@Html.T(strings, "FieldA")', width: 1, hidden: true, align: 'left', editable: false, search: false },
                        { name: 'FieldC', label: '@Html.T(strings, "FieldB")', width: 1, hidden: true,align: 'left', editable: false, search: false },

                        { name: 'AssignedAtString', label: '@Html.T(strings, "AssignedAt")', width: 50,hidden: true, formatoptions: { disabled: true }, editable: true, editoptions: { dataInit: function (el) { setTimeout(function () { $(el).datepicker(); }, 200); } } },
                        { name: 'AlarmStartingAtString', label: '@Html.T(strings, "AlarmStartingAt")', width: 50,hidden: true, formatoptions: { disabled: true }, editable: true, editoptions: { dataInit: function (el) { setTimeout(function () { $(el).datepicker(); }, 200); } } },

                        { name: 'Started', label: '@Html.T(strings, "Started")', width: 50, editable: true,hidden: true, edittype: 'checkbox', editoptions: { value: "True:False" }, formatter: "checkbox", formatoptions: { disabled: true } },

                        { name: 'StartedAtString', label: '@Html.T(strings, "StartedAt")', width: 50,hidden: true, formatoptions: { disabled: true }, editable: true, editoptions: { dataInit: function (el) { setTimeout(function () { $(el).datepicker(); }, 200); } } },
                        { name: 'AlarmFinishingAtString', label: '@Html.T(strings, "AlarmFinishingAt")', width: 50,hidden: true, formatoptions: { disabled: true }, editable: true, editoptions: { dataInit: function (el) { setTimeout(function () { $(el).datepicker(); }, 200); } } },

                        { name: 'Finished', label: '@Html.T(strings, "Finished")', width: 50,hidden: true, editable: true, edittype: 'checkbox', editoptions: { value: "True:False" }, formatter: "checkbox", formatoptions: { disabled: true } },

            { name: 'Alert1', label: '', hidden:true, width: 50, formatter: rowColorFormatterAlertStart },
            { name: 'Alert2', label: '', hidden:true, width: 50, formatter: rowColorFormatterAlertFinish },
            { name: 'FinishedColor', label: '', hidden:true, width: 50, formatter: rowColorFormatterFinished }

            ],

            saveObjectInLocalStorage = function (storageItemName, object) {
                if (typeof window.localStorage !== 'undefined') {
                    window.localStorage.setItem(storageItemName, JSON.stringify(object));
                }
            },
            removeObjectFromLocalStorage = function (storageItemName) {
                if (typeof window.localStorage !== 'undefined') {
                    window.localStorage.removeItem(storageItemName);
                }
            },
            getObjectFromLocalStorage = function (storageItemName) {
                if (typeof window.localStorage !== 'undefined') {
                    return JSON.parse(window.localStorage.getItem(storageItemName));
                }
            },
            myColumnStateName = 'listPlanning@(Model.CodTaskCenter).colState',
            saveColumnState = function (perm) {
                var colModel = this.jqGrid('getGridParam', 'colModel'), i, l = colModel.length, colItem, cmName,
                    postData = this.jqGrid('getGridParam', 'postData'),
                    columnsState = {
                        search: this.jqGrid('getGridParam', 'search'),
                        page: this.jqGrid('getGridParam', 'page'),
                        sortname: this.jqGrid('getGridParam', 'sortname'),
                        sortorder: this.jqGrid('getGridParam', 'sortorder'),
                        permutation: perm,
                        colStates: {}
                    },
                    colStates = columnsState.colStates;

                if (typeof (postData.filters) !== 'undefined') {
                    columnsState.filters = postData.filters;
                }

                for (i = 0; i < l; i++) {
                    colItem = colModel[i];
                    cmName = colItem.name;
                    if (cmName !== 'rn' && cmName !== 'cb' && cmName !== 'subgrid') {
                        colStates[cmName] = {
                            width: colItem.width,
                            hidden: colItem.hidden
                        };
                    }
                }
                saveObjectInLocalStorage(myColumnStateName, columnsState);
            },
            myColumnsState,
            isColState,
            restoreColumnState = function (colModel) {
                var colItem, i, l = colModel.length, colStates, cmName,
                    columnsState = getObjectFromLocalStorage(myColumnStateName);

                if (columnsState) {
                    colStates = columnsState.colStates;
                    for (i = 0; i < l; i++) {
                        colItem = colModel[i];
                        cmName = colItem.name;
                        if (cmName !== 'rn' && cmName !== 'cb' && cmName !== 'subgrid') {
                            colModel[i] = $.extend(true, {}, colModel[i], colStates[cmName]);
                        }
                    }
                }
                return columnsState;
            },


        firstLoad = true;

        var rowsToAlarmStart = [];
        var rowsToAlarmFinish = [];
        var rowsFinished = [];

        var lastId@(Model.CodTaskCenter) = '';
        var firstId@(Model.CodTaskCenter) = '';

        myColumnsState = restoreColumnState(cm);
        isColState = typeof (myColumnsState) !== 'undefined' && myColumnsState !== null;

        $grid@(Model.CodTaskCenter).jqGrid({
            url: '@(Url.Action("DocumentTaskCenter", "Document", new { codTaskCenter = Model.CodTaskCenter }))',
            editUrl: '@editUrl',
            datatype: 'json',
            colModel: cm,
            loadtext: '',
            viewrecords: true,
            autowidth: true,
            shrinkToFit: false,
            print: true,
            rowNum: 1000,
         //   pager: '#pager@(Model.CodTaskCenter)',
            scrollOffset: 0,
            gridview: true,
            page: isColState ? myColumnsState.page : 1,
            search: isColState ? myColumnsState.search : false,
            postData: isColState ? { filters: myColumnsState.filters } : {},
            sortname: isColState ? myColumnsState.sortname : 'invdate',
            sortorder: isColState ? myColumnsState.sortorder : 'desc',
            ignoreCase: true,
            caption: '',
            height: $(window).height() * 0.90,
            loaderror: '@(Html.T(strings, "ErrorLoading"))',
            loadComplete: function () {
                var $this = $(this);

                var table = this;
                setTimeout(function () {
                    updateActionIcons(table);
                    updatePagerIcons(table);
                    enableTooltips(table);
                }, 0);

                if (firstLoad) {
                    firstLoad = false;
                    if (isColState) {
                        $this.jqGrid("remapColumns", myColumnsState.permutation, true);
                    }
                    if (typeof (this.ftoolbar) !== "boolean" || !this.ftoolbar) {
                        // create toolbar if needed
                        //$this.jqGrid('filterToolbar',
                        //    { stringResult: true, searchOnEnter: true, defaultSearch: myDefaultSearch });
                    }
                }
                refreshSerchingToolbar($this, myDefaultSearch);
                saveColumnState.call($this, this.p.remapColumns);
                //filters check************************************************
                var $this = $(this);
                var filters = $this.jqGrid('getGridParam', 'postData').filters;



                if ((filters === '{"groupOp":"AND","rules":[]}') ||
                    (filters === '{"groupOp":"AND","rules":[{"field":"Category","op":"eq","data":"0"}]}')) {
                    $("#checkFilterMessage").hide();
                }
                //filters check************************************************
            },


            gridComplete: function () {
                for (var i = 0; i < rowsToAlarmStart.length; i++) {
                    //   var status = $("#" + rowsToColor[i]).find("td").eq(7).html();
                    //  if (status == "Complete") {
                    $("#" + rowsToAlarmStart[i]).find("td").css("background-color", "gold");
                    //  $("#" + rowsToColor[i]).find("td").css("color", "silver");
                    //                    }
                }
                for (var i = 0; i < rowsToAlarmFinish.length; i++) {
                    $("#" + rowsToAlarmFinish[i]).find("td").css("background-color", "tomato");
                    //                    $("#" + rowsToAlarmFinish[i]).find("td").css("color", "silver");
                }

                for (var i = 0; i < rowsFinished.length; i++) {
                    $("#" + rowsFinished[i]).find("td").css("background-color", "dimgray");
                    $("#" + rowsFinished[i]).find("td").css("color", "silver");
                }

                ////scroll
                var ids = jQuery("#list@(Model.CodTaskCenter)").jqGrid('getDataIDs');

                if (ids.length>0) {
                    firstId@(Model.CodTaskCenter) = ids[0];
                    lastId@(Model.CodTaskCenter) = ids[ids.length-1];

                    var toggle=false;

                    var myTimer = setInterval(function() {

                        if (toggle)
                            scrollToRow("#list@(Model.CodTaskCenter)",firstId@(Model.CodTaskCenter));
                        else
                            scrollToRow("#list@(Model.CodTaskCenter)",lastId@(Model.CodTaskCenter));
                                
                        toggle = !toggle;

                    }, 15000);

                }


            },

            resizeStop: function () {
                saveColumnState.call($grid@(Model.CodTaskCenter), $grid@(Model.CodTaskCenter)[0].p.remapColumns);
            },
            ondblClickRow: function(rowid) {

                showProcessingMsg();
                save();
                hideProcessingMsg();
                $(window.location).attr('href', "@(Url.Action("PlanningDetail", "Document", new { id = Model.CodTaskCenter }))");

            }
        });



        function rowColorFormatterAlertStart(cellValue, options, rowObject) {
            if (cellValue == "True")
                rowsToAlarmStart[rowsToAlarmStart.length] = options.rowId;
            return cellValue;
        }

        function rowColorFormatterAlertFinish(cellValue, options, rowObject) {
            if (cellValue == "True")
                rowsToAlarmFinish[rowsToAlarmFinish.length] = options.rowId;
            return cellValue;
        }

        function rowColorFormatterFinished(cellValue, options, rowObject) {
            if (cellValue == "True")
                rowsFinished[rowsFinished.length] = options.rowId;
            return cellValue;
        }

        $.extend($.jgrid.search, {
            multipleSearch: true,
            multipleGroup: true,
            recreateFilter: true,
            closeOnEscape: true,
            closeAfterSearch: true,
            overlay: 0
        });

        //        $grid@(Model.CodTaskCenter).jqGrid('navGrid', '#pager@(Model.CodTaskCenter)', { edit: false, add: false, del: false });



        var getColumnIndexByName = function (columnName) {
            var cm = $(this).jqGrid("getGridParam", "colModel"), l = cm.length, i;
            for (i = 0; i < l; i++) {
                if (cm[i].name === columnName) {
                    return i; // return the index
                }
            }
            return -1;
        };

        var myArray = @Html.Raw(new JavaScriptSerializer().Serialize(codTaskCenters));

        var conc = '';
        for (var k = 0; k < myArray.length; k++) {

            if ('@(Model.CodTaskCenter)'!=myArray[k]) {
                if (conc=='')
                    conc = '#list' + myArray[k];
                else
                    conc = conc + ',' + '#list' + myArray[k];
            }
        }

        //        $grid@(Model.CodTaskCenter).jqGrid('sortableRows', { connectWith:  conc });
        $grid@(Model.CodTaskCenter).jqGrid('gridDnD', { connectWith:  conc ,

            beforedrop: function (ev, ui, getdata, $source, $target) {
                getdata.Finished = 0;
                getdata.Started = 0;
                getdata.FinishedColor = 0;
            },

            ondrop: function (ev, ui, getdata, $source, $target) {
                // alert(getdata.CodDocumentTask);
                var url = '@Url.Action("ResetFinishedDocumentTask", "Document", new { area = "Working"})';

                $.ajax({
                    type: "POST",
                    url: url,
                    data: {
                        'id': getdata.CodDocumentTask
                    }
                }).complete(function(){

                });

            }

        });


    });
    //]]>

</script>


<script type="text/javascript">



    function finishFormatter(cellvalue, options, rowobject) {

        var link = '<i class="icon"></i>';

        if (cellvalue == "False")
            return link.replace("icon", "icon-unlock");

        if (cellvalue == "True")
            return link.replace("icon", "icon-lock");

        return link;

    }


    var save;
    var canStar;

    $(document).ready( function()
    {

        canStar=true;
        save = function (complete)
        {

            if (complete === undefined) {
                complete = false;
            }

            var myArray = @Html.Raw(new JavaScriptSerializer().Serialize(codTaskCenters));
            showProcessingMsg();

            for (var k = 0; k < myArray.length; k++) {

                conc = '#list' + myArray[k];
                var $grid = $('#list' + myArray[k]);

                var codTaskCenter = myArray[k];
                var url = '@Url.Action("ChangeTaskCenterOrder", "Document", new { area = "Working"})';
                var data1 =$grid.jqGrid("getDataIDs");

                var data = $grid.jqGrid('getCol', 'CodDocumentTask', false);
                var data2 = $grid.jqGrid('getCol', 'Finished', false);
                var data3 = $grid.jqGrid('getCol', 'Started', false);

                var canStart = true;

                while (!canStart)
                {

                }

                canStart=false;
                $.ajax({
                    type: "POST",
                    url: url,
                    data: {
                        'ids': JSON.stringify(data),
                        'finisheds': JSON.stringify(data2),
                        'starteds': JSON.stringify(data3),
                        'codTaskCenter' : codTaskCenter
                    }
                }).complete(function(){
                    canStart=true;
                });
            }

            hideProcessingMsg();


            if (complete) {
                showProcessingMsg();
                url = '@Url.Action("SaveTaskCenterOrderState", "Document", new { area = "Working" })';
                $.ajax({
                    type: "POST",
                    url: url,
                    data: {
                        'ids': JSON.stringify(data),
                        'codTaskCenter' : codTaskCenter
                    }
                }).complete(function(){
                    hideProcessingMsg();
                    updateOtherClient();
                });
            }else
            {
                updateOtherClient();
            }
        }

    });


</script>