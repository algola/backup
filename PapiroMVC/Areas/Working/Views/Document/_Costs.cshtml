@using PapiroMVC.Validation
@using Mvc.HtmlHelpers

@model PapiroMVC.Models.DocumentProduct

@{
    string strings = "~/Areas/Working/Views/Document/Strings";
    string url = Url.Action("Costs", "Document", new { codDocumentProduct = Model.CodDocumentProduct });
    string editUrl = Url.Action("EditCostManual", new { controller = "Document", area = "Working" });

}

<table id="costGrid@(Model.CodDocumentProduct)">
    <tr>
        <td />
    </tr>
</table>
@*<div id="pagerCostGrid@(Model.CodDocumentProduct)"></div>*@


<script type="text/javascript">
    //<![CDATA[
    /*global $ */
    /*jslint devel: true, browser: true, plusplus: true */
    //$.jgrid.formatter.integer.thousandsSeparator = ',';
    //$.jgrid.formatter.number.thousandsSeparator = ',';
    //$.jgrid.formatter.currency.thousandsSeparator = ',';
    $(document).ready(function () {

        'use strict';
        var lastSel = -1,
         // myData = [],
            $grid = $("#costGrid@(Model.CodDocumentProduct)"),

            numberSearchOptions = ['eq', 'ne', 'lt', 'le', 'gt', 'ge', 'nu', 'nn', 'in', 'ni'],
            numberTemplate = {
                formatter: 'number', align: 'right', sorttype: 'number',
                searchoptions: { sopt: numberSearchOptions }
            },
            myDefaultSearch = 'cn',
            getColumnIndex = function (grid, columnIndex) {
                var cm = grid.jqGrid('getGridParam', 'colModel'), i, l = cm.length;
                for (i = 0; i < l; i++) {
                    if ((cm[i].index || cm[i].name) === columnIndex) {
                        return i; // return the colModel index
                    }
                }
                return -1;
            },
            refreshSerchingToolbar = function ($grid, myDefaultSearch) {
                var postData = $grid.jqGrid('getGridParam', 'postData'), filters, i, l,
                    rules, rule, iCol, cm = $grid.jqGrid('getGridParam', 'colModel'),
                    cmi, control, tagName;

                for (i = 0, l = cm.length; i < l; i++) {
                    control = $("#gs_" + $.jgrid.jqID(cm[i].name));
                    if (control.length > 0) {
                        tagName = control[0].tagName.toUpperCase();
                        if (tagName === "SELECT") { // && cmi.stype === "select"
                            control.find("option[value='']")
                                .attr('selected', 'selected');
                        } else if (tagName === "INPUT") {
                            control.val('');
                        }
                    }
                }

                if (typeof (postData.filters) === "string" &&
                        typeof ($grid[0].ftoolbar) === "boolean" && $grid[0].ftoolbar) {

                    filters = $.parseJSON(postData.filters);
                    if (filters && filters.groupOp === "AND" && typeof (filters.groups) === "undefined") {
                        // only in case of advance searching without grouping we import filters in the
                        // searching toolbar
                        rules = filters.rules;
                        for (i = 0, l = rules.length; i < l; i++) {
                            rule = rules[i];
                            iCol = getColumnIndex($grid, rule.field);
                            if (iCol >= 0) {
                                cmi = cm[iCol];
                                control = $("#gs_" + $.jgrid.jqID(cmi.name));
                                if (control.length > 0 &&
                                        (((typeof (cmi.searchoptions) === "undefined" ||
                                        typeof (cmi.searchoptions.sopt) === "undefined")
                                        && rule.op === myDefaultSearch) ||
                                          (typeof (cmi.searchoptions) === "object" &&
                                              $.isArray(cmi.searchoptions.sopt) &&
                                              cmi.searchoptions.sopt.length > 0 &&
                                              cmi.searchoptions.sopt[0] === rule.op))) {
                                    tagName = control[0].tagName.toUpperCase();
                                    if (tagName === "SELECT") { // && cmi.stype === "select"
                                        control.find("option[value='" + $.jgrid.jqID(rule.data) + "']")
                                            .attr('selected', 'selected');
                                    } else if (tagName === "INPUT") {
                                        control.val(rule.data);
                                    }
                                }
                            }
                        }
                    }
                }
            },

            //upload partial!!!!
        updateCostAmount = function () {
            var dataToPass = {
                codDocument: '@(Model.CodDocument)',
                codDocumentProduct: '@Model.CodDocumentProduct'
            };

            $.ajax({
                type: 'POST',
                url: '@Url.Action("GetDocumentProduct", new { controller = "Document", area = "Working"})',
                data: dataToPass,
                success: function (data) {
                    $('#documentProduct@(Model.CodDocumentProduct)').html(data);
                    initPage();
                }
            });
        },
            cm = [
                { name: 'Operation', label: '@HttpContext.GetLocalResourceObject(strings, "OperationsCaption")', width: 80, align: 'right', editable: false, hidden: false, formatter: editCost, search: false },
                    { name: 'CodCost', width: 60, align: 'right', editable: true, hidden: true, search: false },
                    { name: 'Locked', label: '@HttpContext.GetLocalResourceObject(strings, "Locked")', width: 30, align: 'center', editable: false, search: false, formatter: blkFormatter },
                    { name: 'Inclusion', label: '@HttpContext.GetLocalResourceObject(strings, "Inclusion")', width: 30, align: 'center', editable: false, search: false, formatter: InclFormatter },
                    { name: 'Description', label: '@HttpContext.GetLocalResourceObject(strings, "Description")', width: 350, align: 'right', editable: false, search: false },
                    { name: 'TypeOfQuantity', label: '@HttpContext.GetLocalResourceObject(strings, "Um")', width: 50, align: 'center', editable: false, search: false, formatter: umFormatter },
                    { name: 'Quantity', label: '@HttpContext.GetLocalResourceObject(strings, "Quantity")', width: 50, align: 'right', editable: true, search: false },
                    { name: 'UnitCost', label: '@HttpContext.GetLocalResourceObject(strings, "UnitCost")', width: 50, align: 'right', editable: true, search: false },
                    { name: 'TotalCost', label: '@HttpContext.GetLocalResourceObject(strings, "TotalCost")', width: 50, align: 'right', editable: false, search: false },
                    { name: 'Markup', label: '@HttpContext.GetLocalResourceObject(strings, "Markup")', width: 50, align: 'right', editable: true, search: false },
                    { name: 'GranTotalCost', label: '@HttpContext.GetLocalResourceObject(strings, "GranTotalCost")', width: 50, align: 'right', editable: false, search: false }],

                    saveObjectInLocalStorage = function (storageItemName, object) {
                        if (typeof window.localStorage !== 'undefined') {
                            window.localStorage.setItem(storageItemName, JSON.stringify(object));
                        }
                    },
            removeObjectFromLocalStorage = function (storageItemName) {
                if (typeof window.localStorage !== 'undefined') {
                    window.localStorage.removeItem(storageItemName);
                }
            },
            getObjectFromLocalStorage = function (storageItemName) {
                if (typeof window.localStorage !== 'undefined') {
                    return JSON.parse(window.localStorage.getItem(storageItemName));
                }
            },
            myColumnStateName = 'costGrid.colState',
            saveColumnState = function (perm) {
                var colModel = this.jqGrid('getGridParam', 'colModel'), i, l = colModel.length, colItem, cmName,
                    postData = this.jqGrid('getGridParam', 'postData'),
                    columnsState = {
                        search: this.jqGrid('getGridParam', 'search'),
                        page: this.jqGrid('getGridParam', 'page'),
                        sortname: this.jqGrid('getGridParam', 'sortname'),
                        sortorder: this.jqGrid('getGridParam', 'sortorder'),
                        permutation: perm,
                        colStates: {}
                    },
                    colStates = columnsState.colStates;

                if (typeof (postData.filters) !== 'undefined') {
                    columnsState.filters = postData.filters;
                }

                for (i = 0; i < l; i++) {
                    colItem = colModel[i];
                    cmName = colItem.name;
                    if (cmName !== 'rn' && cmName !== 'cb' && cmName !== 'subgrid') {
                        colStates[cmName] = {
                            width: colItem.width,
                            hidden: colItem.hidden
                        };
                    }
                }
                saveObjectInLocalStorage(myColumnStateName, columnsState);
            },
            myColumnsState,
            isColState,
            restoreColumnState = function (colModel) {
                var colItem, i, l = colModel.length, colStates, cmName,
                    columnsState = getObjectFromLocalStorage(myColumnStateName);

                if (columnsState) {
                    colStates = columnsState.colStates;
                    for (i = 0; i < l; i++) {
                        colItem = colModel[i];
                        cmName = colItem.name;
                        if (cmName !== 'rn' && cmName !== 'cb' && cmName !== 'subgrid') {
                            colModel[i] = $.extend(true, {}, colModel[i], colStates[cmName]);
                        }
                    }
                }
                return columnsState;
            },
            firstLoad = true;

        myColumnsState = restoreColumnState(cm);
        isColState = typeof (myColumnsState) !== 'undefined' && myColumnsState !== null;

        $grid.jqGrid({
            url: '@url',
            datatype: 'json',
            colModel: cm,
            loadtext: '',
            viewrecords: true,
            autowidth: true,
            shrinkToFit: false,

            print: true,
            rowNum: 20,

            rowList: [10, 20, 50],
            gridview: true,
            multiselect: true,
            pager: '#pagerCostGrid@(Model.CodDocumentProduct)',
            page: isColState ? myColumnsState.page : 1,
            search: isColState ? myColumnsState.search : false,
            postData: isColState ? { filters: myColumnsState.filters } : {},
            sortname: isColState ? myColumnsState.sortname : 'invdate',
            sortorder: isColState ? myColumnsState.sortorder : 'desc',
            ignoreCase: true,
            //viewrecords: true,
            caption: '',
            height: 250,

            onSelectRow: function (id) {
                if (id && id !== lastSel) {
                    $("#costGrid@(Model.CodDocumentProduct)").jqGrid('restoreRow', lastSel);
                    lastSel = id;
                }
            },

            ondblClickRow: function (id, ri, ci) {

                if (ci === 3) {

                    var link = '@Url.Action("EditCostTroggleLock", "Document", new { Area = "Working", id = "type" })'.replace("type", id);

                    var jqxhr = $.get(link, function () {
                        $("#costGrid@(Model.CodDocumentProduct)").trigger("reloadGrid");
                    })
                    .done(function () {
                        updateCostAmount();

                    })
                    .fail(function () {
                        updateCostAmount();

                    });


                }

                else if (ci === 4) {

                    var link = '@Url.Action("EditCostTroggleInclusion", "Document", new { Area = "Working", id = "type" })'.replace("type", id);

                    var jqxhr = $.get(link, function () {
                        $("#costGrid@(Model.CodDocumentProduct)").trigger("reloadGrid");
                    })
                    .done(function () {
                        updateCostAmount();

                    })
                    .fail(function () {
                        updateCostAmount();

                    });


                } else {
                    $("#costGrid@(Model.CodDocumentProduct)").jqGrid('editRow', id, {
                        keys: true,
                        oneditfunc: function () {
                            //...
                        },
                        aftersavefunc: function () {
                            $("#costGrid@(Model.CodDocumentProduct)").trigger("reloadGrid");
                            updateCostAmount();
                        },
                        url: '@editUrl'
                    });
                    //editRow(rowid, keys, oneditfunc, successfunc, url, extraparam, aftersavefunc, errorfunc, afterrestorefunc);
                }
                return;
            },

            loaderror: '@(Html.T(strings, "ErrorLoading"))',
            loadComplete: function () {

                var $this = $(this);

                var table = this;
                setTimeout(function () {
                    updateActionIcons(table);
                    updatePagerIcons(table);
                    enableTooltips(table);
                }, 0);


                if (firstLoad) {
                    firstLoad = false;
                    if (isColState) {
                        $this.jqGrid("remapColumns", myColumnsState.permutation, true);
                    }
                    if (typeof (this.ftoolbar) !== "boolean" || !this.ftoolbar) {
                        // create toolbar if needed
                        $this.jqGrid('filterToolbar',
                            { stringResult: true, searchOnEnter: true, defaultSearch: myDefaultSearch });
                    }
                }
                refreshSerchingToolbar($this, myDefaultSearch);
                saveColumnState.call($this, this.p.remapColumns);
            },
            resizeStop: function () {
                saveColumnState.call($grid, $grid[0].p.remapColumns);
            }
        });
        $.extend($.jgrid.search, {
            multipleSearch: true,
            multipleGroup: true,
            recreateFilter: true,
            closeOnEscape: true,
            closeAfterSearch: true,
            overlay: 0
        });
        $grid.jqGrid('navGrid', '#pagerCostGrid@(Model.CodDocumentProduct)', { edit: false, add: false, del: false });
        $grid.jqGrid('navButtonAdd', '#pagerCostGrid@(Model.CodDocumentProduct)', {
            caption: "",
            buttonicon: "ui-icon-calculator",
            title: "choose columns",
            onClickButton: function () {
                $(this).jqGrid('columnChooser', {
                    done: function (perm) {
                        if (perm) {
                            this.jqGrid("remapColumns", perm, true);
                            saveColumnState.call(this, perm);
                        }
                    }
                });
            }
        });
        $grid.jqGrid('navButtonAdd', '#pagerCostGrid@(Model.CodDocumentProduct)', {
            caption: "",
            buttonicon: "ui-icon-closethick",
            title: "clear saved grid's settings",
            onClickButton: function () {
                removeObjectFromLocalStorage(myColumnStateName);
                window.location.reload();
            }
        });
    });
    //]]>
</script>

<script type="text/javascript">

    //ricalibro la griglia
    function resize@(Model.CodDocumentProduct.Replace("-","_"))() {

        var myGrid = $("#costGrid@(Model.CodDocumentProduct)");

        var width = $("#myTabo").width();

        var t =$("#myTabo").offset().top - $("#myTabo").height;
        var s = $(window).height() - t;


        try {

            var $content = $('#container-grid');
            $content.height(s);
            myGrid.jquery('setGridHeigth', s);
            myGrid.jqGrid('setGridWidth', width, false);

        } catch (e) {

        }

    }

    var resize@(Model.CodDocumentProduct.Replace("-","_"))clearTimeout;

    //resize jqgrid after windows resize
    $(window).bind('resize', function () {
        clearTimeout(resize@(Model.CodDocumentProduct.Replace("-","_"))clearTimeout);
        resize@(Model.CodDocumentProduct.Replace("-","_"))clearTimeout = setTimeout('resize@(Model.CodDocumentProduct.Replace("-", "_"))()',500)
        //alert("ciao");
    }).trigger('resize');

</script>
