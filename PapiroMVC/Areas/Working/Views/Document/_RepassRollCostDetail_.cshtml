@using PapiroMVC.Validation
@using PapiroMVC.Models
@model PapiroMVC.Models.RepassRollCostDetail

@{

    string strings = "~/Areas/Working/Views/Document/Strings";
    string stringsCod = "~/Views/Shared/Cuts";

    var x = Model.Cuts;

    Console.WriteLine(Model.GainForRun);

    
   
    MakereadyPrintingSingleSheet g = (MakereadyPrintingSingleSheet)Model.GainPrintingOnBuying.Makereadies.FirstOrDefault();

    //string strings = "~/Areas/Working/Views/Document/Strings";
    //string stringsCod = "~/Views/Shared/Cuts";

    var dCut = Model.ProductPartPrinting.GainPartOnPrinting.DCut ?? 0;

    var dCut1 = Model.ProductPartPrinting.GainPartOnPrinting.DCut1 ?? 0;
    var dCut2 = Model.ProductPartPrinting.GainPartOnPrinting.DCut2 ?? 0;


    }

<div id="sheetCostDetail">


    @(Model.GainForRun ?? 1)

    <div class="row">
        <div class="col-xs-12 col-sm-6">
            <div>
                <div class="vspace"></div>
                <canvas id="buyingSheet" width="300" height="170" style="margin-left: auto; margin-right: auto;display: block;"></canvas>
            </div>
        </div>
    </div>


    <div class="container-fluid">
        <div class="col-xs-12 col-sm-6">
            <h3 class="header smaller lighter green">@Html.T(strings, "Drafting")</h3>
        </div>
    </div>

    <div class="container-fluid">
        <div class="col-xs-12 col-sm-6">
            <div class="form-group">
                <div class="controls col-xs-12">
                    @Html.DropDownListFor(y => y.WorkingFormat,
                new SelectList(x, "CutName", "CutName"), new { id = "ddPrintingFormat", @class = "col-xs-12" })
                </div>
            </div>
        </div>

    </div>

    <div class="space"></div>

    <div class="row">
        <div class="col-xs-12 col-sm-6">
            <canvas id="printingSingleSheet" width="300" height="300" style="margin-left: auto; margin-right: auto;display: block;"></canvas>
        </div>

        <div class="col-xs-12 col-sm-6">
            @*     @Html.Partial("_DCutSheet", Model) *@
        </div>
    </div>
</div>



<div id="partialPrinting">

</div>

<script type="text/javascript">

    $("#ddPartFormat, #ddPartDCut1, #ddPartDCut2").keypress(function (event) {
        if (event.which == 13) {
            event.preventDefault();

            //data are collected into
            var dataToPass = {
                format: $("#ddPartFormat").val(),
                dCut1: $("#ddPartDCut1").val(),
                dCut2: $("#ddPartDCut2").val(),

                maxGain1: $("#maxGain1").val(),
                maxGain2: $("#maxGain2").val()

            };

            $.ajax({
                url: '@(Url.Action("ChangePPartFormat", "Document", new { area = "Working" }))',
                type: 'POST',
                data: JSON.stringify(dataToPass),
                contentType: 'application/json; charset=utf-8',
                success: function (data) {
                    $('#sheetCostDetail').html(data);
                    //reloadFormat();
                    //initAndPosition();

                    // alert("sheetCostDetail")

                },


                error: function () {
                    alert("error");
                },

            });
        }
    });


    $("#ddBuyingFormat").change(function () {

        var buyingFormat = "";
        $("#ddBuyingFormat option:selected").each(function () {
            buyingFormat += $(this)[0].value;
        });

        //data are collected into
        var dataToPass = {
            buyingFormat: buyingFormat,
            format: $("#ddPartFormat").val(),
            dCut1: $("#ddPartDCut1").val(),
            dCut2: $("#ddPartDCut2").val(),
            maxGain1: $("#maxGain1").val(),
            maxGain2: $("#maxGain2").val()

        };

        $.ajax({
            url: '@(Url.Action("ChangeBuyingFormatAndPPartFormat", "Document", new { area = "Working" }))',
            type: 'POST',
            data: JSON.stringify(dataToPass),
            contentType: 'application/json; charset=utf-8',
            success: function (data) {
                $('#sheetCostDetail').html(data);
                //reloadFormat();
                //initAndPosition();
                //alert("sheetCostDetail")

            },
            error: function () {
                alert("error");
            },

        });
    });

    function getPrintingZRollCostDetailResult() {

        $.ajax({
            url: '@(Url.Action("getPrintingZRollCostDetailResult", "Document", new { area = "Working" }))',
            type: 'GET',
            contentType: 'application/json; charset=utf-8',
            success: function (data) {
                $('#results').html(data);
            },
            error: function () {
                alert("error");
            },

        });
    }

</script>

<script type="text/javascript">

    $("#ddPrintingFormat").change(function () {

        event.preventDefault();

        var printingFormat = "";
        $("#ddPrintingFormat option:selected").each(function () {
            printingFormat += $(this)[0].value;
        });

        //data are collected into
        var dataToPass = {
            printingFormat: printingFormat,
        };

        $.ajax({
            url: '@(Url.Action("ChangePrintingFormatRepass", "Document", new { area = "Working" }))',
            type: 'POST',
            data: JSON.stringify(dataToPass),
            contentType: 'application/json; charset=utf-8',
            success: function (data) {
                $('#sheetCostDetail').html(data);
                //reloadFormat();
                //initAndPosition();
                //alert("sheetCostDetail")

            },
            error: function () {
                alert("error");
            },

        });
    });

</script>

<script type="text/javascript">

    function drawBuiyngFormat(context, buyingFormatV, buyingFormatH, offsety, offsetx, zoom, bv) {

        buyingFormatH.replace(/[\.,]/g, function (m) { return m == '.' ? ',' : '.' });
        buyingFormatV.replace(/[\.,]/g, function (m) { return m == '.' ? ',' : '.' });

        buyingFormatH *= zoom;
        buyingFormatV *= zoom;

        var passo = 10 * zoom;

        context.beginPath();

        context.strokeStyle = "#eee";
        context.stroke();

        context.beginPath();
        context.rect(offsetx + 0, offsety + 0, buyingFormatH, buyingFormatV);
        context.strokeStyle = "rgb(10, 10, 10)";
        context.stroke();

    }

    function drawPrintingFormat(context, printingFormatV, printingFormatH, offsety, offsetx, zoom, sideOnside, gainOnSide1, gainOnSide2) {


        printingFormatH.replace(/[\.,]/g, function (m) { return m == '.' ? ',' : '.' });
        printingFormatV.replace(/[\.,]/g, function (m) { return m == '.' ? ',' : '.' });

        printingFormatH *= zoom;
        printingFormatV *= zoom;

        var passo = 10 * zoom;

        context.beginPath();

        context.strokeStyle = "#eee";
        context.stroke();

        context.beginPath();
        if (sideOnside == 'True') {

            for (var j = 0; j < gainOnSide1; j++) {
                for (var i = 0; i < gainOnSide2; i++) {
                    context.rect(offsetx + printingFormatH * i, offsety + printingFormatV * j, printingFormatH, printingFormatV);
                }
            }
        }
        else {
            for (var j = 0; j < gainOnSide2; j++) {
                for (var i = 0; i < gainOnSide1; i++) {
                    context.rect(offsetx + printingFormatV * j, offsety + printingFormatH * i, printingFormatV, printingFormatH);
                }
            }
        }


        context.strokeStyle = "rgb(10, 10, 10)";
        context.stroke();

    }

    var zoomGlo = 2;



    function drawPrintingFormat(context, printingFormatV, printingFormatH, offsety, offsetx, zoom, sideOnside, gainOnSide1, gainOnSide2) {


        printingFormatH.replace(/[\.,]/g, function (m) { return m == '.' ? ',' : '.' });
        printingFormatV.replace(/[\.,]/g, function (m) { return m == '.' ? ',' : '.' });

        printingFormatH *= zoom;
        printingFormatV *= zoom;

        var passo = 10 * zoom;

        context.beginPath();

        context.strokeStyle = "#eee";
        context.stroke();

        context.beginPath();
        if (sideOnside == 'True') {

            for (var j = 0; j < gainOnSide1; j++) {
                for (var i = 0; i < gainOnSide2; i++) {
                    context.rect(offsetx + printingFormatH * i, offsety + printingFormatV * j, printingFormatH, printingFormatV);
                }
            }
        }
        else {
            for (var j = 0; j < gainOnSide2; j++) {
                for (var i = 0; i < gainOnSide1; i++) {
                    context.rect(offsetx + printingFormatV * j, offsety + printingFormatH * i, printingFormatV, printingFormatH);
                }
            }
        }


        context.strokeStyle = "rgb(10, 10, 10)";
        context.stroke();

    }


    function reloadFormat() {

        var side1 = '@Model.BuyingFormat.GetSide1()';
        var side2 = '@Model.BuyingFormat.GetSide2()';

        var c_canvas = document.getElementById("buyingSheet");
        var context = c_canvas.getContext("2d");

        side1 = side1.replace(/[\.,]/g, function (m) { return m == '.' ? ',' : '.' });
        side2 = side2.replace(/[\.,]/g, function (m) { return m == '.' ? ',' : '.' });

        zoomGlo = 5;
        var zoom = 2;
        zoom = zoomGlo;

        //alert(zoom);

        var offsetX = 0;
        var offsetY = 0;

        drawBuiyngFormat(context, side1, side2, offsetX, offsetY, zoom, 0);

//        drawPrintingAndSheet();
//        drawPrintingFormat(context, side1pr, side2pr, offsetX, offsetY, zoom, sideOnSide, gain1, gain2);


        save();

    }

</script>

<script type="text/javascript">

    //this event is fired only the first time
    $(document).ready(function () {
        reloadFormat(); //draw buying and printing
     //   initAndPosition();
    });


</script>




<script type="text/javascript">

    //this event is fired only the first time
    $(document).ready(function () {
        //        drawPrintingAndSheet(); //draw printing and work
    });

    function drawPrintingAndSheet() {

        var side1 = '@Model.PrintingFormat.GetSide1()';
        var side2 = '@Model.PrintingFormat.GetSide2()';

        side1 = side1.replace(/[\.,]/g, function (m) { return m == '.' ? ',' : '.' });
        side2 = side2.replace(/[\.,]/g, function (m) { return m == '.' ? ',' : '.' });

        var c_canvas = document.getElementById("printingSingleSheet");
        var context = c_canvas.getContext("2d");

        var zoom = 2.5;
        zoom = zoomGlo;

        var offsetX = 0;
        var offsetY = 0;

        var bv = '@g.TypeOfPerfecting';
        var maxG = '@g.PrintedShapes';

        drawSheet(context, side1, side2, offsetX, offsetY, zoom, 0, bv);


        var side1pr = '@Model.ProductPartPrinting.Part.FormatOpened.GetSide1()';
        var side2pr = '@Model.ProductPartPrinting.Part.FormatOpened.GetSide2()';

        side1pr = side1pr.replace(/[\.,]/g, function (m) { return m == '.' ? ',' : '.' });
        side2pr = side2pr.replace(/[\.,]/g, function (m) { return m == '.' ? ',' : '.' });

        var sideOnSide = '@g.SideOnSide';

        var gain1 = parseInt('@g.ShapeOnSide1');
        var gain2 = parseInt('@g.ShapeOnSide2');

        var dCut = '@dCut'.replace(/[\.,]/g, function (m) { return m == '.' ? ',' : '.' });
        var dCut1 = '@dCut1'.replace(/[\.,]/g, function (m) { return m == '.' ? ',' : '.' });
        var dCut2 = '@dCut2'.replace(/[\.,]/g, function (m) { return m == '.' ? ',' : '.' });

        drawPrinting(context, side1pr, side2pr, side1, side2, offsetX, offsetY, zoom, sideOnSide, gain1, gain2, maxG, dCut1, dCut2);

    }

</script>

@Html.Partial("_CommonScriptDraw")
