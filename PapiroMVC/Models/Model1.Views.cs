//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: System.Data.Mapping.EntityViewGenerationAttribute(typeof(Edm_EntityMappingGeneratedViews.ViewsForBaseEntitySetsF0A4E6BB09FAF47FAA34D9024F9F9360F2CA8E4FCE0CC317214E8693062130F3))]

namespace Edm_EntityMappingGeneratedViews
{
    
    
    /// <Summary>
    /// The type contains views for EntitySets and AssociationSets that were generated at design time.
    /// </Summary>
    public sealed class ViewsForBaseEntitySetsF0A4E6BB09FAF47FAA34D9024F9F9360F2CA8E4FCE0CC317214E8693062130F3 : System.Data.Mapping.EntityViewContainer
    {
        
        /// <Summary>
        /// The constructor stores the views for the extents and also the hash values generated based on the metadata and mapping closure and views.
        /// </Summary>
        public ViewsForBaseEntitySetsF0A4E6BB09FAF47FAA34D9024F9F9360F2CA8E4FCE0CC317214E8693062130F3()
        {
            this.EdmEntityContainerName = "dbEntities";
            this.StoreEntityContainerName = "dbModelStoreContainer";
            this.HashOverMappingClosure = "ceb284dbf4c388e8961712385dc6c00c610ebfbb43e13bf5705aca89c81baf13";
            this.HashOverAllExtentViews = "09b6af375d626b63a52ed69af8a2294931107bfd5ac3b9af73ba84bf4089ebd6";
            this.ViewCount = 42;
        }
        
        /// <Summary>
        /// The method returns the view for the index given.
        /// </Summary>
        protected override System.Collections.Generic.KeyValuePair<string, string> GetViewAt(int index)
        {
            if ((index == 0))
            {
                return GetView0();
            }
            if ((index == 1))
            {
                return GetView1();
            }
            if ((index == 2))
            {
                return GetView2();
            }
            if ((index == 3))
            {
                return GetView3();
            }
            if ((index == 4))
            {
                return GetView4();
            }
            if ((index == 5))
            {
                return GetView5();
            }
            if ((index == 6))
            {
                return GetView6();
            }
            if ((index == 7))
            {
                return GetView7();
            }
            if ((index == 8))
            {
                return GetView8();
            }
            if ((index == 9))
            {
                return GetView9();
            }
            if ((index == 10))
            {
                return GetView10();
            }
            if ((index == 11))
            {
                return GetView11();
            }
            if ((index == 12))
            {
                return GetView12();
            }
            if ((index == 13))
            {
                return GetView13();
            }
            if ((index == 14))
            {
                return GetView14();
            }
            if ((index == 15))
            {
                return GetView15();
            }
            if ((index == 16))
            {
                return GetView16();
            }
            if ((index == 17))
            {
                return GetView17();
            }
            if ((index == 18))
            {
                return GetView18();
            }
            if ((index == 19))
            {
                return GetView19();
            }
            if ((index == 20))
            {
                return GetView20();
            }
            if ((index == 21))
            {
                return GetView21();
            }
            if ((index == 22))
            {
                return GetView22();
            }
            if ((index == 23))
            {
                return GetView23();
            }
            if ((index == 24))
            {
                return GetView24();
            }
            if ((index == 25))
            {
                return GetView25();
            }
            if ((index == 26))
            {
                return GetView26();
            }
            if ((index == 27))
            {
                return GetView27();
            }
            if ((index == 28))
            {
                return GetView28();
            }
            if ((index == 29))
            {
                return GetView29();
            }
            if ((index == 30))
            {
                return GetView30();
            }
            if ((index == 31))
            {
                return GetView31();
            }
            if ((index == 32))
            {
                return GetView32();
            }
            if ((index == 33))
            {
                return GetView33();
            }
            if ((index == 34))
            {
                return GetView34();
            }
            if ((index == 35))
            {
                return GetView35();
            }
            if ((index == 36))
            {
                return GetView36();
            }
            if ((index == 37))
            {
                return GetView37();
            }
            if ((index == 38))
            {
                return GetView38();
            }
            if ((index == 39))
            {
                return GetView39();
            }
            if ((index == 40))
            {
                return GetView40();
            }
            if ((index == 41))
            {
                return GetView41();
            }
            throw new System.IndexOutOfRangeException();
        }
        
        /// <Summary>
        /// return view for dbModelStoreContainer.taskexecutors
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView0()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(23188);
            viewString.Append("\r\n    SELECT VALUE -- Constructing taskexecutors\r\n        [dbModel.Store.taskexe");
            viewString.Append("cutors](T13.taskexecutors_TimeStampTable, T13.taskexecutors_CodTaskExecutor, T13");
            viewString.Append(".taskexecutors_TaskExecutorName, T13.taskexecutors_Version, T13.taskexecutors_Di");
            viewString.Append("smissed, T13.taskexecutors_FormatMin, T13.taskexecutors_FormatMax, T13.taskexecu");
            viewString.Append("tors_WeightMin, T13.taskexecutors_WeightMax, T13.taskexecutors_Pinza, T13.taskex");
            viewString.Append("ecutors_ControPinza, T13.taskexecutors_Laterale, T13.taskexecutors_InkUsage, T13");
            viewString.Append(".taskexecutors_InkUsageForfait, T13.taskexecutors_PrintingUnit, T13.taskexecutor");
            viewString.Append("s_SheetwiseAfterPrintingUnit, T13.taskexecutors_Sheetwise, T13.taskexecutors_Was");
            viewString.Append("hUpTime, T13.taskexecutors_ChangePlateTime, T13.taskexecutors_SelectorLithoDigit");
            viewString.Append("al, T13.taskexecutors_SelectorBindingPrePostPress, T13.taskexecutors_Selector, T");
            viewString.Append("13.taskexecutors_SelectorExecutor, T13.taskexecutors_ProofSheetFirstStart, T13.t");
            viewString.Append("askexecutors_ProofSheetSecondsStart, T13.taskexecutors_ProductionWaste, T13.task");
            viewString.Append("executors_PaperFirstStartLenght, T13.taskexecutors_BWSide1, T13.taskexecutors_BW");
            viewString.Append("Side2, T13.taskexecutors_ColorSide1, T13.taskexecutors_ColorSide2, T13.taskexecu");
            viewString.Append("tors_Width, T13.taskexecutors_IsUnitComputationManual, T13.taskexecutors_IsEstim");
            viewString.Append("atedOnTime, T13.taskexecutors_IsEstimatedOnRun, T13.taskexecutors_IsEstimatedOnM");
            viewString.Append("q, T13.taskexecutors_CodTask, T13.taskexecutors_IsEstimatedOnTimeBinding, T13.ta");
            viewString.Append("skexecutors_IsEstimatedOnRunBinding, T13.taskexecutors_CodTypeOfTask)\r\n    FROM ");
            viewString.Append("(\r\n        SELECT -- Constructing SelectorLithoDigital\r\n            T12.taskexec");
            viewString.Append("utors_TimeStampTable, \r\n            T12.taskexecutors_CodTaskExecutor, \r\n       ");
            viewString.Append("     T12.taskexecutors_TaskExecutorName, \r\n            T12.taskexecutors_Version");
            viewString.Append(", \r\n            T12.taskexecutors_Dismissed, \r\n            T12.taskexecutors_For");
            viewString.Append("matMin, \r\n            T12.taskexecutors_FormatMax, \r\n            T12.taskexecuto");
            viewString.Append("rs_WeightMin, \r\n            T12.taskexecutors_WeightMax, \r\n            T12.taske");
            viewString.Append("xecutors_Pinza, \r\n            T12.taskexecutors_ControPinza, \r\n            T12.t");
            viewString.Append("askexecutors_Laterale, \r\n            T12.taskexecutors_InkUsage, \r\n            T");
            viewString.Append("12.taskexecutors_InkUsageForfait, \r\n            T12.taskexecutors_PrintingUnit, ");
            viewString.Append("\r\n            T12.taskexecutors_SheetwiseAfterPrintingUnit, \r\n            T12.ta");
            viewString.Append("skexecutors_Sheetwise, \r\n            T12.taskexecutors_WashUpTime, \r\n           ");
            viewString.Append(" T12.taskexecutors_ChangePlateTime, \r\n            CASE\r\n                WHEN T12");
            viewString.Append("._from1 THEN CAST(\'0\' AS [Edm.Int32])\r\n                WHEN T12._from2 THEN CAST");
            viewString.Append("(\'1\' AS [Edm.Int32])\r\n            END AS taskexecutors_SelectorLithoDigital, \r\n ");
            viewString.Append("           T12.taskexecutors_SelectorBindingPrePostPress, \r\n            T12.task");
            viewString.Append("executors_Selector, \r\n            T12.taskexecutors_SelectorExecutor, \r\n        ");
            viewString.Append("    T12.taskexecutors_ProofSheetFirstStart, \r\n            T12.taskexecutors_Proo");
            viewString.Append("fSheetSecondsStart, \r\n            T12.taskexecutors_ProductionWaste, \r\n         ");
            viewString.Append("   T12.taskexecutors_PaperFirstStartLenght, \r\n            T12.taskexecutors_BWSi");
            viewString.Append("de1, \r\n            T12.taskexecutors_BWSide2, \r\n            T12.taskexecutors_Co");
            viewString.Append("lorSide1, \r\n            T12.taskexecutors_ColorSide2, \r\n            T12.taskexec");
            viewString.Append("utors_Width, \r\n            T12.taskexecutors_IsUnitComputationManual, \r\n        ");
            viewString.Append("    T12.taskexecutors_IsEstimatedOnTime, \r\n            T12.taskexecutors_IsEstim");
            viewString.Append("atedOnRun, \r\n            T12.taskexecutors_IsEstimatedOnMq, \r\n            T12.ta");
            viewString.Append("skexecutors_CodTask, \r\n            T12.taskexecutors_IsEstimatedOnTimeBinding, \r");
            viewString.Append("\n            T12.taskexecutors_IsEstimatedOnRunBinding, \r\n            T12.taskex");
            viewString.Append("ecutors_CodTypeOfTask\r\n        FROM (\r\n            SELECT -- Constructing Select");
            viewString.Append("orBindingPrePostPress\r\n                T11.taskexecutors_TimeStampTable, \r\n     ");
            viewString.Append("           T11.taskexecutors_CodTaskExecutor, \r\n                T11.taskexecutor");
            viewString.Append("s_TaskExecutorName, \r\n                T11.taskexecutors_Version, \r\n             ");
            viewString.Append("   T11.taskexecutors_Dismissed, \r\n                T11.taskexecutors_FormatMin, \r");
            viewString.Append("\n                T11.taskexecutors_FormatMax, \r\n                T11.taskexecutor");
            viewString.Append("s_WeightMin, \r\n                T11.taskexecutors_WeightMax, \r\n                T1");
            viewString.Append("1.taskexecutors_Pinza, \r\n                T11.taskexecutors_ControPinza, \r\n      ");
            viewString.Append("          T11.taskexecutors_Laterale, \r\n                T11.taskexecutors_InkUsa");
            viewString.Append("ge, \r\n                T11.taskexecutors_InkUsageForfait, \r\n                T11.t");
            viewString.Append("askexecutors_PrintingUnit, \r\n                T11.taskexecutors_SheetwiseAfterPri");
            viewString.Append("ntingUnit, \r\n                T11.taskexecutors_Sheetwise, \r\n                T11.");
            viewString.Append("taskexecutors_WashUpTime, \r\n                T11.taskexecutors_ChangePlateTime, \r");
            viewString.Append("\n                CASE\r\n                    WHEN T11._from10 THEN CAST(\'0\' AS [Ed");
            viewString.Append("m.Int32])\r\n                END AS taskexecutors_SelectorBindingPrePostPress, \r\n ");
            viewString.Append("               T11.taskexecutors_Selector, \r\n                T11.taskexecutors_S");
            viewString.Append("electorExecutor, \r\n                T11.taskexecutors_ProofSheetFirstStart, \r\n   ");
            viewString.Append("             T11.taskexecutors_ProofSheetSecondsStart, \r\n                T11.tas");
            viewString.Append("kexecutors_ProductionWaste, \r\n                T11.taskexecutors_PaperFirstStartL");
            viewString.Append("enght, \r\n                T11.taskexecutors_BWSide1, \r\n                T11.taskex");
            viewString.Append("ecutors_BWSide2, \r\n                T11.taskexecutors_ColorSide1, \r\n             ");
            viewString.Append("   T11.taskexecutors_ColorSide2, \r\n                T11.taskexecutors_Width, \r\n  ");
            viewString.Append("              T11.taskexecutors_IsUnitComputationManual, \r\n                T11.t");
            viewString.Append("askexecutors_IsEstimatedOnTime, \r\n                T11.taskexecutors_IsEstimatedO");
            viewString.Append("nRun, \r\n                T11.taskexecutors_IsEstimatedOnMq, \r\n                T11");
            viewString.Append(".taskexecutors_CodTask, \r\n                T11.taskexecutors_IsEstimatedOnTimeBin");
            viewString.Append("ding, \r\n                T11.taskexecutors_IsEstimatedOnRunBinding, \r\n           ");
            viewString.Append("     T11.taskexecutors_CodTypeOfTask, \r\n                T11._from1, \r\n          ");
            viewString.Append("      T11._from2\r\n            FROM (\r\n                SELECT -- Constructing Sel");
            viewString.Append("ector\r\n                    T10.taskexecutors_TimeStampTable, \r\n                 ");
            viewString.Append("   T10.taskexecutors_CodTaskExecutor, \r\n                    T10.taskexecutors_Ta");
            viewString.Append("skExecutorName, \r\n                    T10.taskexecutors_Version, \r\n             ");
            viewString.Append("       T10.taskexecutors_Dismissed, \r\n                    T10.taskexecutors_Form");
            viewString.Append("atMin, \r\n                    T10.taskexecutors_FormatMax, \r\n                    ");
            viewString.Append("T10.taskexecutors_WeightMin, \r\n                    T10.taskexecutors_WeightMax, ");
            viewString.Append("\r\n                    T10.taskexecutors_Pinza, \r\n                    T10.taskexe");
            viewString.Append("cutors_ControPinza, \r\n                    T10.taskexecutors_Laterale, \r\n        ");
            viewString.Append("            T10.taskexecutors_InkUsage, \r\n                    T10.taskexecutors_");
            viewString.Append("InkUsageForfait, \r\n                    T10.taskexecutors_PrintingUnit, \r\n       ");
            viewString.Append("             T10.taskexecutors_SheetwiseAfterPrintingUnit, \r\n                   ");
            viewString.Append(" T10.taskexecutors_Sheetwise, \r\n                    T10.taskexecutors_WashUpTime");
            viewString.Append(", \r\n                    T10.taskexecutors_ChangePlateTime, \r\n                   ");
            viewString.Append(" CASE\r\n                        WHEN T10._from3 THEN CAST(\'0\' AS [Edm.Int32])\r\n  ");
            viewString.Append("                      WHEN T10._from6 THEN CAST(\'1\' AS [Edm.Int32])\r\n           ");
            viewString.Append("             WHEN T10._from4 THEN CAST(\'2\' AS [Edm.Int32])\r\n                    ");
            viewString.Append("    WHEN T10._from7 THEN CAST(\'3\' AS [Edm.Int32])\r\n                        WHEN ");
            viewString.Append("T10._from8 THEN CAST(\'4\' AS [Edm.Int32])\r\n                    END AS taskexecuto");
            viewString.Append("rs_Selector, \r\n                    T10.taskexecutors_SelectorExecutor, \r\n       ");
            viewString.Append("             T10.taskexecutors_ProofSheetFirstStart, \r\n                    T10.t");
            viewString.Append("askexecutors_ProofSheetSecondsStart, \r\n                    T10.taskexecutors_Pro");
            viewString.Append("ductionWaste, \r\n                    T10.taskexecutors_PaperFirstStartLenght, \r\n ");
            viewString.Append("                   T10.taskexecutors_BWSide1, \r\n                    T10.taskexec");
            viewString.Append("utors_BWSide2, \r\n                    T10.taskexecutors_ColorSide1, \r\n           ");
            viewString.Append("         T10.taskexecutors_ColorSide2, \r\n                    T10.taskexecutors_W");
            viewString.Append("idth, \r\n                    T10.taskexecutors_IsUnitComputationManual, \r\n       ");
            viewString.Append("             T10.taskexecutors_IsEstimatedOnTime, \r\n                    T10.task");
            viewString.Append("executors_IsEstimatedOnRun, \r\n                    T10.taskexecutors_IsEstimatedO");
            viewString.Append("nMq, \r\n                    T10.taskexecutors_CodTask, \r\n                    T10.");
            viewString.Append("taskexecutors_IsEstimatedOnTimeBinding, \r\n                    T10.taskexecutors_");
            viewString.Append("IsEstimatedOnRunBinding, \r\n                    T10.taskexecutors_CodTypeOfTask, ");
            viewString.Append("\r\n                    T10._from1, \r\n                    T10._from2, \r\n          ");
            viewString.Append("          T10._from10\r\n                FROM (\r\n                    SELECT -- Con");
            viewString.Append("structing SelectorExecutor\r\n                        T9.taskexecutors_TimeStampTa");
            viewString.Append("ble, \r\n                        T9.taskexecutors_CodTaskExecutor, \r\n             ");
            viewString.Append("           T9.taskexecutors_TaskExecutorName, \r\n                        T9.taske");
            viewString.Append("xecutors_Version, \r\n                        T9.taskexecutors_Dismissed, \r\n      ");
            viewString.Append("                  T9.taskexecutors_FormatMin, \r\n                        T9.taske");
            viewString.Append("xecutors_FormatMax, \r\n                        T9.taskexecutors_WeightMin, \r\n    ");
            viewString.Append("                    T9.taskexecutors_WeightMax, \r\n                        T9.tas");
            viewString.Append("kexecutors_Pinza, \r\n                        T9.taskexecutors_ControPinza, \r\n    ");
            viewString.Append("                    T9.taskexecutors_Laterale, \r\n                        T9.task");
            viewString.Append("executors_InkUsage, \r\n                        T9.taskexecutors_InkUsageForfait, ");
            viewString.Append("\r\n                        T9.taskexecutors_PrintingUnit, \r\n                     ");
            viewString.Append("   T9.taskexecutors_SheetwiseAfterPrintingUnit, \r\n                        T9.tas");
            viewString.Append("kexecutors_Sheetwise, \r\n                        T9.taskexecutors_WashUpTime, \r\n ");
            viewString.Append("                       T9.taskexecutors_ChangePlateTime, \r\n                     ");
            viewString.Append("   CASE\r\n                            WHEN T9._from5 THEN CAST(\'0\' AS [Edm.Int32]");
            viewString.Append(")\r\n                            ELSE CAST(\'1\' AS [Edm.Int32])\r\n                  ");
            viewString.Append("      END AS taskexecutors_SelectorExecutor, \r\n                        T9.taskex");
            viewString.Append("ecutors_ProofSheetFirstStart, \r\n                        T9.taskexecutors_ProofSh");
            viewString.Append("eetSecondsStart, \r\n                        T9.taskexecutors_ProductionWaste, \r\n ");
            viewString.Append("                       T9.taskexecutors_PaperFirstStartLenght, \r\n               ");
            viewString.Append("         T9.taskexecutors_BWSide1, \r\n                        T9.taskexecutors_BW");
            viewString.Append("Side2, \r\n                        T9.taskexecutors_ColorSide1, \r\n                ");
            viewString.Append("        T9.taskexecutors_ColorSide2, \r\n                        T9.taskexecutors_");
            viewString.Append("Width, \r\n                        T9.taskexecutors_IsUnitComputationManual, \r\n   ");
            viewString.Append("                     T9.taskexecutors_IsEstimatedOnTime, \r\n                     ");
            viewString.Append("   T9.taskexecutors_IsEstimatedOnRun, \r\n                        T9.taskexecutors");
            viewString.Append("_IsEstimatedOnMq, \r\n                        T9.taskexecutors_CodTask, \r\n        ");
            viewString.Append("                T9.taskexecutors_IsEstimatedOnTimeBinding, \r\n                   ");
            viewString.Append("     T9.taskexecutors_IsEstimatedOnRunBinding, \r\n                        T9.task");
            viewString.Append("executors_CodTypeOfTask, \r\n                        T9._from1, \r\n                ");
            viewString.Append("        T9._from2, \r\n                        T9._from3, \r\n                      ");
            viewString.Append("  T9._from4, \r\n                        T9._from6, \r\n                        T9._");
            viewString.Append("from7, \r\n                        T9._from8, \r\n                        T9._from10");
            viewString.Append("\r\n                    FROM (\r\n                        SELECT T6.taskexecutors_Ti");
            viewString.Append("meStampTable, T6.taskexecutors_CodTaskExecutor, T6.taskexecutors_TaskExecutorNam");
            viewString.Append("e, T6.taskexecutors_Version, T6.taskexecutors_Dismissed, T6.taskexecutors_Format");
            viewString.Append("Min, T6.taskexecutors_FormatMax, T6.taskexecutors_WeightMin, T6.taskexecutors_We");
            viewString.Append("ightMax, T6.taskexecutors_Pinza, T6.taskexecutors_ControPinza, T6.taskexecutors_");
            viewString.Append("Laterale, T8.taskexecutors_InkUsage, T8.taskexecutors_InkUsageForfait, T7.taskex");
            viewString.Append("ecutors_PrintingUnit, T7.taskexecutors_SheetwiseAfterPrintingUnit, T7.taskexecut");
            viewString.Append("ors_Sheetwise, T7.taskexecutors_WashUpTime, T7.taskexecutors_ChangePlateTime, T6");
            viewString.Append(".taskexecutors_ProofSheetFirstStart, T6.taskexecutors_ProofSheetSecondsStart, T6");
            viewString.Append(".taskexecutors_ProductionWaste, T6.taskexecutors_PaperFirstStartLenght, T7.taske");
            viewString.Append("xecutors_BWSide1, T7.taskexecutors_BWSide2, T7.taskexecutors_ColorSide1, T7.task");
            viewString.Append("executors_ColorSide2, T6.taskexecutors_Width, T6.taskexecutors_IsUnitComputation");
            viewString.Append("Manual, T6.taskexecutors_IsEstimatedOnTime, T6.taskexecutors_IsEstimatedOnRun, T");
            viewString.Append("6.taskexecutors_IsEstimatedOnMq, CAST(NULL AS [Edm.String]) AS taskexecutors_Cod");
            viewString.Append("Task, T6.taskexecutors_IsEstimatedOnTimeBinding, T6.taskexecutors_IsEstimatedOnR");
            viewString.Append("unBinding, T6.taskexecutors_CodTypeOfTask, T6._from0, (T7._from1 AND T7._from1 I");
            viewString.Append("S NOT NULL) AS _from1, (T7._from2 AND T7._from2 IS NOT NULL) AS _from2, T6._from");
            viewString.Append("3, T6._from4, (T8._from5 AND T8._from5 IS NOT NULL) AS _from5, T6._from6, T6._fr");
            viewString.Append("om7, T6._from8, T6._from9, (T7._from10 AND T7._from10 IS NOT NULL) AS _from10\r\n ");
            viewString.Append("                       FROM  (\r\n                            SELECT T5.taskexecut");
            viewString.Append("ors_TimeStampTable, T4.taskexecutors_CodTaskExecutor, T5.taskexecutors_TaskExecu");
            viewString.Append("torName, T5.taskexecutors_Version, T5.taskexecutors_Dismissed, T5.taskexecutors_");
            viewString.Append("FormatMin, T5.taskexecutors_FormatMax, T5.taskexecutors_WeightMin, T5.taskexecut");
            viewString.Append("ors_WeightMax, T5.taskexecutors_Pinza, T5.taskexecutors_ControPinza, T5.taskexec");
            viewString.Append("utors_Laterale, T4.taskexecutors_ProofSheetFirstStart, T4.taskexecutors_ProofShe");
            viewString.Append("etSecondsStart, T4.taskexecutors_ProductionWaste, T4.taskexecutors_PaperFirstSta");
            viewString.Append("rtLenght, T4.taskexecutors_Width, T4.taskexecutors_IsUnitComputationManual, T5.t");
            viewString.Append("askexecutors_IsEstimatedOnTime, T5.taskexecutors_IsEstimatedOnRun, T5.taskexecut");
            viewString.Append("ors_IsEstimatedOnMq, T5.taskexecutors_IsEstimatedOnTimeBinding, T5.taskexecutors");
            viewString.Append("_IsEstimatedOnRunBinding, T5.taskexecutors_CodTypeOfTask, T5._from0, T4._from3, ");
            viewString.Append("T4._from4, T4._from6, T4._from7, T4._from8, T4._from9\r\n                         ");
            viewString.Append("   FROM  ( (\r\n                                    SELECT \r\n                     ");
            viewString.Append("                   T.CodTaskExecutor AS taskexecutors_CodTaskExecutor, \r\n       ");
            viewString.Append("                                 TREAT(T AS [dbModel.DigitalSheet]).ProofSheetFi");
            viewString.Append("rstStart AS taskexecutors_ProofSheetFirstStart, \r\n                              ");
            viewString.Append("          TREAT(T AS [dbModel.DigitalSheet]).ProofSheetSecondsStart AS taskexecu");
            viewString.Append("tors_ProofSheetSecondsStart, \r\n                                        TREAT(T A");
            viewString.Append("S [dbModel.DigitalSheet]).ProductionWaste AS taskexecutors_ProductionWaste, \r\n  ");
            viewString.Append("                                      CAST(NULL AS [Edm.Int64]) AS taskexecutors");
            viewString.Append("_PaperFirstStartLenght, \r\n                                        CAST(NULL AS [");
            viewString.Append("Edm.Int64]) AS taskexecutors_Width, \r\n                                        CA");
            viewString.Append("ST(NULL AS [Edm.Boolean]) AS taskexecutors_IsUnitComputationManual, \r\n          ");
            viewString.Append("                              False AS _from3, \r\n                               ");
            viewString.Append("         True AS _from4, \r\n                                        False AS _fro");
            viewString.Append("m6, \r\n                                        False AS _from7, \r\n               ");
            viewString.Append("                         False AS _from8, \r\n                                    ");
            viewString.Append("    False AS _from9\r\n                                    FROM dbEntities.taskexe");
            viewString.Append("cutors AS T\r\n                                    WHERE T IS OF (ONLY [dbModel.Di");
            viewString.Append("gitalSheet]))\r\n                                    UNION ALL (\r\n                ");
            viewString.Append("                    SELECT \r\n                                        T.CodTaskEx");
            viewString.Append("ecutor AS taskexecutors_CodTaskExecutor, \r\n                                     ");
            viewString.Append("   TREAT(T AS [dbModel.LithoSheet]).ProofSheetFirstStart AS taskexecutors_ProofS");
            viewString.Append("heetFirstStart, \r\n                                        TREAT(T AS [dbModel.Li");
            viewString.Append("thoSheet]).ProofSheetSecondsStart AS taskexecutors_ProofSheetSecondsStart, \r\n   ");
            viewString.Append("                                     TREAT(T AS [dbModel.LithoSheet]).Production");
            viewString.Append("Waste AS taskexecutors_ProductionWaste, \r\n                                      ");
            viewString.Append("  TREAT(T AS [dbModel.LithoWeb]).PaperFirstStartLenght AS taskexecutors_PaperFir");
            viewString.Append("stStartLenght, \r\n                                        CAST(NULL AS [Edm.Int64");
            viewString.Append("]) AS taskexecutors_Width, \r\n                                        TREAT(T AS ");
            viewString.Append("[dbModel.PrePostPress]).IsUnitComputationManual AS taskexecutors_IsUnitComputati");
            viewString.Append("onManual, \r\n                                        CASE WHEN T IS OF (ONLY [dbM");
            viewString.Append("odel.LithoSheet]) THEN True ELSE False END AS _from3, \r\n                        ");
            viewString.Append("                False AS _from4, \r\n                                        CASE ");
            viewString.Append("WHEN T IS OF (ONLY [dbModel.LithoWeb]) THEN True ELSE False END AS _from6, \r\n   ");
            viewString.Append("                                     False AS _from7, \r\n                        ");
            viewString.Append("                False AS _from8, \r\n                                        CASE ");
            viewString.Append("WHEN (T IS OF (ONLY [dbModel.PrePostPress]) OR T IS OF (ONLY [dbModel.BindingTsk");
            viewString.Append("])) THEN True ELSE False END AS _from9\r\n                                    FROM");
            viewString.Append(" dbEntities.taskexecutors AS T\r\n                                    WHERE (T IS ");
            viewString.Append("OF (ONLY [dbModel.LithoSheet]) OR T IS OF (ONLY [dbModel.LithoWeb]) OR T IS OF (");
            viewString.Append("ONLY [dbModel.PrePostPress]) OR T IS OF (ONLY [dbModel.BindingTsk])))\r\n         ");
            viewString.Append("                           UNION ALL (\r\n                                    SELE");
            viewString.Append("CT \r\n                                        T.CodTaskExecutor AS taskexecutors_");
            viewString.Append("CodTaskExecutor, \r\n                                        CAST(NULL AS [Edm.Int");
            viewString.Append("64]) AS taskexecutors_ProofSheetFirstStart, \r\n                                  ");
            viewString.Append("      CAST(NULL AS [Edm.Int64]) AS taskexecutors_ProofSheetSecondsStart, \r\n     ");
            viewString.Append("                                   CAST(NULL AS [Edm.Double]) AS taskexecutors_P");
            viewString.Append("roductionWaste, \r\n                                        TREAT(T AS [dbModel.Di");
            viewString.Append("gitalWeb]).PaperFirstStartLenght AS taskexecutors_PaperFirstStartLenght, \r\n     ");
            viewString.Append("                                   TREAT(T AS [dbModel.Plotter]).Width AS taskex");
            viewString.Append("ecutors_Width, \r\n                                        CAST(NULL AS [Edm.Boole");
            viewString.Append("an]) AS taskexecutors_IsUnitComputationManual, \r\n                               ");
            viewString.Append("         False AS _from3, \r\n                                        False AS _fr");
            viewString.Append("om4, \r\n                                        False AS _from6, \r\n              ");
            viewString.Append("                          CASE WHEN T IS OF (ONLY [dbModel.DigitalWeb]) THEN Tru");
            viewString.Append("e ELSE False END AS _from7, \r\n                                        CASE WHEN ");
            viewString.Append("T IS OF (ONLY [dbModel.Plotter]) THEN True ELSE False END AS _from8, \r\n         ");
            viewString.Append("                               False AS _from9\r\n                                ");
            viewString.Append("    FROM dbEntities.taskexecutors AS T\r\n                                    WHER");
            viewString.Append("E (T IS OF (ONLY [dbModel.DigitalWeb]) OR T IS OF (ONLY [dbModel.Plotter])))) AS");
            viewString.Append(" T4\r\n                                INNER JOIN (\r\n                             ");
            viewString.Append("   SELECT \r\n                                    T.TimeStampTable AS taskexecutor");
            viewString.Append("s_TimeStampTable, \r\n                                    T.CodTaskExecutor AS tas");
            viewString.Append("kexecutors_CodTaskExecutor, \r\n                                    T.TaskExecutor");
            viewString.Append("Name AS taskexecutors_TaskExecutorName, \r\n                                    T.");
            viewString.Append("Version AS taskexecutors_Version, \r\n                                    T.Dismis");
            viewString.Append("sed AS taskexecutors_Dismissed, \r\n                                    T.FormatMi");
            viewString.Append("n AS taskexecutors_FormatMin, \r\n                                    T.FormatMax ");
            viewString.Append("AS taskexecutors_FormatMax, \r\n                                    T.WeightMin AS");
            viewString.Append(" taskexecutors_WeightMin, \r\n                                    T.WeightMax AS t");
            viewString.Append("askexecutors_WeightMax, \r\n                                    T.Pinza AS taskexe");
            viewString.Append("cutors_Pinza, \r\n                                    T.ControPinza AS taskexecuto");
            viewString.Append("rs_ControPinza, \r\n                                    T.Laterale AS taskexecutor");
            viewString.Append("s_Laterale, \r\n                                    T.IsEstimatedOnTime AS taskexe");
            viewString.Append("cutors_IsEstimatedOnTime, \r\n                                    T.IsEstimatedOnR");
            viewString.Append("un AS taskexecutors_IsEstimatedOnRun, \r\n                                    T.Is");
            viewString.Append("EstimatedOnMq AS taskexecutors_IsEstimatedOnMq, \r\n                              ");
            viewString.Append("      T.IsEstimatedOnTimeBinding AS taskexecutors_IsEstimatedOnTimeBinding, \r\n  ");
            viewString.Append("                                  T.IsEstimatedOnRunBinding AS taskexecutors_IsE");
            viewString.Append("stimatedOnRunBinding, \r\n                                    T.CodTypeOfTask AS t");
            viewString.Append("askexecutors_CodTypeOfTask, \r\n                                    True AS _from0");
            viewString.Append("\r\n                                FROM dbEntities.taskexecutors AS T) AS T5\r\n   ");
            viewString.Append("                             ON T4.taskexecutors_CodTaskExecutor = T5.taskexecut");
            viewString.Append("ors_CodTaskExecutor) AS T6\r\n                            LEFT OUTER JOIN (\r\n     ");
            viewString.Append("                       SELECT \r\n                                T.CodTaskExecuto");
            viewString.Append("r AS taskexecutors_CodTaskExecutor, \r\n                                CAST(TREAT");
            viewString.Append("(T AS [dbModel.Litho]).PrintingUnit AS [Edm.Int64]) AS taskexecutors_PrintingUni");
            viewString.Append("t, \r\n                                TREAT(T AS [dbModel.Litho]).SheetwiseAfterP");
            viewString.Append("rintingUnit AS taskexecutors_SheetwiseAfterPrintingUnit, \r\n                     ");
            viewString.Append("           TREAT(T AS [dbModel.Litho]).Sheetwise AS taskexecutors_Sheetwise, \r\n ");
            viewString.Append("                               TREAT(T AS [dbModel.Litho]).WashUpTime AS taskexe");
            viewString.Append("cutors_WashUpTime, \r\n                                TREAT(T AS [dbModel.Litho])");
            viewString.Append(".ChangePlateTime AS taskexecutors_ChangePlateTime, \r\n                           ");
            viewString.Append("     TREAT(T AS [dbModel.Digital]).BWSide1 AS taskexecutors_BWSide1, \r\n         ");
            viewString.Append("                       TREAT(T AS [dbModel.Digital]).BWSide2 AS taskexecutors_BW");
            viewString.Append("Side2, \r\n                                TREAT(T AS [dbModel.Digital]).ColorSide");
            viewString.Append("1 AS taskexecutors_ColorSide1, \r\n                                TREAT(T AS [dbM");
            viewString.Append("odel.Digital]).ColorSide2 AS taskexecutors_ColorSide2, \r\n                       ");
            viewString.Append("         CASE WHEN (T IS OF (ONLY [dbModel.LithoSheet]) OR T IS OF (ONLY [dbMode");
            viewString.Append("l.LithoWeb])) THEN True ELSE False END AS _from1, \r\n                            ");
            viewString.Append("    CASE WHEN (T IS OF (ONLY [dbModel.DigitalSheet]) OR T IS OF (ONLY [dbModel.D");
            viewString.Append("igitalWeb]) OR T IS OF (ONLY [dbModel.Plotter])) THEN True ELSE False END AS _fr");
            viewString.Append("om2, \r\n                                CASE WHEN T IS OF (ONLY [dbModel.BindingT");
            viewString.Append("sk]) THEN True ELSE False END AS _from10\r\n                            FROM dbEnt");
            viewString.Append("ities.taskexecutors AS T\r\n                            WHERE (T IS OF (ONLY [dbMo");
            viewString.Append("del.LithoSheet]) OR T IS OF (ONLY [dbModel.LithoWeb]) OR T IS OF (ONLY [dbModel.");
            viewString.Append("DigitalSheet]) OR T IS OF (ONLY [dbModel.DigitalWeb]) OR T IS OF (ONLY [dbModel.");
            viewString.Append("Plotter]) OR T IS OF (ONLY [dbModel.BindingTsk]))) AS T7\r\n                      ");
            viewString.Append("      ON T6.taskexecutors_CodTaskExecutor = T7.taskexecutors_CodTaskExecutor\r\n  ");
            viewString.Append("                          LEFT OUTER JOIN (\r\n                            SELECT ");
            viewString.Append("\r\n                                T.CodTaskExecutor AS taskexecutors_CodTaskExec");
            viewString.Append("utor, \r\n                                TREAT(T AS [dbModel.PrinterMachine]).Ink");
            viewString.Append("Usage AS taskexecutors_InkUsage, \r\n                                TREAT(T AS [d");
            viewString.Append("bModel.PrinterMachine]).InkUsageForfait AS taskexecutors_InkUsageForfait, \r\n    ");
            viewString.Append("                            True AS _from5\r\n                            FROM dbE");
            viewString.Append("ntities.taskexecutors AS T\r\n                            WHERE (T IS OF (ONLY [db");
            viewString.Append("Model.LithoSheet]) OR T IS OF (ONLY [dbModel.LithoWeb]) OR T IS OF (ONLY [dbMode");
            viewString.Append("l.DigitalSheet]) OR T IS OF (ONLY [dbModel.DigitalWeb]) OR T IS OF (ONLY [dbMode");
            viewString.Append("l.Plotter]))) AS T8\r\n                            ON T6.taskexecutors_CodTaskExec");
            viewString.Append("utor = T8.taskexecutors_CodTaskExecutor\r\n                    ) AS T9\r\n          ");
            viewString.Append("      ) AS T10\r\n            ) AS T11\r\n        ) AS T12\r\n    ) AS T13");
            return new System.Collections.Generic.KeyValuePair<string, string>("dbModelStoreContainer.taskexecutors", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for dbModelStoreContainer.taskexecutorestimatedon
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView1()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(28335);
            viewString.Append("\r\n    SELECT VALUE -- Constructing taskexecutorestimatedon\r\n        [dbModel.Sto");
            viewString.Append("re.taskexecutorestimatedon](T9.taskexecutorestimatedon_TimeStampTable, T9.taskex");
            viewString.Append("ecutorestimatedon_CodTaskExecutor, T9.taskexecutorestimatedon_CodTaskEstimatedOn");
            viewString.Append(", T9.taskexecutorestimatedon_SelectorUnitTime, T9.taskexecutorestimatedon_Select");
            viewString.Append("orMqRun, T9.taskexecutorestimatedon_AvarageRunPerHour, T9.taskexecutorestimatedo");
            viewString.Append("n_UseDifferentRunPerHour, T9.taskexecutorestimatedon_UseDifferentDeficitForWeigh");
            viewString.Append("tStep, T9.taskexecutorestimatedon_StartingTime1, T9.taskexecutorestimatedon_Star");
            viewString.Append("tingTime2, T9.taskexecutorestimatedon_TimeForfait, T9.taskexecutorestimatedon_Co");
            viewString.Append("stPerHourRunning, T9.taskexecutorestimatedon_CostPerHourStarting, T9.taskexecuto");
            viewString.Append("restimatedon_AvarageRunPerHour4, T9.taskexecutorestimatedon_StartingTime4, T9.ta");
            viewString.Append("skexecutorestimatedon_AvarageRunPerHour6, T9.taskexecutorestimatedon_StartingTim");
            viewString.Append("e6, T9.taskexecutorestimatedon_AvarageRunPerHour8, T9.taskexecutorestimatedon_St");
            viewString.Append("artingTime8, T9.taskexecutorestimatedon_AvarageRunPerHour12, T9.taskexecutoresti");
            viewString.Append("matedon_StartingTime12, T9.taskexecutorestimatedon_AvarageRunPerHour16, T9.taske");
            viewString.Append("xecutorestimatedon_StartingTime16, T9.taskexecutorestimatedon_AvarageRunPerHour2");
            viewString.Append("4, T9.taskexecutorestimatedon_StartingTime24, T9.taskexecutorestimatedon_Avarage");
            viewString.Append("RunPerHour32, T9.taskexecutorestimatedon_StartingTime32, T9.taskexecutorestimate");
            viewString.Append("don_AvarageRunPerHourBinding, T9.taskexecutorestimatedon_StartingTimeBinding, T9");
            viewString.Append(".taskexecutorestimatedon_CostPerUnit, T9.taskexecutorestimatedon_UseDifferentCos");
            viewString.Append("tPerUnit, T9.taskexecutorestimatedon_UseDifferentDeficitOnCostForWeightStep, T9.");
            viewString.Append("taskexecutorestimatedon_StartingCost1, T9.taskexecutorestimatedon_StartingCost2,");
            viewString.Append(" T9.taskexecutorestimatedon_CostForfait, T9.taskexecutorestimatedon_CostForfaitF");
            viewString.Append("orSheet, T9.taskexecutorestimatedon_CostPerUnit4, T9.taskexecutorestimatedon_Sta");
            viewString.Append("rtingCost4, T9.taskexecutorestimatedon_CostPerUnit6, T9.taskexecutorestimatedon_");
            viewString.Append("StartingCost6, T9.taskexecutorestimatedon_CostPerUnit8, T9.taskexecutorestimated");
            viewString.Append("on_StartingCost8, T9.taskexecutorestimatedon_CostPerUnit12, T9.taskexecutorestim");
            viewString.Append("atedon_StartingCost12, T9.taskexecutorestimatedon_CostPerUnit16, T9.taskexecutor");
            viewString.Append("estimatedon_StartingCost16, T9.taskexecutorestimatedon_CostPerUnit24, T9.taskexe");
            viewString.Append("cutorestimatedon_StartingCost24, T9.taskexecutorestimatedon_CostPerUnit32, T9.ta");
            viewString.Append("skexecutorestimatedon_StartingCost32, T9.taskexecutorestimatedon_BindingCost, T9");
            viewString.Append(".taskexecutorestimatedon_BindingStartingCost, T9.taskexecutorestimatedon_CodOpti");
            viewString.Append("onTypeOfTask)\r\n    FROM (\r\n        SELECT -- Constructing SelectorUnitTime\r\n    ");
            viewString.Append("        T8.taskexecutorestimatedon_TimeStampTable, \r\n            T8.taskexecutor");
            viewString.Append("estimatedon_CodTaskExecutor, \r\n            T8.taskexecutorestimatedon_CodTaskEst");
            viewString.Append("imatedOn, \r\n            CASE\r\n                WHEN T8._from2 THEN CAST(\'0\' AS [E");
            viewString.Append("dm.Int32])\r\n                WHEN T8._from4 THEN CAST(\'1\' AS [Edm.Int32])\r\n      ");
            viewString.Append("          WHEN T8._from0 THEN CAST(\'2\' AS [Edm.Int32])\r\n                ELSE CAS");
            viewString.Append("T(\'3\' AS [Edm.Int32])\r\n            END AS taskexecutorestimatedon_SelectorUnitTi");
            viewString.Append("me, \r\n            T8.taskexecutorestimatedon_SelectorMqRun, \r\n            T8.tas");
            viewString.Append("kexecutorestimatedon_AvarageRunPerHour, \r\n            T8.taskexecutorestimatedon");
            viewString.Append("_UseDifferentRunPerHour, \r\n            T8.taskexecutorestimatedon_UseDifferentDe");
            viewString.Append("ficitForWeightStep, \r\n            T8.taskexecutorestimatedon_StartingTime1, \r\n  ");
            viewString.Append("          T8.taskexecutorestimatedon_StartingTime2, \r\n            T8.taskexecuto");
            viewString.Append("restimatedon_TimeForfait, \r\n            T8.taskexecutorestimatedon_CostPerHourRu");
            viewString.Append("nning, \r\n            T8.taskexecutorestimatedon_CostPerHourStarting, \r\n         ");
            viewString.Append("   T8.taskexecutorestimatedon_AvarageRunPerHour4, \r\n            T8.taskexecutore");
            viewString.Append("stimatedon_StartingTime4, \r\n            T8.taskexecutorestimatedon_AvarageRunPer");
            viewString.Append("Hour6, \r\n            T8.taskexecutorestimatedon_StartingTime6, \r\n            T8.");
            viewString.Append("taskexecutorestimatedon_AvarageRunPerHour8, \r\n            T8.taskexecutorestimat");
            viewString.Append("edon_StartingTime8, \r\n            T8.taskexecutorestimatedon_AvarageRunPerHour12");
            viewString.Append(", \r\n            T8.taskexecutorestimatedon_StartingTime12, \r\n            T8.task");
            viewString.Append("executorestimatedon_AvarageRunPerHour16, \r\n            T8.taskexecutorestimatedo");
            viewString.Append("n_StartingTime16, \r\n            T8.taskexecutorestimatedon_AvarageRunPerHour24, ");
            viewString.Append("\r\n            T8.taskexecutorestimatedon_StartingTime24, \r\n            T8.taskex");
            viewString.Append("ecutorestimatedon_AvarageRunPerHour32, \r\n            T8.taskexecutorestimatedon_");
            viewString.Append("StartingTime32, \r\n            T8.taskexecutorestimatedon_AvarageRunPerHourBindin");
            viewString.Append("g, \r\n            T8.taskexecutorestimatedon_StartingTimeBinding, \r\n            T");
            viewString.Append("8.taskexecutorestimatedon_CostPerUnit, \r\n            T8.taskexecutorestimatedon_");
            viewString.Append("UseDifferentCostPerUnit, \r\n            T8.taskexecutorestimatedon_UseDifferentDe");
            viewString.Append("ficitOnCostForWeightStep, \r\n            T8.taskexecutorestimatedon_StartingCost1");
            viewString.Append(", \r\n            T8.taskexecutorestimatedon_StartingCost2, \r\n            T8.taske");
            viewString.Append("xecutorestimatedon_CostForfait, \r\n            T8.taskexecutorestimatedon_CostFor");
            viewString.Append("faitForSheet, \r\n            T8.taskexecutorestimatedon_CostPerUnit4, \r\n         ");
            viewString.Append("   T8.taskexecutorestimatedon_StartingCost4, \r\n            T8.taskexecutorestima");
            viewString.Append("tedon_CostPerUnit6, \r\n            T8.taskexecutorestimatedon_StartingCost6, \r\n  ");
            viewString.Append("          T8.taskexecutorestimatedon_CostPerUnit8, \r\n            T8.taskexecutor");
            viewString.Append("estimatedon_StartingCost8, \r\n            T8.taskexecutorestimatedon_CostPerUnit1");
            viewString.Append("2, \r\n            T8.taskexecutorestimatedon_StartingCost12, \r\n            T8.tas");
            viewString.Append("kexecutorestimatedon_CostPerUnit16, \r\n            T8.taskexecutorestimatedon_Sta");
            viewString.Append("rtingCost16, \r\n            T8.taskexecutorestimatedon_CostPerUnit24, \r\n         ");
            viewString.Append("   T8.taskexecutorestimatedon_StartingCost24, \r\n            T8.taskexecutorestim");
            viewString.Append("atedon_CostPerUnit32, \r\n            T8.taskexecutorestimatedon_StartingCost32, \r");
            viewString.Append("\n            T8.taskexecutorestimatedon_BindingCost, \r\n            T8.taskexecut");
            viewString.Append("orestimatedon_BindingStartingCost, \r\n            T8.taskexecutorestimatedon_CodO");
            viewString.Append("ptionTypeOfTask\r\n        FROM (\r\n            SELECT -- Constructing SelectorMqRu");
            viewString.Append("n\r\n                T7.taskexecutorestimatedon_TimeStampTable, \r\n                ");
            viewString.Append("T7.taskexecutorestimatedon_CodTaskExecutor, \r\n                T7.taskexecutorest");
            viewString.Append("imatedon_CodTaskEstimatedOn, \r\n                CASE\r\n                    WHEN T7");
            viewString.Append("._from5 THEN CAST(\'0\' AS [Edm.Int32])\r\n                    WHEN T7._from6 THEN C");
            viewString.Append("AST(\'1\' AS [Edm.Int32])\r\n                END AS taskexecutorestimatedon_Selector");
            viewString.Append("MqRun, \r\n                T7.taskexecutorestimatedon_AvarageRunPerHour, \r\n       ");
            viewString.Append("         T7.taskexecutorestimatedon_UseDifferentRunPerHour, \r\n                T7");
            viewString.Append(".taskexecutorestimatedon_UseDifferentDeficitForWeightStep, \r\n                T7.");
            viewString.Append("taskexecutorestimatedon_StartingTime1, \r\n                T7.taskexecutorestimate");
            viewString.Append("don_StartingTime2, \r\n                T7.taskexecutorestimatedon_TimeForfait, \r\n ");
            viewString.Append("               T7.taskexecutorestimatedon_CostPerHourRunning, \r\n                ");
            viewString.Append("T7.taskexecutorestimatedon_CostPerHourStarting, \r\n                T7.taskexecuto");
            viewString.Append("restimatedon_AvarageRunPerHour4, \r\n                T7.taskexecutorestimatedon_St");
            viewString.Append("artingTime4, \r\n                T7.taskexecutorestimatedon_AvarageRunPerHour6, \r\n");
            viewString.Append("                T7.taskexecutorestimatedon_StartingTime6, \r\n                T7.t");
            viewString.Append("askexecutorestimatedon_AvarageRunPerHour8, \r\n                T7.taskexecutoresti");
            viewString.Append("matedon_StartingTime8, \r\n                T7.taskexecutorestimatedon_AvarageRunPe");
            viewString.Append("rHour12, \r\n                T7.taskexecutorestimatedon_StartingTime12, \r\n        ");
            viewString.Append("        T7.taskexecutorestimatedon_AvarageRunPerHour16, \r\n                T7.tas");
            viewString.Append("kexecutorestimatedon_StartingTime16, \r\n                T7.taskexecutorestimatedo");
            viewString.Append("n_AvarageRunPerHour24, \r\n                T7.taskexecutorestimatedon_StartingTime");
            viewString.Append("24, \r\n                T7.taskexecutorestimatedon_AvarageRunPerHour32, \r\n        ");
            viewString.Append("        T7.taskexecutorestimatedon_StartingTime32, \r\n                T7.taskexec");
            viewString.Append("utorestimatedon_AvarageRunPerHourBinding, \r\n                T7.taskexecutorestim");
            viewString.Append("atedon_StartingTimeBinding, \r\n                T7.taskexecutorestimatedon_CostPer");
            viewString.Append("Unit, \r\n                T7.taskexecutorestimatedon_UseDifferentCostPerUnit, \r\n  ");
            viewString.Append("              T7.taskexecutorestimatedon_UseDifferentDeficitOnCostForWeightStep,");
            viewString.Append(" \r\n                T7.taskexecutorestimatedon_StartingCost1, \r\n                T");
            viewString.Append("7.taskexecutorestimatedon_StartingCost2, \r\n                T7.taskexecutorestima");
            viewString.Append("tedon_CostForfait, \r\n                T7.taskexecutorestimatedon_CostForfaitForSh");
            viewString.Append("eet, \r\n                T7.taskexecutorestimatedon_CostPerUnit4, \r\n              ");
            viewString.Append("  T7.taskexecutorestimatedon_StartingCost4, \r\n                T7.taskexecutorest");
            viewString.Append("imatedon_CostPerUnit6, \r\n                T7.taskexecutorestimatedon_StartingCost");
            viewString.Append("6, \r\n                T7.taskexecutorestimatedon_CostPerUnit8, \r\n                ");
            viewString.Append("T7.taskexecutorestimatedon_StartingCost8, \r\n                T7.taskexecutorestim");
            viewString.Append("atedon_CostPerUnit12, \r\n                T7.taskexecutorestimatedon_StartingCost1");
            viewString.Append("2, \r\n                T7.taskexecutorestimatedon_CostPerUnit16, \r\n               ");
            viewString.Append(" T7.taskexecutorestimatedon_StartingCost16, \r\n                T7.taskexecutorest");
            viewString.Append("imatedon_CostPerUnit24, \r\n                T7.taskexecutorestimatedon_StartingCos");
            viewString.Append("t24, \r\n                T7.taskexecutorestimatedon_CostPerUnit32, \r\n             ");
            viewString.Append("   T7.taskexecutorestimatedon_StartingCost32, \r\n                T7.taskexecutore");
            viewString.Append("stimatedon_BindingCost, \r\n                T7.taskexecutorestimatedon_BindingStar");
            viewString.Append("tingCost, \r\n                T7.taskexecutorestimatedon_CodOptionTypeOfTask, \r\n  ");
            viewString.Append("              T7._from0, \r\n                T7._from2, \r\n                T7._from");
            viewString.Append("4\r\n            FROM (\r\n                SELECT T5.taskexecutorestimatedon_TimeSta");
            viewString.Append("mpTable, T5.taskexecutorestimatedon_CodTaskExecutor, T5.taskexecutorestimatedon_");
            viewString.Append("CodTaskEstimatedOn, T5.taskexecutorestimatedon_AvarageRunPerHour, T5.taskexecuto");
            viewString.Append("restimatedon_UseDifferentRunPerHour, T5.taskexecutorestimatedon_UseDifferentDefi");
            viewString.Append("citForWeightStep, T5.taskexecutorestimatedon_StartingTime1, T5.taskexecutorestim");
            viewString.Append("atedon_StartingTime2, T5.taskexecutorestimatedon_TimeForfait, T5.taskexecutorest");
            viewString.Append("imatedon_CostPerHourRunning, T5.taskexecutorestimatedon_CostPerHourStarting, T5.");
            viewString.Append("taskexecutorestimatedon_AvarageRunPerHour4, T5.taskexecutorestimatedon_StartingT");
            viewString.Append("ime4, T5.taskexecutorestimatedon_AvarageRunPerHour6, T5.taskexecutorestimatedon_");
            viewString.Append("StartingTime6, T5.taskexecutorestimatedon_AvarageRunPerHour8, T5.taskexecutorest");
            viewString.Append("imatedon_StartingTime8, T5.taskexecutorestimatedon_AvarageRunPerHour12, T5.taske");
            viewString.Append("xecutorestimatedon_StartingTime12, T5.taskexecutorestimatedon_AvarageRunPerHour1");
            viewString.Append("6, T5.taskexecutorestimatedon_StartingTime16, T5.taskexecutorestimatedon_Avarage");
            viewString.Append("RunPerHour24, T5.taskexecutorestimatedon_StartingTime24, T5.taskexecutorestimate");
            viewString.Append("don_AvarageRunPerHour32, T5.taskexecutorestimatedon_StartingTime32, T5.taskexecu");
            viewString.Append("torestimatedon_AvarageRunPerHourBinding, T5.taskexecutorestimatedon_StartingTime");
            viewString.Append("Binding, T6.taskexecutorestimatedon_CostPerUnit, CASE\r\n                        W");
            viewString.Append("HEN (T5._from0 OR T5._from1 OR T5._from2 OR T5._from3 OR T5._from5 OR T5._from6)");
            viewString.Append(" THEN T5.taskexecutorestimatedon_UseDifferentCostPerUnit\r\n                      ");
            viewString.Append("  ELSE T6.taskexecutorestimatedon_UseDifferentCostPerUnit\r\n                    E");
            viewString.Append("ND AS taskexecutorestimatedon_UseDifferentCostPerUnit, T6.taskexecutorestimatedo");
            viewString.Append("n_UseDifferentDeficitOnCostForWeightStep, T6.taskexecutorestimatedon_StartingCos");
            viewString.Append("t1, T6.taskexecutorestimatedon_StartingCost2, T5.taskexecutorestimatedon_CostFor");
            viewString.Append("fait, T5.taskexecutorestimatedon_CostForfaitForSheet, T5.taskexecutorestimatedon");
            viewString.Append("_CostPerUnit4, T5.taskexecutorestimatedon_StartingCost4, T5.taskexecutorestimate");
            viewString.Append("don_CostPerUnit6, T5.taskexecutorestimatedon_StartingCost6, T5.taskexecutorestim");
            viewString.Append("atedon_CostPerUnit8, T5.taskexecutorestimatedon_StartingCost8, T5.taskexecutores");
            viewString.Append("timatedon_CostPerUnit12, T5.taskexecutorestimatedon_StartingCost12, T5.taskexecu");
            viewString.Append("torestimatedon_CostPerUnit16, T5.taskexecutorestimatedon_StartingCost16, T5.task");
            viewString.Append("executorestimatedon_CostPerUnit24, T5.taskexecutorestimatedon_StartingCost24, T5");
            viewString.Append(".taskexecutorestimatedon_CostPerUnit32, T5.taskexecutorestimatedon_StartingCost3");
            viewString.Append("2, T5.taskexecutorestimatedon_BindingCost, T5.taskexecutorestimatedon_BindingSta");
            viewString.Append("rtingCost, T5.taskexecutorestimatedon_CodOptionTypeOfTask, T5._from0, T5._from1,");
            viewString.Append(" T5._from2, T5._from3, (T6._from4 AND T6._from4 IS NOT NULL) AS _from4, T5._from");
            viewString.Append("5, T5._from6\r\n                FROM  (\r\n                    SELECT T4.taskexecuto");
            viewString.Append("restimatedon_TimeStampTable, T4.taskexecutorestimatedon_CodTaskExecutor, T3.task");
            viewString.Append("executorestimatedon_CodTaskEstimatedOn, T3.taskexecutorestimatedon_AvarageRunPer");
            viewString.Append("Hour, T3.taskexecutorestimatedon_UseDifferentRunPerHour, T3.taskexecutorestimate");
            viewString.Append("don_UseDifferentDeficitForWeightStep, T3.taskexecutorestimatedon_StartingTime1, ");
            viewString.Append("T3.taskexecutorestimatedon_StartingTime2, T3.taskexecutorestimatedon_TimeForfait");
            viewString.Append(", T3.taskexecutorestimatedon_CostPerHourRunning, T3.taskexecutorestimatedon_Cost");
            viewString.Append("PerHourStarting, T3.taskexecutorestimatedon_AvarageRunPerHour4, T3.taskexecutore");
            viewString.Append("stimatedon_StartingTime4, T3.taskexecutorestimatedon_AvarageRunPerHour6, T3.task");
            viewString.Append("executorestimatedon_StartingTime6, T3.taskexecutorestimatedon_AvarageRunPerHour8");
            viewString.Append(", T3.taskexecutorestimatedon_StartingTime8, T3.taskexecutorestimatedon_AvarageRu");
            viewString.Append("nPerHour12, T3.taskexecutorestimatedon_StartingTime12, T3.taskexecutorestimatedo");
            viewString.Append("n_AvarageRunPerHour16, T3.taskexecutorestimatedon_StartingTime16, T3.taskexecuto");
            viewString.Append("restimatedon_AvarageRunPerHour24, T3.taskexecutorestimatedon_StartingTime24, T3.");
            viewString.Append("taskexecutorestimatedon_AvarageRunPerHour32, T3.taskexecutorestimatedon_Starting");
            viewString.Append("Time32, T3.taskexecutorestimatedon_AvarageRunPerHourBinding, T3.taskexecutoresti");
            viewString.Append("matedon_StartingTimeBinding, T3.taskexecutorestimatedon_UseDifferentCostPerUnit,");
            viewString.Append(" T4.taskexecutorestimatedon_CostForfait, T4.taskexecutorestimatedon_CostForfaitF");
            viewString.Append("orSheet, T3.taskexecutorestimatedon_CostPerUnit4, T3.taskexecutorestimatedon_Sta");
            viewString.Append("rtingCost4, T3.taskexecutorestimatedon_CostPerUnit6, T3.taskexecutorestimatedon_");
            viewString.Append("StartingCost6, T3.taskexecutorestimatedon_CostPerUnit8, T3.taskexecutorestimated");
            viewString.Append("on_StartingCost8, T3.taskexecutorestimatedon_CostPerUnit12, T3.taskexecutorestim");
            viewString.Append("atedon_StartingCost12, T3.taskexecutorestimatedon_CostPerUnit16, T3.taskexecutor");
            viewString.Append("estimatedon_StartingCost16, T3.taskexecutorestimatedon_CostPerUnit24, T3.taskexe");
            viewString.Append("cutorestimatedon_StartingCost24, T3.taskexecutorestimatedon_CostPerUnit32, T3.ta");
            viewString.Append("skexecutorestimatedon_StartingCost32, T3.taskexecutorestimatedon_BindingCost, T3");
            viewString.Append(".taskexecutorestimatedon_BindingStartingCost, T4.taskexecutorestimatedon_CodOpti");
            viewString.Append("onTypeOfTask, T3._from0, T3._from1, T3._from2, T4._from3, T3._from5, T3._from6\r\n");
            viewString.Append("                    FROM  ( (\r\n                            SELECT \r\n            ");
            viewString.Append("                    T.CodTaskExecutorOn AS taskexecutorestimatedon_CodTaskEstima");
            viewString.Append("tedOn, \r\n                                TREAT(T AS [dbModel.TaskEstimatedOnTime");
            viewString.Append("]).AvarageRunPerHour AS taskexecutorestimatedon_AvarageRunPerHour, \r\n           ");
            viewString.Append("                     TREAT(T AS [dbModel.TaskEstimatedOnTime]).UseDifferentRunPe");
            viewString.Append("rHour AS taskexecutorestimatedon_UseDifferentRunPerHour, \r\n                     ");
            viewString.Append("           TREAT(T AS [dbModel.TaskEstimatedOnTime]).UseDifferentDeficitForWeigh");
            viewString.Append("tStep AS taskexecutorestimatedon_UseDifferentDeficitForWeightStep, \r\n           ");
            viewString.Append("                     TREAT(T AS [dbModel.TaskEstimatedOnTime]).StartingTime1 AS ");
            viewString.Append("taskexecutorestimatedon_StartingTime1, \r\n                                TREAT(T");
            viewString.Append(" AS [dbModel.TaskEstimatedOnTime]).StartingTime2 AS taskexecutorestimatedon_Star");
            viewString.Append("tingTime2, \r\n                                TREAT(T AS [dbModel.TaskEstimatedOn");
            viewString.Append("Time]).TimeForfait AS taskexecutorestimatedon_TimeForfait, \r\n                   ");
            viewString.Append("             TREAT(T AS [dbModel.TaskEstimatedOnTime]).CostPerHourRunning AS tas");
            viewString.Append("kexecutorestimatedon_CostPerHourRunning, \r\n                                TREAT");
            viewString.Append("(T AS [dbModel.TaskEstimatedOnTime]).CostPerHourStarting AS taskexecutorestimate");
            viewString.Append("don_CostPerHourStarting, \r\n                                CAST(NULL AS [Edm.Int");
            viewString.Append("64]) AS taskexecutorestimatedon_AvarageRunPerHour4, \r\n                          ");
            viewString.Append("      CAST(NULL AS [Edm.Time]) AS taskexecutorestimatedon_StartingTime4, \r\n     ");
            viewString.Append("                           CAST(NULL AS [Edm.Int64]) AS taskexecutorestimatedon_");
            viewString.Append("AvarageRunPerHour6, \r\n                                CAST(NULL AS [Edm.Time]) A");
            viewString.Append("S taskexecutorestimatedon_StartingTime6, \r\n                                CAST(");
            viewString.Append("NULL AS [Edm.Int64]) AS taskexecutorestimatedon_AvarageRunPerHour8, \r\n          ");
            viewString.Append("                      CAST(NULL AS [Edm.Time]) AS taskexecutorestimatedon_Starti");
            viewString.Append("ngTime8, \r\n                                CAST(NULL AS [Edm.Int64]) AS taskexec");
            viewString.Append("utorestimatedon_AvarageRunPerHour12, \r\n                                CAST(NULL");
            viewString.Append(" AS [Edm.Time]) AS taskexecutorestimatedon_StartingTime12, \r\n                   ");
            viewString.Append("             CAST(NULL AS [Edm.Int64]) AS taskexecutorestimatedon_AvarageRunPerH");
            viewString.Append("our16, \r\n                                CAST(NULL AS [Edm.Time]) AS taskexecuto");
            viewString.Append("restimatedon_StartingTime16, \r\n                                CAST(NULL AS [Edm");
            viewString.Append(".Int64]) AS taskexecutorestimatedon_AvarageRunPerHour24, \r\n                     ");
            viewString.Append("           CAST(NULL AS [Edm.Time]) AS taskexecutorestimatedon_StartingTime24, \r");
            viewString.Append("\n                                CAST(NULL AS [Edm.Int64]) AS taskexecutorestima");
            viewString.Append("tedon_AvarageRunPerHour32, \r\n                                CAST(NULL AS [Edm.T");
            viewString.Append("ime]) AS taskexecutorestimatedon_StartingTime32, \r\n                             ");
            viewString.Append("   CAST(NULL AS [Edm.Int64]) AS taskexecutorestimatedon_AvarageRunPerHourBinding");
            viewString.Append(", \r\n                                CAST(NULL AS [Edm.Time]) AS taskexecutoresti");
            viewString.Append("matedon_StartingTimeBinding, \r\n                                TREAT(T AS [dbMod");
            viewString.Append("el.BindingEstimatedOnRun]).UseDifferentCostPerUnit AS taskexecutorestimatedon_Us");
            viewString.Append("eDifferentCostPerUnit, \r\n                                TREAT(T AS [dbModel.Bin");
            viewString.Append("dingEstimatedOnRun]).CostPerUnit4 AS taskexecutorestimatedon_CostPerUnit4, \r\n   ");
            viewString.Append("                             TREAT(T AS [dbModel.BindingEstimatedOnRun]).Startin");
            viewString.Append("gCost4 AS taskexecutorestimatedon_StartingCost4, \r\n                             ");
            viewString.Append("   TREAT(T AS [dbModel.BindingEstimatedOnRun]).CostPerUnit6 AS taskexecutorestim");
            viewString.Append("atedon_CostPerUnit6, \r\n                                TREAT(T AS [dbModel.Bindi");
            viewString.Append("ngEstimatedOnRun]).StartingCost6 AS taskexecutorestimatedon_StartingCost6, \r\n   ");
            viewString.Append("                             TREAT(T AS [dbModel.BindingEstimatedOnRun]).CostPer");
            viewString.Append("Unit8 AS taskexecutorestimatedon_CostPerUnit8, \r\n                               ");
            viewString.Append(" TREAT(T AS [dbModel.BindingEstimatedOnRun]).StartingCost8 AS taskexecutorestima");
            viewString.Append("tedon_StartingCost8, \r\n                                TREAT(T AS [dbModel.Bindi");
            viewString.Append("ngEstimatedOnRun]).CostPerUnit12 AS taskexecutorestimatedon_CostPerUnit12, \r\n   ");
            viewString.Append("                             TREAT(T AS [dbModel.BindingEstimatedOnRun]).Startin");
            viewString.Append("gCost12 AS taskexecutorestimatedon_StartingCost12, \r\n                           ");
            viewString.Append("     TREAT(T AS [dbModel.BindingEstimatedOnRun]).CostPerUnit16 AS taskexecutores");
            viewString.Append("timatedon_CostPerUnit16, \r\n                                TREAT(T AS [dbModel.B");
            viewString.Append("indingEstimatedOnRun]).StartingCost16 AS taskexecutorestimatedon_StartingCost16,");
            viewString.Append(" \r\n                                TREAT(T AS [dbModel.BindingEstimatedOnRun]).C");
            viewString.Append("ostPerUnit24 AS taskexecutorestimatedon_CostPerUnit24, \r\n                       ");
            viewString.Append("         TREAT(T AS [dbModel.BindingEstimatedOnRun]).StartingCost24 AS taskexecu");
            viewString.Append("torestimatedon_StartingCost24, \r\n                                TREAT(T AS [dbM");
            viewString.Append("odel.BindingEstimatedOnRun]).CostPerUnit32 AS taskexecutorestimatedon_CostPerUni");
            viewString.Append("t32, \r\n                                TREAT(T AS [dbModel.BindingEstimatedOnRun");
            viewString.Append("]).StartingCost32 AS taskexecutorestimatedon_StartingCost32, \r\n                 ");
            viewString.Append("               TREAT(T AS [dbModel.BindingEstimatedOnRun]).BindingCost AS taskex");
            viewString.Append("ecutorestimatedon_BindingCost, \r\n                                TREAT(T AS [dbM");
            viewString.Append("odel.BindingEstimatedOnRun]).BindingStartingCost AS taskexecutorestimatedon_Bind");
            viewString.Append("ingStartingCost, \r\n                                False AS _from0, \r\n          ");
            viewString.Append("                      CASE WHEN T IS OF (ONLY [dbModel.BindingEstimatedOnRun]) T");
            viewString.Append("HEN True ELSE False END AS _from1, \r\n                                CASE WHEN T");
            viewString.Append(" IS OF (ONLY [dbModel.TaskEstimatedOnTime]) THEN True ELSE False END AS _from2, ");
            viewString.Append("\r\n                                CASE WHEN T IS OF (ONLY [dbModel.TaskEstimated");
            viewString.Append("OnRun]) THEN True ELSE False END AS _from5, \r\n                                CA");
            viewString.Append("SE WHEN T IS OF (ONLY [dbModel.TaskEstimatedOnMq]) THEN True ELSE False END AS _");
            viewString.Append("from6\r\n                            FROM dbEntities.taskexecutorestimatedon AS T\r");
            viewString.Append("\n                            WHERE (T IS OF (ONLY [dbModel.TaskEstimatedOnTime])");
            viewString.Append(" OR T IS OF (ONLY [dbModel.TaskEstimatedOnRun]) OR T IS OF (ONLY [dbModel.TaskEs");
            viewString.Append("timatedOnMq]) OR T IS OF (ONLY [dbModel.BindingEstimatedOnRun])))\r\n             ");
            viewString.Append("               UNION ALL (\r\n                            SELECT \r\n               ");
            viewString.Append("                 T.CodTaskExecutorOn AS taskexecutorestimatedon_CodTaskEstimated");
            viewString.Append("On, \r\n                                CAST(NULL AS [Edm.Int64]) AS taskexecutore");
            viewString.Append("stimatedon_AvarageRunPerHour, \r\n                                CAST(NULL AS [Ed");
            viewString.Append("m.Boolean]) AS taskexecutorestimatedon_UseDifferentRunPerHour, \r\n               ");
            viewString.Append("                 CAST(NULL AS [Edm.Boolean]) AS taskexecutorestimatedon_UseDiffe");
            viewString.Append("rentDeficitForWeightStep, \r\n                                CAST(NULL AS [Edm.Ti");
            viewString.Append("me]) AS taskexecutorestimatedon_StartingTime1, \r\n                               ");
            viewString.Append(" CAST(NULL AS [Edm.Time]) AS taskexecutorestimatedon_StartingTime2, \r\n          ");
            viewString.Append("                      CAST(NULL AS [Edm.Time]) AS taskexecutorestimatedon_TimeFo");
            viewString.Append("rfait, \r\n                                TREAT(T AS [dbModel.BindingEstimatedOnT");
            viewString.Append("ime]).CostPerHourRunning AS taskexecutorestimatedon_CostPerHourRunning, \r\n      ");
            viewString.Append("                          TREAT(T AS [dbModel.BindingEstimatedOnTime]).CostPerHo");
            viewString.Append("urStarting AS taskexecutorestimatedon_CostPerHourStarting, \r\n                   ");
            viewString.Append("             TREAT(T AS [dbModel.BindingEstimatedOnTime]).AvarageRunPerHour4 AS ");
            viewString.Append("taskexecutorestimatedon_AvarageRunPerHour4, \r\n                                TR");
            viewString.Append("EAT(T AS [dbModel.BindingEstimatedOnTime]).StartingTime4 AS taskexecutorestimate");
            viewString.Append("don_StartingTime4, \r\n                                TREAT(T AS [dbModel.Binding");
            viewString.Append("EstimatedOnTime]).AvarageRunPerHour6 AS taskexecutorestimatedon_AvarageRunPerHou");
            viewString.Append("r6, \r\n                                TREAT(T AS [dbModel.BindingEstimatedOnTime");
            viewString.Append("]).StartingTime6 AS taskexecutorestimatedon_StartingTime6, \r\n                   ");
            viewString.Append("             TREAT(T AS [dbModel.BindingEstimatedOnTime]).AvarageRunPerHour8 AS ");
            viewString.Append("taskexecutorestimatedon_AvarageRunPerHour8, \r\n                                TR");
            viewString.Append("EAT(T AS [dbModel.BindingEstimatedOnTime]).StartingTime8 AS taskexecutorestimate");
            viewString.Append("don_StartingTime8, \r\n                                TREAT(T AS [dbModel.Binding");
            viewString.Append("EstimatedOnTime]).AvarageRunPerHour12 AS taskexecutorestimatedon_AvarageRunPerHo");
            viewString.Append("ur12, \r\n                                TREAT(T AS [dbModel.BindingEstimatedOnTi");
            viewString.Append("me]).StartingTime12 AS taskexecutorestimatedon_StartingTime12, \r\n               ");
            viewString.Append("                 TREAT(T AS [dbModel.BindingEstimatedOnTime]).AvarageRunPerHour1");
            viewString.Append("6 AS taskexecutorestimatedon_AvarageRunPerHour16, \r\n                            ");
            viewString.Append("    TREAT(T AS [dbModel.BindingEstimatedOnTime]).StartingTime16 AS taskexecutore");
            viewString.Append("stimatedon_StartingTime16, \r\n                                TREAT(T AS [dbModel");
            viewString.Append(".BindingEstimatedOnTime]).AvarageRunPerHour24 AS taskexecutorestimatedon_Avarage");
            viewString.Append("RunPerHour24, \r\n                                TREAT(T AS [dbModel.BindingEstim");
            viewString.Append("atedOnTime]).StartingTime24 AS taskexecutorestimatedon_StartingTime24, \r\n       ");
            viewString.Append("                         TREAT(T AS [dbModel.BindingEstimatedOnTime]).AvarageRun");
            viewString.Append("PerHour32 AS taskexecutorestimatedon_AvarageRunPerHour32, \r\n                    ");
            viewString.Append("            TREAT(T AS [dbModel.BindingEstimatedOnTime]).StartingTime32 AS taske");
            viewString.Append("xecutorestimatedon_StartingTime32, \r\n                                TREAT(T AS ");
            viewString.Append("[dbModel.BindingEstimatedOnTime]).AvarageRunPerHourBinding AS taskexecutorestima");
            viewString.Append("tedon_AvarageRunPerHourBinding, \r\n                                TREAT(T AS [db");
            viewString.Append("Model.BindingEstimatedOnTime]).StartingTimeBinding AS taskexecutorestimatedon_St");
            viewString.Append("artingTimeBinding, \r\n                                CAST(NULL AS [Edm.Boolean])");
            viewString.Append(" AS taskexecutorestimatedon_UseDifferentCostPerUnit, \r\n                         ");
            viewString.Append("       CAST(NULL AS [Edm.String]) AS taskexecutorestimatedon_CostPerUnit4, \r\n   ");
            viewString.Append("                             CAST(NULL AS [Edm.String]) AS taskexecutorestimated");
            viewString.Append("on_StartingCost4, \r\n                                CAST(NULL AS [Edm.String]) A");
            viewString.Append("S taskexecutorestimatedon_CostPerUnit6, \r\n                                CAST(N");
            viewString.Append("ULL AS [Edm.String]) AS taskexecutorestimatedon_StartingCost6, \r\n               ");
            viewString.Append("                 CAST(NULL AS [Edm.String]) AS taskexecutorestimatedon_CostPerUn");
            viewString.Append("it8, \r\n                                CAST(NULL AS [Edm.String]) AS taskexecuto");
            viewString.Append("restimatedon_StartingCost8, \r\n                                CAST(NULL AS [Edm.");
            viewString.Append("String]) AS taskexecutorestimatedon_CostPerUnit12, \r\n                           ");
            viewString.Append("     CAST(NULL AS [Edm.String]) AS taskexecutorestimatedon_StartingCost12, \r\n   ");
            viewString.Append("                             CAST(NULL AS [Edm.String]) AS taskexecutorestimated");
            viewString.Append("on_CostPerUnit16, \r\n                                CAST(NULL AS [Edm.String]) A");
            viewString.Append("S taskexecutorestimatedon_StartingCost16, \r\n                                CAST");
            viewString.Append("(NULL AS [Edm.String]) AS taskexecutorestimatedon_CostPerUnit24, \r\n             ");
            viewString.Append("                   CAST(NULL AS [Edm.String]) AS taskexecutorestimatedon_Startin");
            viewString.Append("gCost24, \r\n                                CAST(NULL AS [Edm.String]) AS taskexe");
            viewString.Append("cutorestimatedon_CostPerUnit32, \r\n                                CAST(NULL AS [");
            viewString.Append("Edm.String]) AS taskexecutorestimatedon_StartingCost32, \r\n                      ");
            viewString.Append("          CAST(NULL AS [Edm.String]) AS taskexecutorestimatedon_BindingCost, \r\n ");
            viewString.Append("                               CAST(NULL AS [Edm.String]) AS taskexecutorestimat");
            viewString.Append("edon_BindingStartingCost, \r\n                                True AS _from0, \r\n  ");
            viewString.Append("                              False AS _from1, \r\n                               ");
            viewString.Append(" False AS _from2, \r\n                                False AS _from5, \r\n         ");
            viewString.Append("                       False AS _from6\r\n                            FROM dbEntit");
            viewString.Append("ies.taskexecutorestimatedon AS T\r\n                            WHERE T IS OF (ONL");
            viewString.Append("Y [dbModel.BindingEstimatedOnTime]))) AS T3\r\n                        INNER JOIN ");
            viewString.Append("(\r\n                        SELECT \r\n                            T.TimeStampTable");
            viewString.Append(" AS taskexecutorestimatedon_TimeStampTable, \r\n                            T.CodT");
            viewString.Append("askExecutor AS taskexecutorestimatedon_CodTaskExecutor, \r\n                      ");
            viewString.Append("      T.CodTaskExecutorOn AS taskexecutorestimatedon_CodTaskEstimatedOn, \r\n     ");
            viewString.Append("                       T.CostForfait AS taskexecutorestimatedon_CostForfait, \r\n ");
            viewString.Append("                           T.CostForfaitForSheet AS taskexecutorestimatedon_Cost");
            viewString.Append("ForfaitForSheet, \r\n                            T.CodOptionTypeOfTask AS taskexec");
            viewString.Append("utorestimatedon_CodOptionTypeOfTask, \r\n                            True AS _from");
            viewString.Append("3\r\n                        FROM dbEntities.taskexecutorestimatedon AS T) AS T4\r\n");
            viewString.Append("                        ON T3.taskexecutorestimatedon_CodTaskEstimatedOn = T4.ta");
            viewString.Append("skexecutorestimatedon_CodTaskEstimatedOn) AS T5\r\n                    LEFT OUTER ");
            viewString.Append("JOIN (\r\n                    SELECT \r\n                        T.CodTaskExecutorOn");
            viewString.Append(" AS taskexecutorestimatedon_CodTaskEstimatedOn, \r\n                        TREAT(");
            viewString.Append("T AS [dbModel.TaskEstimatedOnUnit]).CostPerUnit AS taskexecutorestimatedon_CostP");
            viewString.Append("erUnit, \r\n                        TREAT(T AS [dbModel.TaskEstimatedOnUnit]).UseD");
            viewString.Append("ifferentCostPerUnit AS taskexecutorestimatedon_UseDifferentCostPerUnit, \r\n      ");
            viewString.Append("                  TREAT(T AS [dbModel.TaskEstimatedOnUnit]).UseDifferentDeficitO");
            viewString.Append("nCostForWeightStep AS taskexecutorestimatedon_UseDifferentDeficitOnCostForWeight");
            viewString.Append("Step, \r\n                        TREAT(T AS [dbModel.TaskEstimatedOnUnit]).Starti");
            viewString.Append("ngCost1 AS taskexecutorestimatedon_StartingCost1, \r\n                        TREA");
            viewString.Append("T(T AS [dbModel.TaskEstimatedOnUnit]).StartingCost2 AS taskexecutorestimatedon_S");
            viewString.Append("tartingCost2, \r\n                        True AS _from4\r\n                    FROM");
            viewString.Append(" dbEntities.taskexecutorestimatedon AS T\r\n                    WHERE (T IS OF (ON");
            viewString.Append("LY [dbModel.TaskEstimatedOnRun]) OR T IS OF (ONLY [dbModel.TaskEstimatedOnMq])))");
            viewString.Append(" AS T6\r\n                    ON T5.taskexecutorestimatedon_CodTaskEstimatedOn = T");
            viewString.Append("6.taskexecutorestimatedon_CodTaskEstimatedOn\r\n            ) AS T7\r\n        ) AS ");
            viewString.Append("T8\r\n    ) AS T9");
            return new System.Collections.Generic.KeyValuePair<string, string>("dbModelStoreContainer.taskexecutorestimatedon", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for dbModelStoreContainer.steps
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView2()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(13167);
            viewString.Append("\r\n    SELECT VALUE -- Constructing steps\r\n        [dbModel.Store.steps](T6.steps");
            viewString.Append("_TimeStampTable, T6.steps_CodTaskEstimatedOn, T6.steps_IdStep, T6.steps_FromUnit");
            viewString.Append(", T6.steps_ToUnit, T6.steps_Selector, T6.steps_AvarageRunPerHour, T6.steps_CostP");
            viewString.Append("erUnit, T6.steps_DeficitRate, T6.steps_AvarageRunPerHour4, T6.steps_StartingTime");
            viewString.Append("4, T6.steps_AvarageRunPerHour6, T6.steps_StartingTime6, T6.steps_AvarageRunPerHo");
            viewString.Append("ur8, T6.steps_StartingTime8, T6.steps_AvarageRunPerHour12, T6.steps_StartingTime");
            viewString.Append("12, T6.steps_AvarageRunPerHour16, T6.steps_StartingTime16, T6.steps_AvarageRunPe");
            viewString.Append("rHour24, T6.steps_StartingTime24, T6.steps_AvarageRunPerHour32, T6.steps_Startin");
            viewString.Append("gTime32, T6.steps_AvarageRunPerHourBinding, T6.steps_StartingTimeBinding, T6.ste");
            viewString.Append("ps_CostPerUnit4, T6.steps_StartingCost4, T6.steps_CostPerUnit6, T6.steps_Startin");
            viewString.Append("gCost6, T6.steps_CostPerUnit8, T6.steps_StartingCost8, T6.steps_CostPerUnit12, T");
            viewString.Append("6.steps_StartingCost12, T6.steps_CostPerUnit16, T6.steps_StartingCost16, T6.step");
            viewString.Append("s_CostPerUnit24, T6.steps_StartingCost24, T6.steps_CostPerUnit32, T6.steps_Start");
            viewString.Append("ingCost32, T6.steps_BindingCost)\r\n    FROM (\r\n        SELECT -- Constructing Sel");
            viewString.Append("ector\r\n            T5.steps_TimeStampTable, \r\n            T5.steps_CodTaskEstima");
            viewString.Append("tedOn, \r\n            T5.steps_IdStep, \r\n            T5.steps_FromUnit, \r\n       ");
            viewString.Append("     T5.steps_ToUnit, \r\n            CASE\r\n                WHEN T5._from3 THEN CA");
            viewString.Append("ST(\'0\' AS [Edm.Int32])\r\n                WHEN T5._from4 THEN CAST(\'1\' AS [Edm.Int");
            viewString.Append("32])\r\n                WHEN T5._from5 THEN CAST(\'2\' AS [Edm.Int32])\r\n            ");
            viewString.Append("    WHEN T5._from6 THEN CAST(\'3\' AS [Edm.Int32])\r\n                WHEN T5._from7");
            viewString.Append(" THEN CAST(\'4\' AS [Edm.Int32])\r\n                WHEN T5._from0 THEN CAST(\'5\' AS ");
            viewString.Append("[Edm.Int32])\r\n                ELSE CAST(\'6\' AS [Edm.Int32])\r\n            END AS ");
            viewString.Append("steps_Selector, \r\n            T5.steps_AvarageRunPerHour, \r\n            T5.steps");
            viewString.Append("_CostPerUnit, \r\n            T5.steps_DeficitRate, \r\n            T5.steps_Avarage");
            viewString.Append("RunPerHour4, \r\n            T5.steps_StartingTime4, \r\n            T5.steps_Avarag");
            viewString.Append("eRunPerHour6, \r\n            T5.steps_StartingTime6, \r\n            T5.steps_Avara");
            viewString.Append("geRunPerHour8, \r\n            T5.steps_StartingTime8, \r\n            T5.steps_Avar");
            viewString.Append("ageRunPerHour12, \r\n            T5.steps_StartingTime12, \r\n            T5.steps_A");
            viewString.Append("varageRunPerHour16, \r\n            T5.steps_StartingTime16, \r\n            T5.step");
            viewString.Append("s_AvarageRunPerHour24, \r\n            T5.steps_StartingTime24, \r\n            T5.s");
            viewString.Append("teps_AvarageRunPerHour32, \r\n            T5.steps_StartingTime32, \r\n            T");
            viewString.Append("5.steps_AvarageRunPerHourBinding, \r\n            T5.steps_StartingTimeBinding, \r\n");
            viewString.Append("            T5.steps_CostPerUnit4, \r\n            T5.steps_StartingCost4, \r\n     ");
            viewString.Append("       T5.steps_CostPerUnit6, \r\n            T5.steps_StartingCost6, \r\n          ");
            viewString.Append("  T5.steps_CostPerUnit8, \r\n            T5.steps_StartingCost8, \r\n            T5.");
            viewString.Append("steps_CostPerUnit12, \r\n            T5.steps_StartingCost12, \r\n            T5.ste");
            viewString.Append("ps_CostPerUnit16, \r\n            T5.steps_StartingCost16, \r\n            T5.steps_");
            viewString.Append("CostPerUnit24, \r\n            T5.steps_StartingCost24, \r\n            T5.steps_Cos");
            viewString.Append("tPerUnit32, \r\n            T5.steps_StartingCost32, \r\n            T5.steps_Bindin");
            viewString.Append("gCost\r\n        FROM (\r\n            SELECT T4.steps_TimeStampTable, T4.steps_CodT");
            viewString.Append("askEstimatedOn, T3.steps_IdStep, T4.steps_FromUnit, T4.steps_ToUnit, T3.steps_Av");
            viewString.Append("arageRunPerHour, T3.steps_CostPerUnit, T3.steps_DeficitRate, T3.steps_AvarageRun");
            viewString.Append("PerHour4, T3.steps_StartingTime4, T3.steps_AvarageRunPerHour6, T3.steps_Starting");
            viewString.Append("Time6, T3.steps_AvarageRunPerHour8, T3.steps_StartingTime8, T3.steps_AvarageRunP");
            viewString.Append("erHour12, T3.steps_StartingTime12, T3.steps_AvarageRunPerHour16, T3.steps_Starti");
            viewString.Append("ngTime16, T3.steps_AvarageRunPerHour24, T3.steps_StartingTime24, T3.steps_Avarag");
            viewString.Append("eRunPerHour32, T3.steps_StartingTime32, T3.steps_AvarageRunPerHourBinding, T3.st");
            viewString.Append("eps_StartingTimeBinding, T3.steps_CostPerUnit4, T3.steps_StartingCost4, T3.steps");
            viewString.Append("_CostPerUnit6, T3.steps_StartingCost6, T3.steps_CostPerUnit8, T3.steps_StartingC");
            viewString.Append("ost8, T3.steps_CostPerUnit12, T3.steps_StartingCost12, T3.steps_CostPerUnit16, T");
            viewString.Append("3.steps_StartingCost16, T3.steps_CostPerUnit24, T3.steps_StartingCost24, T3.step");
            viewString.Append("s_CostPerUnit32, T3.steps_StartingCost32, T3.steps_BindingCost, T3._from0, T3._f");
            viewString.Append("rom1, T4._from2, T3._from3, T3._from4, T3._from5, T3._from6, T3._from7\r\n        ");
            viewString.Append("    FROM  ( (\r\n                    SELECT \r\n                        T.IdStep AS ");
            viewString.Append("steps_IdStep, \r\n                        TREAT(T AS [dbModel.AvarageRunPerRunStep");
            viewString.Append("]).AvarageRunPerHour AS steps_AvarageRunPerHour, \r\n                        TREAT");
            viewString.Append("(T AS [dbModel.CostPerMqStep]).CostPerUnit AS steps_CostPerUnit, \r\n             ");
            viewString.Append("           TREAT(T AS [dbModel.DeficitOnCostForWeightStep]).DeficitRate AS steps");
            viewString.Append("_DeficitRate, \r\n                        CAST(NULL AS [Edm.Int64]) AS steps_Avara");
            viewString.Append("geRunPerHour4, \r\n                        CAST(NULL AS [Edm.Time]) AS steps_Start");
            viewString.Append("ingTime4, \r\n                        CAST(NULL AS [Edm.Int64]) AS steps_AvarageRu");
            viewString.Append("nPerHour6, \r\n                        CAST(NULL AS [Edm.Time]) AS steps_StartingT");
            viewString.Append("ime6, \r\n                        CAST(NULL AS [Edm.Int64]) AS steps_AvarageRunPer");
            viewString.Append("Hour8, \r\n                        CAST(NULL AS [Edm.Time]) AS steps_StartingTime8");
            viewString.Append(", \r\n                        CAST(NULL AS [Edm.Int64]) AS steps_AvarageRunPerHour");
            viewString.Append("12, \r\n                        CAST(NULL AS [Edm.Time]) AS steps_StartingTime12, ");
            viewString.Append("\r\n                        CAST(NULL AS [Edm.Int64]) AS steps_AvarageRunPerHour16");
            viewString.Append(", \r\n                        CAST(NULL AS [Edm.Time]) AS steps_StartingTime16, \r\n");
            viewString.Append("                        CAST(NULL AS [Edm.Int64]) AS steps_AvarageRunPerHour24, ");
            viewString.Append("\r\n                        CAST(NULL AS [Edm.Time]) AS steps_StartingTime24, \r\n  ");
            viewString.Append("                      CAST(NULL AS [Edm.Int64]) AS steps_AvarageRunPerHour32, \r\n");
            viewString.Append("                        CAST(NULL AS [Edm.Time]) AS steps_StartingTime32, \r\n    ");
            viewString.Append("                    CAST(NULL AS [Edm.Int64]) AS steps_AvarageRunPerHourBinding,");
            viewString.Append(" \r\n                        CAST(NULL AS [Edm.Time]) AS steps_StartingTimeBinding");
            viewString.Append(", \r\n                        TREAT(T AS [dbModel.BindingCostPerRunStep]).CostPerU");
            viewString.Append("nit4 AS steps_CostPerUnit4, \r\n                        TREAT(T AS [dbModel.Bindin");
            viewString.Append("gCostPerRunStep]).StartingCost4 AS steps_StartingCost4, \r\n                      ");
            viewString.Append("  TREAT(T AS [dbModel.BindingCostPerRunStep]).CostPerUnit6 AS steps_CostPerUnit6");
            viewString.Append(", \r\n                        TREAT(T AS [dbModel.BindingCostPerRunStep]).Starting");
            viewString.Append("Cost6 AS steps_StartingCost6, \r\n                        TREAT(T AS [dbModel.Bind");
            viewString.Append("ingCostPerRunStep]).CostPerUnit8 AS steps_CostPerUnit8, \r\n                      ");
            viewString.Append("  TREAT(T AS [dbModel.BindingCostPerRunStep]).StartingCost8 AS steps_StartingCos");
            viewString.Append("t8, \r\n                        TREAT(T AS [dbModel.BindingCostPerRunStep]).CostPe");
            viewString.Append("rUnit12 AS steps_CostPerUnit12, \r\n                        TREAT(T AS [dbModel.Bi");
            viewString.Append("ndingCostPerRunStep]).StartingCost12 AS steps_StartingCost12, \r\n                ");
            viewString.Append("        TREAT(T AS [dbModel.BindingCostPerRunStep]).CostPerUnit16 AS steps_CostP");
            viewString.Append("erUnit16, \r\n                        TREAT(T AS [dbModel.BindingCostPerRunStep]).");
            viewString.Append("StartingCost16 AS steps_StartingCost16, \r\n                        TREAT(T AS [db");
            viewString.Append("Model.BindingCostPerRunStep]).CostPerUnit24 AS steps_CostPerUnit24, \r\n          ");
            viewString.Append("              TREAT(T AS [dbModel.BindingCostPerRunStep]).StartingCost24 AS step");
            viewString.Append("s_StartingCost24, \r\n                        TREAT(T AS [dbModel.BindingCostPerRu");
            viewString.Append("nStep]).CostPerUnit32 AS steps_CostPerUnit32, \r\n                        TREAT(T ");
            viewString.Append("AS [dbModel.BindingCostPerRunStep]).StartingCost32 AS steps_StartingCost32, \r\n  ");
            viewString.Append("                      TREAT(T AS [dbModel.BindingCostPerRunStep]).BindingCost AS");
            viewString.Append(" steps_BindingCost, \r\n                        False AS _from0, \r\n               ");
            viewString.Append("         CASE WHEN T IS OF (ONLY [dbModel.BindingCostPerRunStep]) THEN True ELSE");
            viewString.Append(" False END AS _from1, \r\n                        CASE WHEN T IS OF (ONLY [dbModel");
            viewString.Append(".AvarageRunPerRunStep]) THEN True ELSE False END AS _from3, \r\n                  ");
            viewString.Append("      False AS _from4, \r\n                        False AS _from5, \r\n            ");
            viewString.Append("            CASE WHEN T IS OF (ONLY [dbModel.CostPerMqStep]) THEN True ELSE Fals");
            viewString.Append("e END AS _from6, \r\n                        CASE WHEN T IS OF (ONLY [dbModel.Defi");
            viewString.Append("citOnCostForWeightStep]) THEN True ELSE False END AS _from7\r\n                   ");
            viewString.Append(" FROM dbEntities.steps AS T\r\n                    WHERE (T IS OF (ONLY [dbModel.A");
            viewString.Append("varageRunPerRunStep]) OR T IS OF (ONLY [dbModel.CostPerMqStep]) OR T IS OF (ONLY");
            viewString.Append(" [dbModel.DeficitOnCostForWeightStep]) OR T IS OF (ONLY [dbModel.BindingCostPerR");
            viewString.Append("unStep])))\r\n                    UNION ALL (\r\n                    SELECT \r\n      ");
            viewString.Append("                  T.IdStep AS steps_IdStep, \r\n                        CAST(NULL ");
            viewString.Append("AS [Edm.Int64]) AS steps_AvarageRunPerHour, \r\n                        TREAT(T AS");
            viewString.Append(" [dbModel.CostPerRunStep]).CostPerUnit AS steps_CostPerUnit, \r\n                 ");
            viewString.Append("       TREAT(T AS [dbModel.DeficitForWeightStep]).DeficitRate AS steps_DeficitRa");
            viewString.Append("te, \r\n                        TREAT(T AS [dbModel.BindingAvarageRunPerRunStep]).");
            viewString.Append("AvarageRunPerHour4 AS steps_AvarageRunPerHour4, \r\n                        TREAT(");
            viewString.Append("T AS [dbModel.BindingAvarageRunPerRunStep]).StartingTime4 AS steps_StartingTime4");
            viewString.Append(", \r\n                        TREAT(T AS [dbModel.BindingAvarageRunPerRunStep]).Av");
            viewString.Append("arageRunPerHour6 AS steps_AvarageRunPerHour6, \r\n                        TREAT(T ");
            viewString.Append("AS [dbModel.BindingAvarageRunPerRunStep]).StartingTime6 AS steps_StartingTime6, ");
            viewString.Append("\r\n                        TREAT(T AS [dbModel.BindingAvarageRunPerRunStep]).Avar");
            viewString.Append("ageRunPerHour8 AS steps_AvarageRunPerHour8, \r\n                        TREAT(T AS");
            viewString.Append(" [dbModel.BindingAvarageRunPerRunStep]).StartingTime8 AS steps_StartingTime8, \r\n");
            viewString.Append("                        TREAT(T AS [dbModel.BindingAvarageRunPerRunStep]).Avarag");
            viewString.Append("eRunPerHour12 AS steps_AvarageRunPerHour12, \r\n                        TREAT(T AS");
            viewString.Append(" [dbModel.BindingAvarageRunPerRunStep]).StartingTime12 AS steps_StartingTime12, ");
            viewString.Append("\r\n                        TREAT(T AS [dbModel.BindingAvarageRunPerRunStep]).Avar");
            viewString.Append("ageRunPerHour16 AS steps_AvarageRunPerHour16, \r\n                        TREAT(T ");
            viewString.Append("AS [dbModel.BindingAvarageRunPerRunStep]).StartingTime16 AS steps_StartingTime16");
            viewString.Append(", \r\n                        TREAT(T AS [dbModel.BindingAvarageRunPerRunStep]).Av");
            viewString.Append("arageRunPerHour24 AS steps_AvarageRunPerHour24, \r\n                        TREAT(");
            viewString.Append("T AS [dbModel.BindingAvarageRunPerRunStep]).StartingTime24 AS steps_StartingTime");
            viewString.Append("24, \r\n                        TREAT(T AS [dbModel.BindingAvarageRunPerRunStep]).");
            viewString.Append("AvarageRunPerHour32 AS steps_AvarageRunPerHour32, \r\n                        TREA");
            viewString.Append("T(T AS [dbModel.BindingAvarageRunPerRunStep]).StartingTime32 AS steps_StartingTi");
            viewString.Append("me32, \r\n                        TREAT(T AS [dbModel.BindingAvarageRunPerRunStep]");
            viewString.Append(").AvarageRunPerHourBinding AS steps_AvarageRunPerHourBinding, \r\n                ");
            viewString.Append("        TREAT(T AS [dbModel.BindingAvarageRunPerRunStep]).StartingTimeBinding AS");
            viewString.Append(" steps_StartingTimeBinding, \r\n                        CAST(NULL AS [Edm.Double])");
            viewString.Append(" AS steps_CostPerUnit4, \r\n                        CAST(NULL AS [Edm.Double]) AS ");
            viewString.Append("steps_StartingCost4, \r\n                        CAST(NULL AS [Edm.Double]) AS ste");
            viewString.Append("ps_CostPerUnit6, \r\n                        CAST(NULL AS [Edm.Double]) AS steps_S");
            viewString.Append("tartingCost6, \r\n                        CAST(NULL AS [Edm.Double]) AS steps_Cost");
            viewString.Append("PerUnit8, \r\n                        CAST(NULL AS [Edm.Double]) AS steps_Starting");
            viewString.Append("Cost8, \r\n                        CAST(NULL AS [Edm.Double]) AS steps_CostPerUnit");
            viewString.Append("12, \r\n                        CAST(NULL AS [Edm.Double]) AS steps_StartingCost12");
            viewString.Append(", \r\n                        CAST(NULL AS [Edm.Double]) AS steps_CostPerUnit16, \r");
            viewString.Append("\n                        CAST(NULL AS [Edm.Double]) AS steps_StartingCost16, \r\n ");
            viewString.Append("                       CAST(NULL AS [Edm.Double]) AS steps_CostPerUnit24, \r\n    ");
            viewString.Append("                    CAST(NULL AS [Edm.Double]) AS steps_StartingCost24, \r\n      ");
            viewString.Append("                  CAST(NULL AS [Edm.Double]) AS steps_CostPerUnit32, \r\n         ");
            viewString.Append("               CAST(NULL AS [Edm.Double]) AS steps_StartingCost32, \r\n           ");
            viewString.Append("             CAST(NULL AS [Edm.Double]) AS steps_BindingCost, \r\n                ");
            viewString.Append("        CASE WHEN T IS OF (ONLY [dbModel.BindingAvarageRunPerRunStep]) THEN True");
            viewString.Append(" ELSE False END AS _from0, \r\n                        False AS _from1, \r\n        ");
            viewString.Append("                False AS _from3, \r\n                        CASE WHEN T IS OF (ON");
            viewString.Append("LY [dbModel.CostPerRunStep]) THEN True ELSE False END AS _from4, \r\n             ");
            viewString.Append("           CASE WHEN T IS OF (ONLY [dbModel.DeficitForWeightStep]) THEN True ELS");
            viewString.Append("E False END AS _from5, \r\n                        False AS _from6, \r\n            ");
            viewString.Append("            False AS _from7\r\n                    FROM dbEntities.steps AS T\r\n   ");
            viewString.Append("                 WHERE (T IS OF (ONLY [dbModel.CostPerRunStep]) OR T IS OF (ONLY");
            viewString.Append(" [dbModel.DeficitForWeightStep]) OR T IS OF (ONLY [dbModel.BindingAvarageRunPerR");
            viewString.Append("unStep])))) AS T3\r\n                INNER JOIN (\r\n                SELECT \r\n      ");
            viewString.Append("              T.TimeStampTable AS steps_TimeStampTable, \r\n                    T.");
            viewString.Append("CodTaskEstimatedOn AS steps_CodTaskEstimatedOn, \r\n                    T.IdStep A");
            viewString.Append("S steps_IdStep, \r\n                    T.FromUnit AS steps_FromUnit, \r\n          ");
            viewString.Append("          T.ToUnit AS steps_ToUnit, \r\n                    True AS _from2\r\n      ");
            viewString.Append("          FROM dbEntities.steps AS T) AS T4\r\n                ON T3.steps_IdStep ");
            viewString.Append("= T4.steps_IdStep\r\n        ) AS T5\r\n    ) AS T6");
            return new System.Collections.Generic.KeyValuePair<string, string>("dbModelStoreContainer.steps", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for dbModelStoreContainer.articlecost
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView3()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(15573);
            viewString.Append("\r\n    SELECT VALUE -- Constructing articlecost\r\n        [dbModel.Store.articleco");
            viewString.Append("st](T10.articlecost_TimeStampTable, T10.articlecost_CodArticleCost, T10.articlec");
            viewString.Append("ost_CodArticle, T10.articlecost_SelectorArticleCost, T10.articlecost_CostPerKg, ");
            viewString.Append("T10.articlecost_CostPerSheet, T10.articlecost_CostPerUnit, T10.articlecost_Selec");
            viewString.Append("torArticleSheetPrintableCost, T10.articlecost_UseTheSameCostOfPalletAfterKg, T10");
            viewString.Append(".articlecost_UseTheSameCostOfSheetAfterSheet, T10.articlecost_KgPallet, T10.arti");
            viewString.Append("clecost_KgSheet, T10.articlecost_CostPerMq, T10.articlecost_CostPerMl, T10.artic");
            viewString.Append("lecost_SelectorArticleRollPrintableCost, T10.articlecost_UseTheSameCostOfStandar");
            viewString.Append("dWidthAfterKg, T10.articlecost_UseTheSameCostOfStandardWidthAfterMl, T10.article");
            viewString.Append("cost_Kg, T10.articlecost_Ml, T10.articlecost_SelectorArticleRigidPrintableCost, ");
            viewString.Append("T10.articlecost_SelectorArticleObjectPrintableCost)\r\n    FROM (\r\n        SELECT ");
            viewString.Append("-- Constructing SelectorArticleCost\r\n            T9.articlecost_TimeStampTable, ");
            viewString.Append("\r\n            T9.articlecost_CodArticleCost, \r\n            T9.articlecost_CodArt");
            viewString.Append("icle, \r\n            CASE\r\n                WHEN T9._from3 THEN CAST(\'0\' AS [Edm.I");
            viewString.Append("nt32])\r\n                WHEN T9._from4 THEN CAST(\'1\' AS [Edm.Int32])\r\n          ");
            viewString.Append("      WHEN T9._from5 THEN CAST(\'2\' AS [Edm.Int32])\r\n                ELSE CAST(\'3");
            viewString.Append("\' AS [Edm.Int32])\r\n            END AS articlecost_SelectorArticleCost, \r\n       ");
            viewString.Append("     T9.articlecost_CostPerKg, \r\n            T9.articlecost_CostPerSheet, \r\n    ");
            viewString.Append("        T9.articlecost_CostPerUnit, \r\n            T9.articlecost_SelectorArticle");
            viewString.Append("SheetPrintableCost, \r\n            T9.articlecost_UseTheSameCostOfPalletAfterKg, ");
            viewString.Append("\r\n            T9.articlecost_UseTheSameCostOfSheetAfterSheet, \r\n            T9.a");
            viewString.Append("rticlecost_KgPallet, \r\n            T9.articlecost_KgSheet, \r\n            T9.arti");
            viewString.Append("clecost_CostPerMq, \r\n            T9.articlecost_CostPerMl, \r\n            T9.arti");
            viewString.Append("clecost_SelectorArticleRollPrintableCost, \r\n            T9.articlecost_UseTheSam");
            viewString.Append("eCostOfStandardWidthAfterKg, \r\n            T9.articlecost_UseTheSameCostOfStanda");
            viewString.Append("rdWidthAfterMl, \r\n            T9.articlecost_Kg, \r\n            T9.articlecost_Ml");
            viewString.Append(", \r\n            T9.articlecost_SelectorArticleRigidPrintableCost, \r\n            ");
            viewString.Append("T9.articlecost_SelectorArticleObjectPrintableCost\r\n        FROM (\r\n            S");
            viewString.Append("ELECT -- Constructing SelectorArticleSheetPrintableCost\r\n                T8.arti");
            viewString.Append("clecost_TimeStampTable, \r\n                T8.articlecost_CodArticleCost, \r\n     ");
            viewString.Append("           T8.articlecost_CodArticle, \r\n                T8.articlecost_CostPerKg");
            viewString.Append(", \r\n                T8.articlecost_CostPerSheet, \r\n                T8.articlecos");
            viewString.Append("t_CostPerUnit, \r\n                CASE\r\n                    WHEN T8._from7 THEN C");
            viewString.Append("AST(\'0\' AS [Edm.Int32])\r\n                    WHEN T8._from0 THEN CAST(\'1\' AS [Ed");
            viewString.Append("m.Int32])\r\n                    WHEN T8._from9 THEN CAST(\'2\' AS [Edm.Int32])\r\n   ");
            viewString.Append("             END AS articlecost_SelectorArticleSheetPrintableCost, \r\n           ");
            viewString.Append("     T8.articlecost_UseTheSameCostOfPalletAfterKg, \r\n                T8.articlec");
            viewString.Append("ost_UseTheSameCostOfSheetAfterSheet, \r\n                T8.articlecost_KgPallet, ");
            viewString.Append("\r\n                T8.articlecost_KgSheet, \r\n                T8.articlecost_CostP");
            viewString.Append("erMq, \r\n                T8.articlecost_CostPerMl, \r\n                T8.articleco");
            viewString.Append("st_SelectorArticleRollPrintableCost, \r\n                T8.articlecost_UseTheSame");
            viewString.Append("CostOfStandardWidthAfterKg, \r\n                T8.articlecost_UseTheSameCostOfSta");
            viewString.Append("ndardWidthAfterMl, \r\n                T8.articlecost_Kg, \r\n                T8.art");
            viewString.Append("iclecost_Ml, \r\n                T8.articlecost_SelectorArticleRigidPrintableCost,");
            viewString.Append(" \r\n                T8.articlecost_SelectorArticleObjectPrintableCost, \r\n        ");
            viewString.Append("        T8._from3, \r\n                T8._from4, \r\n                T8._from5\r\n   ");
            viewString.Append("         FROM (\r\n                SELECT -- Constructing SelectorArticleRollPrint");
            viewString.Append("ableCost\r\n                    T7.articlecost_TimeStampTable, \r\n                 ");
            viewString.Append("   T7.articlecost_CodArticleCost, \r\n                    T7.articlecost_CodArticl");
            viewString.Append("e, \r\n                    T7.articlecost_CostPerKg, \r\n                    T7.arti");
            viewString.Append("clecost_CostPerSheet, \r\n                    T7.articlecost_CostPerUnit, \r\n      ");
            viewString.Append("              T7.articlecost_UseTheSameCostOfPalletAfterKg, \r\n                  ");
            viewString.Append("  T7.articlecost_UseTheSameCostOfSheetAfterSheet, \r\n                    T7.artic");
            viewString.Append("lecost_KgPallet, \r\n                    T7.articlecost_KgSheet, \r\n               ");
            viewString.Append("     T7.articlecost_CostPerMq, \r\n                    T7.articlecost_CostPerMl, \r");
            viewString.Append("\n                    CASE\r\n                        WHEN T7._from8 THEN CAST(\'0\' ");
            viewString.Append("AS [Edm.Int32])\r\n                        WHEN T7._from1 THEN CAST(\'1\' AS [Edm.In");
            viewString.Append("t32])\r\n                    END AS articlecost_SelectorArticleRollPrintableCost, ");
            viewString.Append("\r\n                    T7.articlecost_UseTheSameCostOfStandardWidthAfterKg, \r\n   ");
            viewString.Append("                 T7.articlecost_UseTheSameCostOfStandardWidthAfterMl, \r\n        ");
            viewString.Append("            T7.articlecost_Kg, \r\n                    T7.articlecost_Ml, \r\n      ");
            viewString.Append("              T7.articlecost_SelectorArticleRigidPrintableCost, \r\n              ");
            viewString.Append("      T7.articlecost_SelectorArticleObjectPrintableCost, \r\n                    T");
            viewString.Append("7._from0, \r\n                    T7._from3, \r\n                    T7._from4, \r\n  ");
            viewString.Append("                  T7._from5, \r\n                    T7._from7, \r\n                ");
            viewString.Append("    T7._from9\r\n                FROM (\r\n                    SELECT -- Constructin");
            viewString.Append("g SelectorArticleRigidPrintableCost\r\n                        T6.articlecost_Time");
            viewString.Append("StampTable, \r\n                        T6.articlecost_CodArticleCost, \r\n         ");
            viewString.Append("               T6.articlecost_CodArticle, \r\n                        T6.articleco");
            viewString.Append("st_CostPerKg, \r\n                        T6.articlecost_CostPerSheet, \r\n         ");
            viewString.Append("               T6.articlecost_CostPerUnit, \r\n                        T6.articlec");
            viewString.Append("ost_UseTheSameCostOfPalletAfterKg, \r\n                        T6.articlecost_UseT");
            viewString.Append("heSameCostOfSheetAfterSheet, \r\n                        T6.articlecost_KgPallet, ");
            viewString.Append("\r\n                        T6.articlecost_KgSheet, \r\n                        T6.a");
            viewString.Append("rticlecost_CostPerMq, \r\n                        T6.articlecost_CostPerMl, \r\n    ");
            viewString.Append("                    T6.articlecost_UseTheSameCostOfStandardWidthAfterKg, \r\n     ");
            viewString.Append("                   T6.articlecost_UseTheSameCostOfStandardWidthAfterMl, \r\n      ");
            viewString.Append("                  T6.articlecost_Kg, \r\n                        T6.articlecost_Ml");
            viewString.Append(", \r\n                        CASE\r\n                            WHEN T6._from11 TH");
            viewString.Append("EN CAST(\'0\' AS [Edm.Int32])\r\n                        END AS articlecost_Selector");
            viewString.Append("ArticleRigidPrintableCost, \r\n                        T6.articlecost_SelectorArti");
            viewString.Append("cleObjectPrintableCost, \r\n                        T6._from0, \r\n                 ");
            viewString.Append("       T6._from1, \r\n                        T6._from3, \r\n                       ");
            viewString.Append(" T6._from4, \r\n                        T6._from5, \r\n                        T6._f");
            viewString.Append("rom7, \r\n                        T6._from8, \r\n                        T6._from9\r\n");
            viewString.Append("                    FROM (\r\n                        SELECT -- Constructing Selec");
            viewString.Append("torArticleObjectPrintableCost\r\n                            T5.articlecost_TimeSt");
            viewString.Append("ampTable, \r\n                            T5.articlecost_CodArticleCost, \r\n       ");
            viewString.Append("                     T5.articlecost_CodArticle, \r\n                            T5");
            viewString.Append(".articlecost_CostPerKg, \r\n                            T5.articlecost_CostPerShee");
            viewString.Append("t, \r\n                            T5.articlecost_CostPerUnit, \r\n                 ");
            viewString.Append("           T5.articlecost_UseTheSameCostOfPalletAfterKg, \r\n                     ");
            viewString.Append("       T5.articlecost_UseTheSameCostOfSheetAfterSheet, \r\n                       ");
            viewString.Append("     T5.articlecost_KgPallet, \r\n                            T5.articlecost_KgShe");
            viewString.Append("et, \r\n                            T5.articlecost_CostPerMq, \r\n                  ");
            viewString.Append("          T5.articlecost_CostPerMl, \r\n                            T5.articlecost");
            viewString.Append("_UseTheSameCostOfStandardWidthAfterKg, \r\n                            T5.articlec");
            viewString.Append("ost_UseTheSameCostOfStandardWidthAfterMl, \r\n                            T5.artic");
            viewString.Append("lecost_Kg, \r\n                            T5.articlecost_Ml, \r\n                  ");
            viewString.Append("          CASE\r\n                                WHEN T5._from10 THEN CAST(\'0\' AS");
            viewString.Append(" [Edm.Int32])\r\n                            END AS articlecost_SelectorArticleObj");
            viewString.Append("ectPrintableCost, \r\n                            T5._from0, \r\n                   ");
            viewString.Append("         T5._from1, \r\n                            T5._from3, \r\n                 ");
            viewString.Append("           T5._from4, \r\n                            T5._from5, \r\n               ");
            viewString.Append("             T5._from7, \r\n                            T5._from8, \r\n             ");
            viewString.Append("               T5._from9, \r\n                            T5._from11\r\n            ");
            viewString.Append("            FROM (\r\n                            SELECT T4.articlecost_TimeStampT");
            viewString.Append("able, T3.articlecost_CodArticleCost, T4.articlecost_CodArticle, T4.articlecost_C");
            viewString.Append("ostPerKg, T4.articlecost_CostPerSheet, T3.articlecost_CostPerUnit, T3.articlecos");
            viewString.Append("t_UseTheSameCostOfPalletAfterKg, T3.articlecost_UseTheSameCostOfSheetAfterSheet,");
            viewString.Append(" T3.articlecost_KgPallet, T3.articlecost_KgSheet, T3.articlecost_CostPerMq, T3.a");
            viewString.Append("rticlecost_CostPerMl, T4.articlecost_UseTheSameCostOfStandardWidthAfterKg, T4.ar");
            viewString.Append("ticlecost_UseTheSameCostOfStandardWidthAfterMl, T4.articlecost_Kg, T4.articlecos");
            viewString.Append("t_Ml, T3._from0, T4._from1, T4._from2, T4._from3, T3._from4, T3._from5, T3._from");
            viewString.Append("6, T3._from7, T4._from8, T3._from9, T4._from10, T4._from11\r\n                    ");
            viewString.Append("        FROM  ( (\r\n                                    SELECT \r\n                ");
            viewString.Append("                        T.CodArticleCost AS articlecost_CodArticleCost, \r\n      ");
            viewString.Append("                                  TREAT(T AS [dbModel.ObjectPrintableArticleCost");
            viewString.Append("]).CostPerUnit AS articlecost_CostPerUnit, \r\n                                   ");
            viewString.Append("     CAST(NULL AS [Edm.Boolean]) AS articlecost_UseTheSameCostOfPalletAfterKg, \r");
            viewString.Append("\n                                        CAST(NULL AS [Edm.Boolean]) AS articlec");
            viewString.Append("ost_UseTheSameCostOfSheetAfterSheet, \r\n                                        C");
            viewString.Append("AST(NULL AS [Edm.Int32]) AS articlecost_KgPallet, \r\n                            ");
            viewString.Append("            CAST(NULL AS [Edm.Int32]) AS articlecost_KgSheet, \r\n                ");
            viewString.Append("                        TREAT(T AS [dbModel.RollPrintableArticleCost]).CostPerMq");
            viewString.Append(" AS articlecost_CostPerMq, \r\n                                        TREAT(T AS ");
            viewString.Append("[dbModel.RollPrintableArticleCost]).CostPerMl AS articlecost_CostPerMl, \r\n      ");
            viewString.Append("                                  False AS _from0, \r\n                           ");
            viewString.Append("             CASE WHEN (T IS OF (ONLY [dbModel.RollPrintableArticleStandardCost]");
            viewString.Append(") OR T IS OF (ONLY [dbModel.RollPrintableArticleCuttedCost])) THEN True ELSE Fal");
            viewString.Append("se END AS _from4, \r\n                                        False AS _from5, \r\n ");
            viewString.Append("                                       CASE WHEN T IS OF (ONLY [dbModel.ObjectPr");
            viewString.Append("intableArticleStandardCost]) THEN True ELSE False END AS _from6, \r\n             ");
            viewString.Append("                           CASE WHEN T IS OF (ONLY [dbModel.SheetPrintableArticl");
            viewString.Append("ePakedCost]) THEN True ELSE False END AS _from7, \r\n                             ");
            viewString.Append("           False AS _from9\r\n                                    FROM dbEntities.");
            viewString.Append("articlecost AS T\r\n                                    WHERE (T IS OF (ONLY [dbMo");
            viewString.Append("del.SheetPrintableArticlePakedCost]) OR T IS OF (ONLY [dbModel.RollPrintableArti");
            viewString.Append("cleStandardCost]) OR T IS OF (ONLY [dbModel.RollPrintableArticleCuttedCost]) OR ");
            viewString.Append("T IS OF (ONLY [dbModel.ObjectPrintableArticleStandardCost])))\r\n                 ");
            viewString.Append("                   UNION ALL (\r\n                                    SELECT \r\n   ");
            viewString.Append("                                     T.CodArticleCost AS articlecost_CodArticleC");
            viewString.Append("ost, \r\n                                        CAST(NULL AS [Edm.String]) AS art");
            viewString.Append("iclecost_CostPerUnit, \r\n                                        TREAT(T AS [dbMo");
            viewString.Append("del.SheetPrintableArticleCuttedCost]).UseTheSameCostOfPalletAfterKg AS articleco");
            viewString.Append("st_UseTheSameCostOfPalletAfterKg, \r\n                                        TREA");
            viewString.Append("T(T AS [dbModel.SheetPrintableArticleCuttedCost]).UseTheSameCostOfSheetAfterShee");
            viewString.Append("t AS articlecost_UseTheSameCostOfSheetAfterSheet, \r\n                            ");
            viewString.Append("            TREAT(T AS [dbModel.SheetPrintableArticleCuttedCost]).KgPallet AS ar");
            viewString.Append("ticlecost_KgPallet, \r\n                                        TREAT(T AS [dbMode");
            viewString.Append("l.SheetPrintableArticleCuttedCost]).KgSheet AS articlecost_KgSheet, \r\n          ");
            viewString.Append("                              TREAT(T AS [dbModel.RigidPrintableArticleCost]).Co");
            viewString.Append("stPerMq AS articlecost_CostPerMq, \r\n                                        CAST");
            viewString.Append("(NULL AS [Edm.String]) AS articlecost_CostPerMl, \r\n                             ");
            viewString.Append("           CASE WHEN T IS OF (ONLY [dbModel.SheetPrintableArticleCuttedCost]) TH");
            viewString.Append("EN True ELSE False END AS _from0, \r\n                                        Fals");
            viewString.Append("e AS _from4, \r\n                                        CASE WHEN T IS OF (ONLY [");
            viewString.Append("dbModel.RigidPrintableArticleStandardCost]) THEN True ELSE False END AS _from5, ");
            viewString.Append("\r\n                                        False AS _from6, \r\n                   ");
            viewString.Append("                     False AS _from7, \r\n                                        ");
            viewString.Append("CASE WHEN T IS OF (ONLY [dbModel.SheetPrintableArticlePalletCost]) THEN True ELS");
            viewString.Append("E False END AS _from9\r\n                                    FROM dbEntities.artic");
            viewString.Append("lecost AS T\r\n                                    WHERE (T IS OF (ONLY [dbModel.S");
            viewString.Append("heetPrintableArticleCuttedCost]) OR T IS OF (ONLY [dbModel.SheetPrintableArticle");
            viewString.Append("PalletCost]) OR T IS OF (ONLY [dbModel.RigidPrintableArticleStandardCost])))) AS");
            viewString.Append(" T3\r\n                                INNER JOIN (\r\n                             ");
            viewString.Append("   SELECT \r\n                                    T.TimeStampTable AS articlecost_");
            viewString.Append("TimeStampTable, \r\n                                    T.CodArticleCost AS articl");
            viewString.Append("ecost_CodArticleCost, \r\n                                    T.CodArticle AS arti");
            viewString.Append("clecost_CodArticle, \r\n                                    TREAT(T AS [dbModel.Sh");
            viewString.Append("eetPrintableArticleCost]).CostPerKg AS articlecost_CostPerKg, \r\n                ");
            viewString.Append("                    TREAT(T AS [dbModel.SheetPrintableArticleCost]).CostPerSheet");
            viewString.Append(" AS articlecost_CostPerSheet, \r\n                                    TREAT(T AS [");
            viewString.Append("dbModel.RollPrintableArticleCuttedCost]).UseTheSameCostOfStandardWidthAfterKg AS");
            viewString.Append(" articlecost_UseTheSameCostOfStandardWidthAfterKg, \r\n                           ");
            viewString.Append("         TREAT(T AS [dbModel.RollPrintableArticleCuttedCost]).UseTheSameCostOfSt");
            viewString.Append("andardWidthAfterMl AS articlecost_UseTheSameCostOfStandardWidthAfterMl, \r\n      ");
            viewString.Append("                              TREAT(T AS [dbModel.RollPrintableArticleCuttedCost");
            viewString.Append("]).Kg AS articlecost_Kg, \r\n                                    TREAT(T AS [dbMod");
            viewString.Append("el.RollPrintableArticleCuttedCost]).Ml AS articlecost_Ml, \r\n                    ");
            viewString.Append("                CASE WHEN T IS OF (ONLY [dbModel.RollPrintableArticleCuttedCost]");
            viewString.Append(") THEN True ELSE False END AS _from1, \r\n                                    True");
            viewString.Append(" AS _from2, \r\n                                    CASE WHEN (T IS OF (ONLY [dbMo");
            viewString.Append("del.SheetPrintableArticlePakedCost]) OR T IS OF (ONLY [dbModel.SheetPrintableArt");
            viewString.Append("icleCuttedCost]) OR T IS OF (ONLY [dbModel.SheetPrintableArticlePalletCost])) TH");
            viewString.Append("EN True ELSE False END AS _from3, \r\n                                    CASE WHE");
            viewString.Append("N T IS OF (ONLY [dbModel.RollPrintableArticleStandardCost]) THEN True ELSE False");
            viewString.Append(" END AS _from8, \r\n                                    CASE WHEN T IS OF (ONLY [d");
            viewString.Append("bModel.ObjectPrintableArticleStandardCost]) THEN True ELSE False END AS _from10,");
            viewString.Append(" \r\n                                    CASE WHEN T IS OF (ONLY [dbModel.RigidPri");
            viewString.Append("ntableArticleStandardCost]) THEN True ELSE False END AS _from11\r\n               ");
            viewString.Append("                 FROM dbEntities.articlecost AS T) AS T4\r\n                      ");
            viewString.Append("          ON T3.articlecost_CodArticleCost = T4.articlecost_CodArticleCost\r\n    ");
            viewString.Append("                    ) AS T5\r\n                    ) AS T6\r\n                ) AS T");
            viewString.Append("7\r\n            ) AS T8\r\n        ) AS T9\r\n    ) AS T10");
            return new System.Collections.Generic.KeyValuePair<string, string>("dbModelStoreContainer.articlecost", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for dbModelStoreContainer.articles
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView4()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(11096);
            viewString.Append("\r\n    SELECT VALUE -- Constructing articles\r\n        [dbModel.Store.articles](T1");
            viewString.Append("0.articles_TimeStampTable, T10.articles_CodArticle, T10.articles_ArticleName, T1");
            viewString.Append("0.articles_CodSupplierBuy, T10.articles_CodSupplierMaker, T10.articles_SupplierM");
            viewString.Append("aker, T10.articles_UnitOfMeasure, T10.articles_SelectorPrintable, T10.articles_T");
            viewString.Append("ypeOfMaterial, T10.articles_NameOfMaterial, T10.articles_Color, T10.articles_Wei");
            viewString.Append("ght, T10.articles_Hand, T10.articles_SelectorSheetRollWide, T10.articles_Format,");
            viewString.Append(" T10.articles_NoPinza, T10.articles_NoBv, T10.articles_SheetPerPacked, T10.artic");
            viewString.Append("les_SheetPerPallet, T10.articles_Width, T10.articles_Thikness, T10.articles_Size");
            viewString.Append(", T10.articles_PrintableFormat, T10.articles_MqForafait)\r\n    FROM (\r\n        SE");
            viewString.Append("LECT -- Constructing SelectorPrintable\r\n            T9.articles_TimeStampTable, ");
            viewString.Append("\r\n            T9.articles_CodArticle, \r\n            T9.articles_ArticleName, \r\n ");
            viewString.Append("           T9.articles_CodSupplierBuy, \r\n            T9.articles_CodSupplierMake");
            viewString.Append("r, \r\n            T9.articles_SupplierMaker, \r\n            T9.articles_UnitOfMeas");
            viewString.Append("ure, \r\n            CASE\r\n                WHEN T9._from0 THEN CAST(\'0\' AS [Edm.In");
            viewString.Append("t32])\r\n                ELSE CAST(\'1\' AS [Edm.Int32])\r\n            END AS article");
            viewString.Append("s_SelectorPrintable, \r\n            T9.articles_TypeOfMaterial, \r\n            T9.");
            viewString.Append("articles_NameOfMaterial, \r\n            T9.articles_Color, \r\n            T9.artic");
            viewString.Append("les_Weight, \r\n            T9.articles_Hand, \r\n            T9.articles_SelectorSh");
            viewString.Append("eetRollWide, \r\n            T9.articles_Format, \r\n            T9.articles_NoPinza");
            viewString.Append(", \r\n            T9.articles_NoBv, \r\n            T9.articles_SheetPerPacked, \r\n  ");
            viewString.Append("          T9.articles_SheetPerPallet, \r\n            T9.articles_Width, \r\n       ");
            viewString.Append("     T9.articles_Thikness, \r\n            T9.articles_Size, \r\n            T9.arti");
            viewString.Append("cles_PrintableFormat, \r\n            T9.articles_MqForafait\r\n        FROM (\r\n    ");
            viewString.Append("        SELECT -- Constructing SelectorSheetRollWide\r\n                T8.article");
            viewString.Append("s_TimeStampTable, \r\n                T8.articles_CodArticle, \r\n                T8");
            viewString.Append(".articles_ArticleName, \r\n                T8.articles_CodSupplierBuy, \r\n         ");
            viewString.Append("       T8.articles_CodSupplierMaker, \r\n                T8.articles_SupplierMaker");
            viewString.Append(", \r\n                T8.articles_UnitOfMeasure, \r\n                T8.articles_Typ");
            viewString.Append("eOfMaterial, \r\n                T8.articles_NameOfMaterial, \r\n                T8.");
            viewString.Append("articles_Color, \r\n                T8.articles_Weight, \r\n                T8.artic");
            viewString.Append("les_Hand, \r\n                CASE\r\n                    WHEN T8._from2 THEN CAST(\'");
            viewString.Append("0\' AS [Edm.Int32])\r\n                    WHEN T8._from4 THEN CAST(\'1\' AS [Edm.Int");
            viewString.Append("32])\r\n                    WHEN T8._from6 THEN CAST(\'2\' AS [Edm.Int32])\r\n        ");
            viewString.Append("            WHEN T8._from5 THEN CAST(\'3\' AS [Edm.Int32])\r\n                END AS");
            viewString.Append(" articles_SelectorSheetRollWide, \r\n                T8.articles_Format, \r\n       ");
            viewString.Append("         T8.articles_NoPinza, \r\n                T8.articles_NoBv, \r\n            ");
            viewString.Append("    T8.articles_SheetPerPacked, \r\n                T8.articles_SheetPerPallet, \r\n");
            viewString.Append("                T8.articles_Width, \r\n                T8.articles_Thikness, \r\n   ");
            viewString.Append("             T8.articles_Size, \r\n                T8.articles_PrintableFormat, \r\n");
            viewString.Append("                T8.articles_MqForafait, \r\n                T8._from0\r\n           ");
            viewString.Append(" FROM (\r\n                SELECT T6.articles_TimeStampTable, T6.articles_CodArtic");
            viewString.Append("le, T6.articles_ArticleName, T6.articles_CodSupplierBuy, T6.articles_CodSupplier");
            viewString.Append("Maker, CASE\r\n                        WHEN (T6._from1 OR T6._from2 OR T6._from3 O");
            viewString.Append("R T6._from4 OR T6._from5 OR T6._from6) THEN T6.articles_SupplierMaker\r\n         ");
            viewString.Append("               ELSE T7.articles_SupplierMaker\r\n                    END AS articl");
            viewString.Append("es_SupplierMaker, T6.articles_UnitOfMeasure, T7.articles_TypeOfMaterial, T7.arti");
            viewString.Append("cles_NameOfMaterial, T7.articles_Color, T7.articles_Weight, T7.articles_Hand, T6");
            viewString.Append(".articles_Format, T6.articles_NoPinza, T7.articles_NoBv, T6.articles_SheetPerPac");
            viewString.Append("ked, T6.articles_SheetPerPallet, T6.articles_Width, T7.articles_Thikness, T6.art");
            viewString.Append("icles_Size, T6.articles_PrintableFormat, T6.articles_MqForafait, (T7._from0 AND ");
            viewString.Append("T7._from0 IS NOT NULL) AS _from0, T6._from1, T6._from2, T6._from3, T6._from4, T6");
            viewString.Append("._from5, T6._from6\r\n                FROM  (\r\n                    SELECT T5.artic");
            viewString.Append("les_TimeStampTable, T4.articles_CodArticle, T5.articles_ArticleName, T5.articles");
            viewString.Append("_CodSupplierBuy, T5.articles_CodSupplierMaker, T4.articles_SupplierMaker, T5.art");
            viewString.Append("icles_UnitOfMeasure, T4.articles_Format, T4.articles_NoPinza, T4.articles_SheetP");
            viewString.Append("erPacked, T4.articles_SheetPerPallet, T4.articles_Width, T4.articles_Size, T4.ar");
            viewString.Append("ticles_PrintableFormat, T4.articles_MqForafait, T5._from1, T4._from2, T4._from3,");
            viewString.Append(" T4._from4, T4._from5, T4._from6\r\n                    FROM  ( (\r\n               ");
            viewString.Append("             SELECT \r\n                                T.CodArticle AS articles_C");
            viewString.Append("odArticle, \r\n                                CAST(NULL AS [Edm.String]) AS artic");
            viewString.Append("les_SupplierMaker, \r\n                                TREAT(T AS [dbModel.SheetPr");
            viewString.Append("intableArticle]).Format AS articles_Format, \r\n                                TR");
            viewString.Append("EAT(T AS [dbModel.SheetPrintableArticle]).NoPinza AS articles_NoPinza, \r\n       ");
            viewString.Append("                         TREAT(T AS [dbModel.SheetPrintableArticle]).SheetPerPac");
            viewString.Append("ked AS articles_SheetPerPacked, \r\n                                TREAT(T AS [db");
            viewString.Append("Model.SheetPrintableArticle]).SheetPerPallet AS articles_SheetPerPallet, \r\n     ");
            viewString.Append("                           CAST(NULL AS [Edm.Double]) AS articles_Width, \r\n     ");
            viewString.Append("                           CAST(NULL AS [Edm.String]) AS articles_Size, \r\n      ");
            viewString.Append("                          CAST(NULL AS [Edm.String]) AS articles_PrintableFormat");
            viewString.Append(", \r\n                                CAST(NULL AS [Edm.Double]) AS articles_MqFor");
            viewString.Append("afait, \r\n                                True AS _from2, \r\n                     ");
            viewString.Append("           False AS _from3, \r\n                                False AS _from4, \r");
            viewString.Append("\n                                False AS _from5, \r\n                            ");
            viewString.Append("    False AS _from6\r\n                            FROM dbEntities.articles AS T\r\n");
            viewString.Append("                            WHERE T IS OF (ONLY [dbModel.SheetPrintableArticle])");
            viewString.Append(")\r\n                            UNION ALL (\r\n                            SELECT \r");
            viewString.Append("\n                                T.CodArticle AS articles_CodArticle, \r\n        ");
            viewString.Append("                        TREAT(T AS [dbModel.NoPrintable]).SupplierMaker AS artic");
            viewString.Append("les_SupplierMaker, \r\n                                TREAT(T AS [dbModel.RigidPr");
            viewString.Append("intableArticle]).Format AS articles_Format, \r\n                                CA");
            viewString.Append("ST(NULL AS [Edm.Boolean]) AS articles_NoPinza, \r\n                               ");
            viewString.Append(" CAST(NULL AS [Edm.Int64]) AS articles_SheetPerPacked, \r\n                       ");
            viewString.Append("         CAST(NULL AS [Edm.Int64]) AS articles_SheetPerPallet, \r\n               ");
            viewString.Append("                 CAST(NULL AS [Edm.Double]) AS articles_Width, \r\n               ");
            viewString.Append("                 TREAT(T AS [dbModel.ObjectPrintableArticle]).Size AS articles_S");
            viewString.Append("ize, \r\n                                TREAT(T AS [dbModel.ObjectPrintableArticl");
            viewString.Append("e]).PrintableFormat AS articles_PrintableFormat, \r\n                             ");
            viewString.Append("   TREAT(T AS [dbModel.NoPrintable]).MqForafait AS articles_MqForafait, \r\n      ");
            viewString.Append("                          False AS _from2, \r\n                                CAS");
            viewString.Append("E WHEN T IS OF (ONLY [dbModel.NoPrintable]) THEN True ELSE False END AS _from3, ");
            viewString.Append("\r\n                                False AS _from4, \r\n                           ");
            viewString.Append("     CASE WHEN T IS OF (ONLY [dbModel.ObjectPrintableArticle]) THEN True ELSE Fa");
            viewString.Append("lse END AS _from5, \r\n                                CASE WHEN T IS OF (ONLY [db");
            viewString.Append("Model.RigidPrintableArticle]) THEN True ELSE False END AS _from6\r\n              ");
            viewString.Append("              FROM dbEntities.articles AS T\r\n                            WHERE (");
            viewString.Append("T IS OF (ONLY [dbModel.NoPrintable]) OR T IS OF (ONLY [dbModel.RigidPrintableArt");
            viewString.Append("icle]) OR T IS OF (ONLY [dbModel.ObjectPrintableArticle])))\r\n                   ");
            viewString.Append("         UNION ALL (\r\n                            SELECT \r\n                     ");
            viewString.Append("           T.CodArticle AS articles_CodArticle, \r\n                              ");
            viewString.Append("  CAST(NULL AS [Edm.String]) AS articles_SupplierMaker, \r\n                      ");
            viewString.Append("          CAST(NULL AS [Edm.String]) AS articles_Format, \r\n                     ");
            viewString.Append("           CAST(NULL AS [Edm.Boolean]) AS articles_NoPinza, \r\n                  ");
            viewString.Append("              CAST(NULL AS [Edm.Int64]) AS articles_SheetPerPacked, \r\n          ");
            viewString.Append("                      CAST(NULL AS [Edm.Int64]) AS articles_SheetPerPallet, \r\n  ");
            viewString.Append("                              TREAT(T AS [dbModel.RollPrintableArticle]).Width A");
            viewString.Append("S articles_Width, \r\n                                CAST(NULL AS [Edm.String]) A");
            viewString.Append("S articles_Size, \r\n                                CAST(NULL AS [Edm.String]) AS");
            viewString.Append(" articles_PrintableFormat, \r\n                                TREAT(T AS [dbModel");
            viewString.Append(".RollPrintableArticle]).MqForafait AS articles_MqForafait, \r\n                   ");
            viewString.Append("             False AS _from2, \r\n                                False AS _from3,");
            viewString.Append(" \r\n                                True AS _from4, \r\n                           ");
            viewString.Append("     False AS _from5, \r\n                                False AS _from6\r\n       ");
            viewString.Append("                     FROM dbEntities.articles AS T\r\n                            ");
            viewString.Append("WHERE T IS OF (ONLY [dbModel.RollPrintableArticle]))) AS T4\r\n                   ");
            viewString.Append("     INNER JOIN (\r\n                        SELECT \r\n                            ");
            viewString.Append("T.TimeStampTable AS articles_TimeStampTable, \r\n                            T.Cod");
            viewString.Append("Article AS articles_CodArticle, \r\n                            T.ArticleName AS a");
            viewString.Append("rticles_ArticleName, \r\n                            T.CodSupplierBuy AS articles_");
            viewString.Append("CodSupplierBuy, \r\n                            T.CodSupplierMaker AS articles_Cod");
            viewString.Append("SupplierMaker, \r\n                            T.UnitOfMeasure AS articles_UnitOfM");
            viewString.Append("easure, \r\n                            True AS _from1\r\n                        FR");
            viewString.Append("OM dbEntities.articles AS T) AS T5\r\n                        ON T4.articles_CodAr");
            viewString.Append("ticle = T5.articles_CodArticle) AS T6\r\n                    LEFT OUTER JOIN (\r\n  ");
            viewString.Append("                  SELECT \r\n                        T.CodArticle AS articles_CodA");
            viewString.Append("rticle, \r\n                        TREAT(T AS [dbModel.Printable]).SupplierMaker ");
            viewString.Append("AS articles_SupplierMaker, \r\n                        TREAT(T AS [dbModel.Printab");
            viewString.Append("le]).TypeOfMaterial AS articles_TypeOfMaterial, \r\n                        TREAT(");
            viewString.Append("T AS [dbModel.Printable]).NameOfMaterial AS articles_NameOfMaterial, \r\n         ");
            viewString.Append("               TREAT(T AS [dbModel.Printable]).Color AS articles_Color, \r\n      ");
            viewString.Append("                  TREAT(T AS [dbModel.Printable]).Weight AS articles_Weight, \r\n ");
            viewString.Append("                       TREAT(T AS [dbModel.Printable]).Hand AS articles_Hand, \r\n");
            viewString.Append("                        TREAT(T AS [dbModel.Printable]).NoBv AS articles_NoBv, \r");
            viewString.Append("\n                        TREAT(T AS [dbModel.Printable]).Thikness AS articles_Th");
            viewString.Append("ikness, \r\n                        True AS _from0\r\n                    FROM dbEnt");
            viewString.Append("ities.articles AS T\r\n                    WHERE (T IS OF (ONLY [dbModel.SheetPrin");
            viewString.Append("tableArticle]) OR T IS OF (ONLY [dbModel.RollPrintableArticle]) OR T IS OF (ONLY");
            viewString.Append(" [dbModel.RigidPrintableArticle]) OR T IS OF (ONLY [dbModel.ObjectPrintableArtic");
            viewString.Append("le]))) AS T7\r\n                    ON T6.articles_CodArticle = T7.articles_CodArt");
            viewString.Append("icle\r\n            ) AS T8\r\n        ) AS T9\r\n    ) AS T10");
            return new System.Collections.Generic.KeyValuePair<string, string>("dbModelStoreContainer.articles", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for dbModelStoreContainer.customersupplierbases
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView5()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("dbModelStoreContainer.customersupplierbases", "\r\n    SELECT VALUE -- Constructing customersupplierbases\r\n        [dbModel.Store." +
                    "customersupplierbases](T1.customersupplierbases_TimeStampTable, T1.customersuppl" +
                    "ierbases_CodCustomerSupplier, T1.customersupplierbases_CodCustomerSupplierBase, " +
                    "T1.customersupplierbases_CodTypeOfBase, T1.customersupplierbases_Address, T1.cus" +
                    "tomersupplierbases_City, T1.customersupplierbases_Province, T1.customersupplierb" +
                    "ases_PostalCode, T1.customersupplierbases_Country, T1.customersupplierbases_Phon" +
                    "e, T1.customersupplierbases_Fax, T1.customersupplierbases_Email, T1.customersupp" +
                    "lierbases_Note, T1.customersupplierbases_Referee, T1.customersupplierbases_Pec)\r" +
                    "\n    FROM (\r\n        SELECT \r\n            T.TimeStampTable AS customersupplierba" +
                    "ses_TimeStampTable, \r\n            T.CodCustomerSupplier AS customersupplierbases" +
                    "_CodCustomerSupplier, \r\n            T.CodCustomerSupplierBase AS customersupplie" +
                    "rbases_CodCustomerSupplierBase, \r\n            T.CodTypeOfBase AS customersupplie" +
                    "rbases_CodTypeOfBase, \r\n            T.Address AS customersupplierbases_Address, " +
                    "\r\n            T.City AS customersupplierbases_City, \r\n            T.Province AS " +
                    "customersupplierbases_Province, \r\n            T.PostalCode AS customersupplierba" +
                    "ses_PostalCode, \r\n            T.Country AS customersupplierbases_Country, \r\n    " +
                    "        T.Phone AS customersupplierbases_Phone, \r\n            T.Fax AS customers" +
                    "upplierbases_Fax, \r\n            T.Email AS customersupplierbases_Email, \r\n      " +
                    "      T.Note AS customersupplierbases_Note, \r\n            T.Referee AS customers" +
                    "upplierbases_Referee, \r\n            T.Pec AS customersupplierbases_Pec, \r\n      " +
                    "      True AS _from0\r\n        FROM dbEntities.customersupplierbases AS T\r\n    ) " +
                    "AS T1");
        }
        
        /// <Summary>
        /// return view for dbModelStoreContainer.customersuppliers
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView6()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("dbModelStoreContainer.customersuppliers", "\r\n    SELECT VALUE -- Constructing customersuppliers\r\n        [dbModel.Store.cust" +
                    "omersuppliers](T2.customersuppliers_TimeStampTable, T2.customersuppliers_CodCust" +
                    "omerSupplier, T2.customersuppliers_Selector, T2.customersuppliers_BusinessName, " +
                    "T2.customersuppliers_VatNumber, T2.customersuppliers_TaxCode, T2.customersupplie" +
                    "rs_Outdated)\r\n    FROM (\r\n        SELECT -- Constructing Selector\r\n            T" +
                    "1.customersuppliers_TimeStampTable, \r\n            T1.customersuppliers_CodCustom" +
                    "erSupplier, \r\n            CASE\r\n                WHEN T1._from1 THEN CAST(\'0\' AS " +
                    "[Edm.Int32])\r\n                ELSE CAST(\'1\' AS [Edm.Int32])\r\n            END AS " +
                    "customersuppliers_Selector, \r\n            T1.customersuppliers_BusinessName, \r\n " +
                    "           T1.customersuppliers_VatNumber, \r\n            T1.customersuppliers_Ta" +
                    "xCode, \r\n            T1.customersuppliers_Outdated\r\n        FROM (\r\n            " +
                    "SELECT \r\n                T.TimeStampTable AS customersuppliers_TimeStampTable, \r" +
                    "\n                T.CodCustomerSupplier AS customersuppliers_CodCustomerSupplier," +
                    " \r\n                T.BusinessName AS customersuppliers_BusinessName, \r\n         " +
                    "       T.VatNumber AS customersuppliers_VatNumber, \r\n                T.TaxCode A" +
                    "S customersuppliers_TaxCode, \r\n                T.Outdated AS customersuppliers_O" +
                    "utdated, \r\n                True AS _from0, \r\n                CASE WHEN T IS OF (" +
                    "ONLY [dbModel.Customer]) THEN True ELSE False END AS _from1, \r\n                C" +
                    "ASE WHEN T IS OF (ONLY [dbModel.Supplier]) THEN True ELSE False END AS _from2\r\n " +
                    "           FROM dbEntities.customersuppliers AS T\r\n        ) AS T1\r\n    ) AS T2");
        }
        
        /// <Summary>
        /// return view for dbModelStoreContainer.typeofbase
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView7()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("dbModelStoreContainer.typeofbase", @"
    SELECT VALUE -- Constructing typeofbase
        [dbModel.Store.typeofbase](T1.typeofbase_TimeStampTable, T1.typeofbase_CodTypeOfBase, T1.typeofbase_BaseName)
    FROM (
        SELECT 
            T.TimeStampTable AS typeofbase_TimeStampTable, 
            T.CodTypeOfBase AS typeofbase_CodTypeOfBase, 
            T.BaseName AS typeofbase_BaseName, 
            True AS _from0
        FROM dbEntities.typeofbase AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for dbModelStoreContainer.productparts
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView8()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3283);
            viewString.Append("\r\n    SELECT VALUE -- Constructing productparts\r\n        [dbModel.Store.productp");
            viewString.Append("arts](T2.productparts_TimeStampTable, T2.productparts_CodProductPart, T2.product");
            viewString.Append("parts_CodProduct, T2.productparts_ProductPartName, T2.productparts_PrintingType,");
            viewString.Append(" T2.[productparts.CodProductPart_], T2.productparts_Format, T2.productparts_Sele");
            viewString.Append("ctorProductPart, T2.productparts_SubjectNumber, T2.productparts_RawCut, T2.produ");
            viewString.Append("ctparts_WidthWings, T2.productparts_Back, T2.productparts_FormatOpened, T2.produ");
            viewString.Append("ctparts_Pages, T2.productparts_ServicesNumber)\r\n    FROM (\r\n        SELECT -- Co");
            viewString.Append("nstructing SelectorProductPart\r\n            T1.productparts_TimeStampTable, \r\n  ");
            viewString.Append("          T1.productparts_CodProductPart, \r\n            T1.productparts_CodProdu");
            viewString.Append("ct, \r\n            T1.productparts_ProductPartName, \r\n            T1.productparts");
            viewString.Append("_PrintingType, \r\n            T1.[productparts.CodProductPart_], \r\n            T1");
            viewString.Append(".productparts_Format, \r\n            CASE\r\n                WHEN T1._from2 THEN CA");
            viewString.Append("ST(\'0\' AS [Edm.Int32])\r\n                WHEN T1._from1 THEN CAST(\'1\' AS [Edm.Int");
            viewString.Append("32])\r\n                WHEN T1._from3 THEN CAST(\'2\' AS [Edm.Int32])\r\n            ");
            viewString.Append("    WHEN T1._from4 THEN CAST(\'3\' AS [Edm.Int32])\r\n                WHEN T1._from5");
            viewString.Append(" THEN CAST(\'4\' AS [Edm.Int32])\r\n            END AS productparts_SelectorProductP");
            viewString.Append("art, \r\n            T1.productparts_SubjectNumber, \r\n            T1.productparts_");
            viewString.Append("RawCut, \r\n            T1.productparts_WidthWings, \r\n            T1.productparts_");
            viewString.Append("Back, \r\n            T1.productparts_FormatOpened, \r\n            T1.productparts_");
            viewString.Append("Pages, \r\n            T1.productparts_ServicesNumber\r\n        FROM (\r\n           ");
            viewString.Append(" SELECT \r\n                T.TimeStampTable AS productparts_TimeStampTable, \r\n   ");
            viewString.Append("             T.CodProductPart AS productparts_CodProductPart, \r\n                ");
            viewString.Append("T.CodProduct AS productparts_CodProduct, \r\n                T.ProductPartName AS ");
            viewString.Append("productparts_ProductPartName, \r\n                T.PrintingType AS productparts_P");
            viewString.Append("rintingType, \r\n                T.CodProductPart_ AS [productparts.CodProductPart");
            viewString.Append("_], \r\n                T.Format AS productparts_Format, \r\n                T.Subje");
            viewString.Append("ctNumber AS productparts_SubjectNumber, \r\n                TREAT(T AS [dbModel.Pr");
            viewString.Append("oductPartSingleSheet]).RawCut AS productparts_RawCut, \r\n                TREAT(T ");
            viewString.Append("AS [dbModel.ProductPartCoverSheet]).WidthWings AS productparts_WidthWings, \r\n   ");
            viewString.Append("             TREAT(T AS [dbModel.ProductPartCoverSheet]).Back AS productparts_Ba");
            viewString.Append("ck, \r\n                T.FormatOpened AS productparts_FormatOpened, \r\n           ");
            viewString.Append("     TREAT(T AS [dbModel.ProductPartBookSheet]).Pages AS productparts_Pages, \r\n ");
            viewString.Append("               T.ServicesNumber AS productparts_ServicesNumber, \r\n              ");
            viewString.Append("  True AS _from0, \r\n                CASE WHEN T IS OF (ONLY [dbModel.ProductPart");
            viewString.Append("CoverSheet]) THEN True ELSE False END AS _from1, \r\n                CASE WHEN T I");
            viewString.Append("S OF (ONLY [dbModel.ProductPartSingleSheet]) THEN True ELSE False END AS _from2,");
            viewString.Append(" \r\n                CASE WHEN T IS OF (ONLY [dbModel.ProductPartBookSheet]) THEN ");
            viewString.Append("True ELSE False END AS _from3, \r\n                CASE WHEN T IS OF (ONLY [dbMode");
            viewString.Append("l.ProductPartBlockSheet]) THEN True ELSE False END AS _from4, \r\n                ");
            viewString.Append("CASE WHEN T IS OF (ONLY [dbModel.ProductPartRigid]) THEN True ELSE False END AS ");
            viewString.Append("_from5\r\n            FROM dbEntities.ProductParts AS T\r\n        ) AS T1\r\n    ) AS");
            viewString.Append(" T2");
            return new System.Collections.Generic.KeyValuePair<string, string>("dbModelStoreContainer.productparts", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for dbModelStoreContainer.productpartsprintablearticle
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView9()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2475);
            viewString.Append("\r\n    SELECT VALUE -- Constructing productpartsprintablearticle\r\n        [dbMode");
            viewString.Append("l.Store.productpartsprintablearticle](T2.productpartsprintablearticle_TimeStampT");
            viewString.Append("able, T2.productpartsprintablearticle_CodProductPartPrintableArticle, T2.product");
            viewString.Append("partsprintablearticle_CodProductPart, T2.productpartsprintablearticle_ProductPar");
            viewString.Append("tPrintableArticleName, T2.productpartsprintablearticle_SelectorProductPartPrinta");
            viewString.Append("bleArticle, T2.productpartsprintablearticle_TypeOfMaterial, T2.productpartsprint");
            viewString.Append("ablearticle_NameOfMaterial, T2.productpartsprintablearticle_Color, T2.productpar");
            viewString.Append("tsprintablearticle_Weight)\r\n    FROM (\r\n        SELECT -- Constructing SelectorP");
            viewString.Append("roductPartPrintableArticle\r\n            T1.productpartsprintablearticle_TimeStam");
            viewString.Append("pTable, \r\n            T1.productpartsprintablearticle_CodProductPartPrintableArt");
            viewString.Append("icle, \r\n            T1.productpartsprintablearticle_CodProductPart, \r\n          ");
            viewString.Append("  T1.productpartsprintablearticle_ProductPartPrintableArticleName, \r\n           ");
            viewString.Append(" CASE\r\n                WHEN T1._from1 THEN CAST(\'0\' AS [Edm.Int32])\r\n           ");
            viewString.Append("     ELSE CAST(\'1\' AS [Edm.Int32])\r\n            END AS productpartsprintablearti");
            viewString.Append("cle_SelectorProductPartPrintableArticle, \r\n            T1.productpartsprintablea");
            viewString.Append("rticle_TypeOfMaterial, \r\n            T1.productpartsprintablearticle_NameOfMater");
            viewString.Append("ial, \r\n            T1.productpartsprintablearticle_Color, \r\n            T1.produ");
            viewString.Append("ctpartsprintablearticle_Weight\r\n        FROM (\r\n            SELECT \r\n           ");
            viewString.Append("     T.TimeStampTable AS productpartsprintablearticle_TimeStampTable, \r\n        ");
            viewString.Append("        T.CodProductPartPrintableArticle AS productpartsprintablearticle_CodProd");
            viewString.Append("uctPartPrintableArticle, \r\n                T.CodProductPart AS productpartsprint");
            viewString.Append("ablearticle_CodProductPart, \r\n                T.ProductPartPrintableArticleName ");
            viewString.Append("AS productpartsprintablearticle_ProductPartPrintableArticleName, \r\n             ");
            viewString.Append("   T.TypeOfMaterial AS productpartsprintablearticle_TypeOfMaterial, \r\n          ");
            viewString.Append("      T.NameOfMaterial AS productpartsprintablearticle_NameOfMaterial, \r\n       ");
            viewString.Append("         T.Color AS productpartsprintablearticle_Color, \r\n                T.Weig");
            viewString.Append("ht AS productpartsprintablearticle_Weight, \r\n                True AS _from0, \r\n ");
            viewString.Append("               CASE WHEN T IS OF (ONLY [dbModel.ProductPartSheetArticle]) THEN T");
            viewString.Append("rue ELSE False END AS _from1, \r\n                CASE WHEN T IS OF (ONLY [dbModel");
            viewString.Append(".ProductPartRigidArticle]) THEN True ELSE False END AS _from2\r\n            FROM ");
            viewString.Append("dbEntities.ProductPartsPrintableArticles AS T\r\n        ) AS T1\r\n    ) AS T2");
            return new System.Collections.Generic.KeyValuePair<string, string>("dbModelStoreContainer.productpartsprintablearticle", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for dbModelStoreContainer.productparttasks
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView10()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("dbModelStoreContainer.productparttasks", @"
    SELECT VALUE -- Constructing productparttasks
        [dbModel.Store.productparttasks](T1.productparttasks_TimeStampTable, T1.productparttasks_CodProductPartTask, T1.productparttasks_CodProductPart, T1.productparttasks_CodOptionTypeOfTask, T1.productparttasks_Hidden, T1.productparttasks_IndexOf)
    FROM (
        SELECT 
            T.TimeStampTable AS productparttasks_TimeStampTable, 
            T.CodProductPartTask AS productparttasks_CodProductPartTask, 
            T.CodProductPart AS productparttasks_CodProductPart, 
            T.CodOptionTypeOfTask AS productparttasks_CodOptionTypeOfTask, 
            T.Hidden AS productparttasks_Hidden, 
            T.IndexOf AS productparttasks_IndexOf, 
            True AS _from0
        FROM dbEntities.ProductPartTasks AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for dbModelStoreContainer.products
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView11()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3152);
            viewString.Append("\r\n    SELECT VALUE -- Constructing products\r\n        [dbModel.Store.products](T7");
            viewString.Append(".products_TimeStampTable, T7.products_CodProduct, T7.products_SelectorProduct, T");
            viewString.Append("7.products_ProductName, T7.products_id, T7.products_Format)\r\n    FROM (\r\n       ");
            viewString.Append(" SELECT -- Constructing SelectorProduct\r\n            T6.products_TimeStampTable,");
            viewString.Append(" \r\n            T6.products_CodProduct, \r\n            CASE\r\n                WHEN ");
            viewString.Append("T6._from4 THEN CAST(\'0\' AS [Edm.Int32])\r\n                WHEN T6._from1 THEN CAS");
            viewString.Append("T(\'1\' AS [Edm.Int32])\r\n                WHEN T6._from2 THEN CAST(\'2\' AS [Edm.Int3");
            viewString.Append("2])\r\n                ELSE CAST(\'3\' AS [Edm.Int32])\r\n            END AS products_");
            viewString.Append("SelectorProduct, \r\n            T6.products_ProductName, \r\n            T6.product");
            viewString.Append("s_id, \r\n            T6.products_Format\r\n        FROM (\r\n            SELECT T5.pr");
            viewString.Append("oducts_TimeStampTable, T4.products_CodProduct, T5.products_ProductName, T5.produ");
            viewString.Append("cts_id, T4.products_Format, T5._from0, T4._from1, T4._from2, T4._from3, T4._from");
            viewString.Append("4\r\n            FROM  ( (\r\n                    SELECT \r\n                        T");
            viewString.Append(".CodProduct AS products_CodProduct, \r\n                        TREAT(T AS [dbMode");
            viewString.Append("l.ProductBookSheet]).Format AS products_Format, \r\n                        CASE W");
            viewString.Append("HEN T IS OF (ONLY [dbModel.ProductBookSheet]) THEN True ELSE False END AS _from1");
            viewString.Append(", \r\n                        False AS _from2, \r\n                        False AS ");
            viewString.Append("_from3, \r\n                        CASE WHEN T IS OF (ONLY [dbModel.ProductSingle");
            viewString.Append("Sheet]) THEN True ELSE False END AS _from4\r\n                    FROM dbEntities.");
            viewString.Append("Products AS T\r\n                    WHERE (T IS OF (ONLY [dbModel.ProductSingleSh");
            viewString.Append("eet]) OR T IS OF (ONLY [dbModel.ProductBookSheet])))\r\n                    UNION ");
            viewString.Append("ALL (\r\n                    SELECT \r\n                        T.CodProduct AS prod");
            viewString.Append("ucts_CodProduct, \r\n                        TREAT(T AS [dbModel.ProductBlockSheet");
            viewString.Append("]).Format AS products_Format, \r\n                        False AS _from1, \r\n     ");
            viewString.Append("                   True AS _from2, \r\n                        False AS _from3, \r\n");
            viewString.Append("                        False AS _from4\r\n                    FROM dbEntities.Pro");
            viewString.Append("ducts AS T\r\n                    WHERE T IS OF (ONLY [dbModel.ProductBlockSheet])");
            viewString.Append(")\r\n                    UNION ALL (\r\n                    SELECT \r\n               ");
            viewString.Append("         T.CodProduct AS products_CodProduct, \r\n                        TREAT(T ");
            viewString.Append("AS [dbModel.ProductRigid]).Format AS products_Format, \r\n                        ");
            viewString.Append("False AS _from1, \r\n                        False AS _from2, \r\n                  ");
            viewString.Append("      True AS _from3, \r\n                        False AS _from4\r\n               ");
            viewString.Append("     FROM dbEntities.Products AS T\r\n                    WHERE T IS OF (ONLY [dbM");
            viewString.Append("odel.ProductRigid]))) AS T4\r\n                INNER JOIN (\r\n                SELEC");
            viewString.Append("T \r\n                    T.TimeStampTable AS products_TimeStampTable, \r\n         ");
            viewString.Append("           T.CodProduct AS products_CodProduct, \r\n                    T.ProductN");
            viewString.Append("ame AS products_ProductName, \r\n                    T.CodMenuProduct AS products_");
            viewString.Append("id, \r\n                    True AS _from0\r\n                FROM dbEntities.Produc");
            viewString.Append("ts AS T) AS T5\r\n                ON T4.products_CodProduct = T5.products_CodProdu");
            viewString.Append("ct\r\n        ) AS T6\r\n    ) AS T7");
            return new System.Collections.Generic.KeyValuePair<string, string>("dbModelStoreContainer.products", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for dbModelStoreContainer.producttasks
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView12()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("dbModelStoreContainer.producttasks", @"
    SELECT VALUE -- Constructing producttasks
        [dbModel.Store.producttasks](T1.producttasks_TimeStampTable, T1.producttasks_CodProductTask, T1.producttasks_CodProduct, T1.producttasks_ProductTaskName, T1.producttasks_SelectorProductTask, T1.producttasks_CodOptionTypeOfTask, T1.producttasks_Hidden, T1.producttasks_IndexOf)
    FROM (
        SELECT 
            T.TimeStampTable AS producttasks_TimeStampTable, 
            T.CodProductTask AS producttasks_CodProductTask, 
            T.CodProduct AS producttasks_CodProduct, 
            T.ProductTaskName AS producttasks_ProductTaskName, 
            T.SelectorProductTask AS producttasks_SelectorProductTask, 
            T.CodOptionTypeOfTask AS producttasks_CodOptionTypeOfTask, 
            T.Hidden AS producttasks_Hidden, 
            T.IndexOf AS producttasks_IndexOf, 
            True AS _from0
        FROM dbEntities.ProductTasks AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for dbModelStoreContainer.taskexecutortypeoftask
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView13()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("dbModelStoreContainer.taskexecutortypeoftask", @"
    SELECT VALUE -- Constructing taskexecutortypeoftask
        [dbModel.Store.taskexecutortypeoftask](T1.taskexecutortypeoftask_TimeStampTable, T1.taskexecutortypeoftask_CodTaskExecutorTypeOfTask, T1.taskexecutortypeoftask_CodTypeOfTask, T1.taskexecutortypeoftask_CodTaskExecutor)
    FROM (
        SELECT 
            T.TimeStampTable AS taskexecutortypeoftask_TimeStampTable, 
            T.CodTaskExecutorTypeOfTask AS taskexecutortypeoftask_CodTaskExecutorTypeOfTask, 
            T.CodTypeOfTask AS taskexecutortypeoftask_CodTypeOfTask, 
            T.CodTaskExecutor AS taskexecutortypeoftask_CodTaskExecutor, 
            True AS _from0
        FROM dbEntities.TaskExecutorTypeOfTasks AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for dbModelStoreContainer.typeoftask
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView14()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("dbModelStoreContainer.typeoftask", @"
    SELECT VALUE -- Constructing typeoftask
        [dbModel.Store.typeoftask](T1.typeoftask_TimeStampTable, T1.typeoftask_CodTypeOfTask, T1.typeoftask_TaskName, T1.typeoftask_CodCategoryOfTask)
    FROM (
        SELECT 
            T.TimeStampTable AS typeoftask_TimeStampTable, 
            T.CodTypeOfTask AS typeoftask_CodTypeOfTask, 
            T.TaskName AS typeoftask_TaskName, 
            T.CodCategoryOfTask AS typeoftask_CodCategoryOfTask, 
            True AS _from0
        FROM dbEntities.TypeOfTasks AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for dbModelStoreContainer.optiontypeoftask
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView15()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("dbModelStoreContainer.optiontypeoftask", @"
    SELECT VALUE -- Constructing optiontypeoftask
        [dbModel.Store.optiontypeoftask](T1.optiontypeoftask_TimeStampTable, T1.optiontypeoftask_CodOptionTypeOfTask, T1.optiontypeoftask_CodTypeOfTask, T1.optiontypeoftask_OptionName, T1.optiontypeoftask_IdexOf)
    FROM (
        SELECT 
            T.TimeStampTable AS optiontypeoftask_TimeStampTable, 
            T.CodOptionTypeOfTask AS optiontypeoftask_CodOptionTypeOfTask, 
            T.CodTypeOfTask AS optiontypeoftask_CodTypeOfTask, 
            T.OptionName AS optiontypeoftask_OptionName, 
            T.IdexOf AS optiontypeoftask_IdexOf, 
            True AS _from0
        FROM dbEntities.OptionTypeOfTasks AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for dbModelStoreContainer.costs
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView16()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("dbModelStoreContainer.costs", @"
    SELECT VALUE -- Constructing costs
        [dbModel.Store.costs](T1.costs_TimeStampTable, T1.costs_CodCost, T1.costs_CodDocumentProduct, T1.costs_CodProductTask, T1.costs_CodProductPartTask, T1.costs_CodProductPartPrintableArticle, T1.costs_Description, T1.costs_Quantity, T1.costs_UnitCost, T1.costs_TotalCost)
    FROM (
        SELECT 
            T.TimeStampTable AS costs_TimeStampTable, 
            T.CodCost AS costs_CodCost, 
            T.CodDocumentProduct AS costs_CodDocumentProduct, 
            T.CodProductTask AS costs_CodProductTask, 
            T.CodProductPartTask AS costs_CodProductPartTask, 
            T.CodProductPartPrintableArticle AS costs_CodProductPartPrintableArticle, 
            T.Description AS costs_Description, 
            T.Quantity AS costs_Quantity, 
            T.UnitCost AS costs_UnitCost, 
            T.TotalCost AS costs_TotalCost, 
            True AS _from0
        FROM dbEntities.Costs AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for dbModelStoreContainer.documentproducts
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView17()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("dbModelStoreContainer.documentproducts", @"
    SELECT VALUE -- Constructing documentproducts
        [dbModel.Store.documentproducts](T1.documentproducts_TimeStampTable, T1.documentproducts_CodDocumentProduct, T1.documentproducts_CodDocument, T1.documentproducts_ProductName, T1.documentproducts_CodProduct, T1.documentproducts_Quantity, T1.documentproducts_TotalAmount, T1.documentproducts_UnitPrice)
    FROM (
        SELECT 
            T.TimeStampTable AS documentproducts_TimeStampTable, 
            T.CodDocumentProduct AS documentproducts_CodDocumentProduct, 
            T.CodDocument AS documentproducts_CodDocument, 
            T.ProductName AS documentproducts_ProductName, 
            T.CodProduct AS documentproducts_CodProduct, 
            T.Quantity AS documentproducts_Quantity, 
            T.TotalAmount AS documentproducts_TotalAmount, 
            T.UnitPrice AS documentproducts_UnitPrice, 
            True AS _from0
        FROM dbEntities.DocumentProducts AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for dbModelStoreContainer.documents
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView18()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("dbModelStoreContainer.documents", @"
    SELECT VALUE -- Constructing documents
        [dbModel.Store.documents](T1.documents_TimeStampTable, T1.documents_CodDocument, T1.documents_DocumentName, T1.documents_CodCustomer, T1.documents_Customer, T1.documents_SelectorDocument, T1.documents_Number, T1.documents_Notes, T1.documents_DateDocument)
    FROM (
        SELECT 
            T.TimeStampTable AS documents_TimeStampTable, 
            T.CodDocument AS documents_CodDocument, 
            T.DocumentName AS documents_DocumentName, 
            T.CodCustomer AS documents_CodCustomer, 
            T.Customer AS documents_Customer, 
            T.SelectorDocument AS documents_SelectorDocument, 
            T.Number AS documents_Number, 
            T.Notes AS documents_Notes, 
            T.DateDocument AS documents_DateDocument, 
            True AS _from0
        FROM dbEntities.Documents AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for dbModelStoreContainer.productpartstoproducttask
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView19()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("dbModelStoreContainer.productpartstoproducttask", @"
    SELECT VALUE -- Constructing productpartstoproducttask
        [dbModel.Store.productpartstoproducttask](T1.productpartstoproducttask_TimeStampTable, T1.productpartstoproducttask_CodProductPartToProductTask, T1.productpartstoproducttask_CodProductPart, T1.productpartstoproducttask_CodProductTask)
    FROM (
        SELECT 
            T.TimeStampTable AS productpartstoproducttask_TimeStampTable, 
            T.CodProductPartToProductTask AS productpartstoproducttask_CodProductPartToProductTask, 
            T.CodProductPart AS productpartstoproducttask_CodProductPart, 
            T.CodProductTask AS productpartstoproducttask_CodProductTask, 
            True AS _from0
        FROM dbEntities.ProductPartsToProductTasks AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for dbEntities.taskexecutors
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView20()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(9323);
            viewString.Append("\r\n    SELECT VALUE -- Constructing taskexecutors\r\n        CASE\r\n            WHEN");
            viewString.Append(" T1._from3 THEN [dbModel.LithoSheet](T1.TaskExecutor_TimeStampTable, T1.TaskExec");
            viewString.Append("utor_CodTaskExecutor, T1.TaskExecutor_TaskExecutorName, T1.TaskExecutor_Version,");
            viewString.Append(" T1.TaskExecutor_Dismissed, T1.TaskExecutor_FormatMin, T1.TaskExecutor_FormatMax");
            viewString.Append(", T1.TaskExecutor_WeightMin, T1.TaskExecutor_WeightMax, T1.TaskExecutor_Pinza, T");
            viewString.Append("1.TaskExecutor_ControPinza, T1.TaskExecutor_Laterale, T1.TaskExecutor_IsEstimate");
            viewString.Append("dOnTime, T1.TaskExecutor_IsEstimatedOnRun, T1.TaskExecutor_IsEstimatedOnMq, T1.T");
            viewString.Append("askExecutor_IsEstimatedOnTimeBinding, T1.TaskExecutor_IsEstimatedOnRunBinding, T");
            viewString.Append("1.TaskExecutor_CodTypeOfTask, T1.PrinterMachine_InkUsage, T1.PrinterMachine_InkU");
            viewString.Append("sageForfait, T1.Litho_PrintingUnit, T1.Litho_SheetwiseAfterPrintingUnit, T1.Lith");
            viewString.Append("o_Sheetwise, T1.Litho_WashUpTime, T1.Litho_ChangePlateTime, T1.LithoSheet_ProofS");
            viewString.Append("heetFirstStart, T1.LithoSheet_ProofSheetSecondsStart, T1.LithoSheet_ProductionWa");
            viewString.Append("ste)\r\n            WHEN T1._from6 THEN [dbModel.LithoWeb](T1.TaskExecutor_TimeSta");
            viewString.Append("mpTable, T1.TaskExecutor_CodTaskExecutor, T1.TaskExecutor_TaskExecutorName, T1.T");
            viewString.Append("askExecutor_Version, T1.TaskExecutor_Dismissed, T1.TaskExecutor_FormatMin, T1.Ta");
            viewString.Append("skExecutor_FormatMax, T1.TaskExecutor_WeightMin, T1.TaskExecutor_WeightMax, T1.T");
            viewString.Append("askExecutor_Pinza, T1.TaskExecutor_ControPinza, T1.TaskExecutor_Laterale, T1.Tas");
            viewString.Append("kExecutor_IsEstimatedOnTime, T1.TaskExecutor_IsEstimatedOnRun, T1.TaskExecutor_I");
            viewString.Append("sEstimatedOnMq, T1.TaskExecutor_IsEstimatedOnTimeBinding, T1.TaskExecutor_IsEsti");
            viewString.Append("matedOnRunBinding, T1.TaskExecutor_CodTypeOfTask, T1.PrinterMachine_InkUsage, T1");
            viewString.Append(".PrinterMachine_InkUsageForfait, T1.Litho_PrintingUnit, T1.Litho_SheetwiseAfterP");
            viewString.Append("rintingUnit, T1.Litho_Sheetwise, T1.Litho_WashUpTime, T1.Litho_ChangePlateTime, ");
            viewString.Append("T1.LithoWeb_PaperFirstStartLenght)\r\n            WHEN T1._from4 THEN [dbModel.Dig");
            viewString.Append("italSheet](T1.TaskExecutor_TimeStampTable, T1.TaskExecutor_CodTaskExecutor, T1.T");
            viewString.Append("askExecutor_TaskExecutorName, T1.TaskExecutor_Version, T1.TaskExecutor_Dismissed");
            viewString.Append(", T1.TaskExecutor_FormatMin, T1.TaskExecutor_FormatMax, T1.TaskExecutor_WeightMi");
            viewString.Append("n, T1.TaskExecutor_WeightMax, T1.TaskExecutor_Pinza, T1.TaskExecutor_ControPinza");
            viewString.Append(", T1.TaskExecutor_Laterale, T1.TaskExecutor_IsEstimatedOnTime, T1.TaskExecutor_I");
            viewString.Append("sEstimatedOnRun, T1.TaskExecutor_IsEstimatedOnMq, T1.TaskExecutor_IsEstimatedOnT");
            viewString.Append("imeBinding, T1.TaskExecutor_IsEstimatedOnRunBinding, T1.TaskExecutor_CodTypeOfTa");
            viewString.Append("sk, T1.PrinterMachine_InkUsage, T1.PrinterMachine_InkUsageForfait, T1.Digital_BW");
            viewString.Append("Side1, T1.Digital_BWSide2, T1.Digital_ColorSide1, T1.Digital_ColorSide2, T1.Digi");
            viewString.Append("talSheet_ProofSheetFirstStart, T1.DigitalSheet_ProofSheetSecondsStart, T1.Digita");
            viewString.Append("lSheet_ProductionWaste)\r\n            WHEN T1._from7 THEN [dbModel.DigitalWeb](T1");
            viewString.Append(".TaskExecutor_TimeStampTable, T1.TaskExecutor_CodTaskExecutor, T1.TaskExecutor_T");
            viewString.Append("askExecutorName, T1.TaskExecutor_Version, T1.TaskExecutor_Dismissed, T1.TaskExec");
            viewString.Append("utor_FormatMin, T1.TaskExecutor_FormatMax, T1.TaskExecutor_WeightMin, T1.TaskExe");
            viewString.Append("cutor_WeightMax, T1.TaskExecutor_Pinza, T1.TaskExecutor_ControPinza, T1.TaskExec");
            viewString.Append("utor_Laterale, T1.TaskExecutor_IsEstimatedOnTime, T1.TaskExecutor_IsEstimatedOnR");
            viewString.Append("un, T1.TaskExecutor_IsEstimatedOnMq, T1.TaskExecutor_IsEstimatedOnTimeBinding, T");
            viewString.Append("1.TaskExecutor_IsEstimatedOnRunBinding, T1.TaskExecutor_CodTypeOfTask, T1.Printe");
            viewString.Append("rMachine_InkUsage, T1.PrinterMachine_InkUsageForfait, T1.Digital_BWSide1, T1.Dig");
            viewString.Append("ital_BWSide2, T1.Digital_ColorSide1, T1.Digital_ColorSide2, T1.DigitalWeb_PaperF");
            viewString.Append("irstStartLenght)\r\n            WHEN T1._from8 THEN [dbModel.Plotter](T1.TaskExecu");
            viewString.Append("tor_TimeStampTable, T1.TaskExecutor_CodTaskExecutor, T1.TaskExecutor_TaskExecuto");
            viewString.Append("rName, T1.TaskExecutor_Version, T1.TaskExecutor_Dismissed, T1.TaskExecutor_Forma");
            viewString.Append("tMin, T1.TaskExecutor_FormatMax, T1.TaskExecutor_WeightMin, T1.TaskExecutor_Weig");
            viewString.Append("htMax, T1.TaskExecutor_Pinza, T1.TaskExecutor_ControPinza, T1.TaskExecutor_Later");
            viewString.Append("ale, T1.TaskExecutor_IsEstimatedOnTime, T1.TaskExecutor_IsEstimatedOnRun, T1.Tas");
            viewString.Append("kExecutor_IsEstimatedOnMq, T1.TaskExecutor_IsEstimatedOnTimeBinding, T1.TaskExec");
            viewString.Append("utor_IsEstimatedOnRunBinding, T1.TaskExecutor_CodTypeOfTask, T1.PrinterMachine_I");
            viewString.Append("nkUsage, T1.PrinterMachine_InkUsageForfait, T1.Digital_BWSide1, T1.Digital_BWSid");
            viewString.Append("e2, T1.Digital_ColorSide1, T1.Digital_ColorSide2, T1.Plotter_Width)\r\n           ");
            viewString.Append(" WHEN (T1._from9 AND NOT(T1._from10)) THEN [dbModel.PrePostPress](T1.TaskExecuto");
            viewString.Append("r_TimeStampTable, T1.TaskExecutor_CodTaskExecutor, T1.TaskExecutor_TaskExecutorN");
            viewString.Append("ame, T1.TaskExecutor_Version, T1.TaskExecutor_Dismissed, T1.TaskExecutor_FormatM");
            viewString.Append("in, T1.TaskExecutor_FormatMax, T1.TaskExecutor_WeightMin, T1.TaskExecutor_Weight");
            viewString.Append("Max, T1.TaskExecutor_Pinza, T1.TaskExecutor_ControPinza, T1.TaskExecutor_Lateral");
            viewString.Append("e, T1.TaskExecutor_IsEstimatedOnTime, T1.TaskExecutor_IsEstimatedOnRun, T1.TaskE");
            viewString.Append("xecutor_IsEstimatedOnMq, T1.TaskExecutor_IsEstimatedOnTimeBinding, T1.TaskExecut");
            viewString.Append("or_IsEstimatedOnRunBinding, T1.TaskExecutor_CodTypeOfTask, T1.PrePostPress_IsUni");
            viewString.Append("tComputationManual)\r\n            ELSE [dbModel.BindingTsk](T1.TaskExecutor_TimeS");
            viewString.Append("tampTable, T1.TaskExecutor_CodTaskExecutor, T1.TaskExecutor_TaskExecutorName, T1");
            viewString.Append(".TaskExecutor_Version, T1.TaskExecutor_Dismissed, T1.TaskExecutor_FormatMin, T1.");
            viewString.Append("TaskExecutor_FormatMax, T1.TaskExecutor_WeightMin, T1.TaskExecutor_WeightMax, T1");
            viewString.Append(".TaskExecutor_Pinza, T1.TaskExecutor_ControPinza, T1.TaskExecutor_Laterale, T1.T");
            viewString.Append("askExecutor_IsEstimatedOnTime, T1.TaskExecutor_IsEstimatedOnRun, T1.TaskExecutor");
            viewString.Append("_IsEstimatedOnMq, T1.TaskExecutor_IsEstimatedOnTimeBinding, T1.TaskExecutor_IsEs");
            viewString.Append("timatedOnRunBinding, T1.TaskExecutor_CodTypeOfTask, T1.PrePostPress_IsUnitComput");
            viewString.Append("ationManual)\r\n        END\r\n    FROM (\r\n        SELECT \r\n            T.TimeStampT");
            viewString.Append("able AS TaskExecutor_TimeStampTable, \r\n            T.CodTaskExecutor AS TaskExec");
            viewString.Append("utor_CodTaskExecutor, \r\n            T.TaskExecutorName AS TaskExecutor_TaskExecu");
            viewString.Append("torName, \r\n            T.Version AS TaskExecutor_Version, \r\n            T.Dismis");
            viewString.Append("sed AS TaskExecutor_Dismissed, \r\n            T.FormatMin AS TaskExecutor_FormatM");
            viewString.Append("in, \r\n            T.FormatMax AS TaskExecutor_FormatMax, \r\n            T.WeightM");
            viewString.Append("in AS TaskExecutor_WeightMin, \r\n            T.WeightMax AS TaskExecutor_WeightMa");
            viewString.Append("x, \r\n            T.Pinza AS TaskExecutor_Pinza, \r\n            T.ControPinza AS T");
            viewString.Append("askExecutor_ControPinza, \r\n            T.Laterale AS TaskExecutor_Laterale, \r\n  ");
            viewString.Append("          T.IsEstimatedOnTime AS TaskExecutor_IsEstimatedOnTime, \r\n            T");
            viewString.Append(".IsEstimatedOnRun AS TaskExecutor_IsEstimatedOnRun, \r\n            T.IsEstimatedO");
            viewString.Append("nMq AS TaskExecutor_IsEstimatedOnMq, \r\n            T.IsEstimatedOnTimeBinding AS");
            viewString.Append(" TaskExecutor_IsEstimatedOnTimeBinding, \r\n            T.IsEstimatedOnRunBinding ");
            viewString.Append("AS TaskExecutor_IsEstimatedOnRunBinding, \r\n            T.CodTypeOfTask AS TaskEx");
            viewString.Append("ecutor_CodTypeOfTask, \r\n            T.InkUsage AS PrinterMachine_InkUsage, \r\n   ");
            viewString.Append("         T.InkUsageForfait AS PrinterMachine_InkUsageForfait, \r\n            CAST");
            viewString.Append("(T.PrintingUnit AS [Edm.Int16]) AS Litho_PrintingUnit, \r\n            T.Sheetwise");
            viewString.Append("AfterPrintingUnit AS Litho_SheetwiseAfterPrintingUnit, \r\n            T.Sheetwise");
            viewString.Append(" AS Litho_Sheetwise, \r\n            T.WashUpTime AS Litho_WashUpTime, \r\n         ");
            viewString.Append("   T.ChangePlateTime AS Litho_ChangePlateTime, \r\n            T.ProofSheetFirstSt");
            viewString.Append("art AS LithoSheet_ProofSheetFirstStart, \r\n            T.ProofSheetSecondsStart A");
            viewString.Append("S LithoSheet_ProofSheetSecondsStart, \r\n            T.ProductionWaste AS LithoShe");
            viewString.Append("et_ProductionWaste, \r\n            T.PaperFirstStartLenght AS LithoWeb_PaperFirst");
            viewString.Append("StartLenght, \r\n            T.BWSide1 AS Digital_BWSide1, \r\n            T.BWSide2");
            viewString.Append(" AS Digital_BWSide2, \r\n            T.ColorSide1 AS Digital_ColorSide1, \r\n       ");
            viewString.Append("     T.ColorSide2 AS Digital_ColorSide2, \r\n            T.ProofSheetFirstStart AS");
            viewString.Append(" DigitalSheet_ProofSheetFirstStart, \r\n            T.ProofSheetSecondsStart AS Di");
            viewString.Append("gitalSheet_ProofSheetSecondsStart, \r\n            T.ProductionWaste AS DigitalShe");
            viewString.Append("et_ProductionWaste, \r\n            T.PaperFirstStartLenght AS DigitalWeb_PaperFir");
            viewString.Append("stStartLenght, \r\n            T.Width AS Plotter_Width, \r\n            T.IsUnitCom");
            viewString.Append("putationManual AS PrePostPress_IsUnitComputationManual, \r\n            True AS _f");
            viewString.Append("rom0, \r\n            CASE WHEN T.SelectorLithoDigital = CAST(\'0\' AS [Edm.Int32]) ");
            viewString.Append("THEN True ELSE False END AS _from1, \r\n            CASE WHEN T.SelectorLithoDigit");
            viewString.Append("al = CAST(\'1\' AS [Edm.Int32]) THEN True ELSE False END AS _from2, \r\n            ");
            viewString.Append("CASE WHEN T.Selector = CAST(\'0\' AS [Edm.Int32]) THEN True ELSE False END AS _fro");
            viewString.Append("m3, \r\n            CASE WHEN T.Selector = CAST(\'2\' AS [Edm.Int32]) THEN True ELSE");
            viewString.Append(" False END AS _from4, \r\n            CASE WHEN T.SelectorExecutor = CAST(\'0\' AS [");
            viewString.Append("Edm.Int32]) THEN True ELSE False END AS _from5, \r\n            CASE WHEN T.Select");
            viewString.Append("or = CAST(\'1\' AS [Edm.Int32]) THEN True ELSE False END AS _from6, \r\n            ");
            viewString.Append("CASE WHEN T.Selector = CAST(\'3\' AS [Edm.Int32]) THEN True ELSE False END AS _fro");
            viewString.Append("m7, \r\n            CASE WHEN T.Selector = CAST(\'4\' AS [Edm.Int32]) THEN True ELSE");
            viewString.Append(" False END AS _from8, \r\n            CASE WHEN T.SelectorExecutor = CAST(\'1\' AS [");
            viewString.Append("Edm.Int32]) THEN True ELSE False END AS _from9, \r\n            CASE WHEN T.Select");
            viewString.Append("orBindingPrePostPress = CAST(\'0\' AS [Edm.Int32]) THEN True ELSE False END AS _fr");
            viewString.Append("om10\r\n        FROM dbModelStoreContainer.taskexecutors AS T\r\n        WHERE (T.Se");
            viewString.Append("lector IN {CAST(\'0\' AS [Edm.Int32]), CAST(\'1\' AS [Edm.Int32]), CAST(\'2\' AS [Edm.");
            viewString.Append("Int32]), CAST(\'3\' AS [Edm.Int32]), CAST(\'4\' AS [Edm.Int32])} OR T.SelectorExecut");
            viewString.Append("or = CAST(\'1\' AS [Edm.Int32]))\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("dbEntities.taskexecutors", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for dbEntities.taskexecutorestimatedon
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView21()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(8836);
            viewString.Append("\r\n    SELECT VALUE -- Constructing taskexecutorestimatedon\r\n        CASE\r\n      ");
            viewString.Append("      WHEN T1._from2 THEN [dbModel.TaskEstimatedOnTime](T1.TaskEstimatedOn_TimeS");
            viewString.Append("tampTable, T1.TaskEstimatedOn_CodTaskExecutor, T1.TaskEstimatedOn_CodTaskExecuto");
            viewString.Append("rOn, T1.TaskEstimatedOn_CostForfait, T1.TaskEstimatedOn_CostForfaitForSheet, T1.");
            viewString.Append("TaskEstimatedOn_CodOptionTypeOfTask, T1.TaskEstimatedOnTime_AvarageRunPerHour, T");
            viewString.Append("1.TaskEstimatedOnTime_UseDifferentRunPerHour, T1.TaskEstimatedOnTime_StartingTim");
            viewString.Append("e1, T1.TaskEstimatedOnTime_StartingTime2, T1.TaskEstimatedOnTime_TimeForfait, T1");
            viewString.Append(".TaskEstimatedOnTime_CostPerHourRunning, T1.TaskEstimatedOnTime_CostPerHourStart");
            viewString.Append("ing, T1.TaskEstimatedOnTime_UseDifferentDeficitForWeightStep)\r\n            WHEN ");
            viewString.Append("T1._from5 THEN [dbModel.TaskEstimatedOnRun](T1.TaskEstimatedOn_TimeStampTable, T");
            viewString.Append("1.TaskEstimatedOn_CodTaskExecutor, T1.TaskEstimatedOn_CodTaskExecutorOn, T1.Task");
            viewString.Append("EstimatedOn_CostForfait, T1.TaskEstimatedOn_CostForfaitForSheet, T1.TaskEstimate");
            viewString.Append("dOn_CodOptionTypeOfTask, T1.TaskEstimatedOnUnit_CostPerUnit, T1.TaskEstimatedOnU");
            viewString.Append("nit_UseDifferentCostPerUnit, T1.TaskEstimatedOnUnit_StartingCost1, T1.TaskEstima");
            viewString.Append("tedOnUnit_StartingCost2, T1.TaskEstimatedOnUnit_UseDifferentDeficitOnCostForWeig");
            viewString.Append("htStep)\r\n            WHEN T1._from6 THEN [dbModel.TaskEstimatedOnMq](T1.TaskEsti");
            viewString.Append("matedOn_TimeStampTable, T1.TaskEstimatedOn_CodTaskExecutor, T1.TaskEstimatedOn_C");
            viewString.Append("odTaskExecutorOn, T1.TaskEstimatedOn_CostForfait, T1.TaskEstimatedOn_CostForfait");
            viewString.Append("ForSheet, T1.TaskEstimatedOn_CodOptionTypeOfTask, T1.TaskEstimatedOnUnit_CostPer");
            viewString.Append("Unit, T1.TaskEstimatedOnUnit_UseDifferentCostPerUnit, T1.TaskEstimatedOnUnit_Sta");
            viewString.Append("rtingCost1, T1.TaskEstimatedOnUnit_StartingCost2, T1.TaskEstimatedOnUnit_UseDiff");
            viewString.Append("erentDeficitOnCostForWeightStep)\r\n            WHEN T1._from0 THEN [dbModel.Bindi");
            viewString.Append("ngEstimatedOnTime](T1.TaskEstimatedOn_TimeStampTable, T1.TaskEstimatedOn_CodTask");
            viewString.Append("Executor, T1.TaskEstimatedOn_CodTaskExecutorOn, T1.TaskEstimatedOn_CostForfait, ");
            viewString.Append("T1.TaskEstimatedOn_CostForfaitForSheet, T1.TaskEstimatedOn_CodOptionTypeOfTask, ");
            viewString.Append("T1.BindingEstimatedOnTime_AvarageRunPerHour4, T1.BindingEstimatedOnTime_Starting");
            viewString.Append("Time4, T1.BindingEstimatedOnTime_AvarageRunPerHour6, T1.BindingEstimatedOnTime_S");
            viewString.Append("tartingTime6, T1.BindingEstimatedOnTime_AvarageRunPerHour8, T1.BindingEstimatedO");
            viewString.Append("nTime_StartingTime8, T1.BindingEstimatedOnTime_AvarageRunPerHour12, T1.BindingEs");
            viewString.Append("timatedOnTime_StartingTime12, T1.BindingEstimatedOnTime_AvarageRunPerHour16, T1.");
            viewString.Append("BindingEstimatedOnTime_StartingTime16, T1.BindingEstimatedOnTime_AvarageRunPerHo");
            viewString.Append("ur24, T1.BindingEstimatedOnTime_StartingTime24, T1.BindingEstimatedOnTime_Avarag");
            viewString.Append("eRunPerHour32, T1.BindingEstimatedOnTime_StartingTime32, T1.BindingEstimatedOnTi");
            viewString.Append("me_AvarageRunPerHourBinding, T1.BindingEstimatedOnTime_StartingTimeBinding, T1.B");
            viewString.Append("indingEstimatedOnTime_CostPerHourRunning, T1.BindingEstimatedOnTime_CostPerHourS");
            viewString.Append("tarting)\r\n            ELSE [dbModel.BindingEstimatedOnRun](T1.TaskEstimatedOn_Ti");
            viewString.Append("meStampTable, T1.TaskEstimatedOn_CodTaskExecutor, T1.TaskEstimatedOn_CodTaskExec");
            viewString.Append("utorOn, T1.TaskEstimatedOn_CostForfait, T1.TaskEstimatedOn_CostForfaitForSheet, ");
            viewString.Append("T1.TaskEstimatedOn_CodOptionTypeOfTask, T1.BindingEstimatedOnRun_CostPerUnit4, T");
            viewString.Append("1.BindingEstimatedOnRun_StartingCost4, T1.BindingEstimatedOnRun_CostPerUnit6, T1");
            viewString.Append(".BindingEstimatedOnRun_StartingCost6, T1.BindingEstimatedOnRun_CostPerUnit8, T1.");
            viewString.Append("BindingEstimatedOnRun_StartingCost8, T1.BindingEstimatedOnRun_CostPerUnit12, T1.");
            viewString.Append("BindingEstimatedOnRun_StartingCost12, T1.BindingEstimatedOnRun_CostPerUnit16, T1");
            viewString.Append(".BindingEstimatedOnRun_StartingCost16, T1.BindingEstimatedOnRun_CostPerUnit24, T");
            viewString.Append("1.BindingEstimatedOnRun_StartingCost24, T1.BindingEstimatedOnRun_CostPerUnit32, ");
            viewString.Append("T1.BindingEstimatedOnRun_StartingCost32, T1.BindingEstimatedOnRun_BindingCost, T");
            viewString.Append("1.BindingEstimatedOnRun_UseDifferentCostPerUnit, T1.BindingEstimatedOnRun_Bindin");
            viewString.Append("gStartingCost)\r\n        END\r\n    FROM (\r\n        SELECT \r\n            T.TimeStam");
            viewString.Append("pTable AS TaskEstimatedOn_TimeStampTable, \r\n            T.CodTaskExecutor AS Tas");
            viewString.Append("kEstimatedOn_CodTaskExecutor, \r\n            T.CodTaskEstimatedOn AS TaskEstimate");
            viewString.Append("dOn_CodTaskExecutorOn, \r\n            T.CostForfait AS TaskEstimatedOn_CostForfai");
            viewString.Append("t, \r\n            T.CostForfaitForSheet AS TaskEstimatedOn_CostForfaitForSheet, \r");
            viewString.Append("\n            T.CodOptionTypeOfTask AS TaskEstimatedOn_CodOptionTypeOfTask, \r\n   ");
            viewString.Append("         T.AvarageRunPerHour AS TaskEstimatedOnTime_AvarageRunPerHour, \r\n       ");
            viewString.Append("     T.UseDifferentRunPerHour AS TaskEstimatedOnTime_UseDifferentRunPerHour, \r\n ");
            viewString.Append("           T.StartingTime1 AS TaskEstimatedOnTime_StartingTime1, \r\n            T");
            viewString.Append(".StartingTime2 AS TaskEstimatedOnTime_StartingTime2, \r\n            T.TimeForfait");
            viewString.Append(" AS TaskEstimatedOnTime_TimeForfait, \r\n            T.CostPerHourRunning AS TaskE");
            viewString.Append("stimatedOnTime_CostPerHourRunning, \r\n            T.CostPerHourStarting AS TaskEs");
            viewString.Append("timatedOnTime_CostPerHourStarting, \r\n            T.UseDifferentDeficitForWeightS");
            viewString.Append("tep AS TaskEstimatedOnTime_UseDifferentDeficitForWeightStep, \r\n            T.Cos");
            viewString.Append("tPerUnit AS TaskEstimatedOnUnit_CostPerUnit, \r\n            T.UseDifferentCostPer");
            viewString.Append("Unit AS TaskEstimatedOnUnit_UseDifferentCostPerUnit, \r\n            T.StartingCos");
            viewString.Append("t1 AS TaskEstimatedOnUnit_StartingCost1, \r\n            T.StartingCost2 AS TaskEs");
            viewString.Append("timatedOnUnit_StartingCost2, \r\n            T.UseDifferentDeficitOnCostForWeightS");
            viewString.Append("tep AS TaskEstimatedOnUnit_UseDifferentDeficitOnCostForWeightStep, \r\n           ");
            viewString.Append(" T.AvarageRunPerHour4 AS BindingEstimatedOnTime_AvarageRunPerHour4, \r\n          ");
            viewString.Append("  T.StartingTime4 AS BindingEstimatedOnTime_StartingTime4, \r\n            T.Avara");
            viewString.Append("geRunPerHour6 AS BindingEstimatedOnTime_AvarageRunPerHour6, \r\n            T.Star");
            viewString.Append("tingTime6 AS BindingEstimatedOnTime_StartingTime6, \r\n            T.AvarageRunPer");
            viewString.Append("Hour8 AS BindingEstimatedOnTime_AvarageRunPerHour8, \r\n            T.StartingTime");
            viewString.Append("8 AS BindingEstimatedOnTime_StartingTime8, \r\n            T.AvarageRunPerHour12 A");
            viewString.Append("S BindingEstimatedOnTime_AvarageRunPerHour12, \r\n            T.StartingTime12 AS ");
            viewString.Append("BindingEstimatedOnTime_StartingTime12, \r\n            T.AvarageRunPerHour16 AS Bi");
            viewString.Append("ndingEstimatedOnTime_AvarageRunPerHour16, \r\n            T.StartingTime16 AS Bind");
            viewString.Append("ingEstimatedOnTime_StartingTime16, \r\n            T.AvarageRunPerHour24 AS Bindin");
            viewString.Append("gEstimatedOnTime_AvarageRunPerHour24, \r\n            T.StartingTime24 AS BindingE");
            viewString.Append("stimatedOnTime_StartingTime24, \r\n            T.AvarageRunPerHour32 AS BindingEst");
            viewString.Append("imatedOnTime_AvarageRunPerHour32, \r\n            T.StartingTime32 AS BindingEstim");
            viewString.Append("atedOnTime_StartingTime32, \r\n            T.AvarageRunPerHourBinding AS BindingEs");
            viewString.Append("timatedOnTime_AvarageRunPerHourBinding, \r\n            T.StartingTimeBinding AS B");
            viewString.Append("indingEstimatedOnTime_StartingTimeBinding, \r\n            T.CostPerHourRunning AS");
            viewString.Append(" BindingEstimatedOnTime_CostPerHourRunning, \r\n            T.CostPerHourStarting ");
            viewString.Append("AS BindingEstimatedOnTime_CostPerHourStarting, \r\n            T.CostPerUnit4 AS B");
            viewString.Append("indingEstimatedOnRun_CostPerUnit4, \r\n            T.StartingCost4 AS BindingEstim");
            viewString.Append("atedOnRun_StartingCost4, \r\n            T.CostPerUnit6 AS BindingEstimatedOnRun_C");
            viewString.Append("ostPerUnit6, \r\n            T.StartingCost6 AS BindingEstimatedOnRun_StartingCost");
            viewString.Append("6, \r\n            T.CostPerUnit8 AS BindingEstimatedOnRun_CostPerUnit8, \r\n       ");
            viewString.Append("     T.StartingCost8 AS BindingEstimatedOnRun_StartingCost8, \r\n            T.Cos");
            viewString.Append("tPerUnit12 AS BindingEstimatedOnRun_CostPerUnit12, \r\n            T.StartingCost1");
            viewString.Append("2 AS BindingEstimatedOnRun_StartingCost12, \r\n            T.CostPerUnit16 AS Bind");
            viewString.Append("ingEstimatedOnRun_CostPerUnit16, \r\n            T.StartingCost16 AS BindingEstima");
            viewString.Append("tedOnRun_StartingCost16, \r\n            T.CostPerUnit24 AS BindingEstimatedOnRun_");
            viewString.Append("CostPerUnit24, \r\n            T.StartingCost24 AS BindingEstimatedOnRun_StartingC");
            viewString.Append("ost24, \r\n            T.CostPerUnit32 AS BindingEstimatedOnRun_CostPerUnit32, \r\n ");
            viewString.Append("           T.StartingCost32 AS BindingEstimatedOnRun_StartingCost32, \r\n         ");
            viewString.Append("   T.BindingCost AS BindingEstimatedOnRun_BindingCost, \r\n            T.UseDiffer");
            viewString.Append("entCostPerUnit AS BindingEstimatedOnRun_UseDifferentCostPerUnit, \r\n            T");
            viewString.Append(".BindingStartingCost AS BindingEstimatedOnRun_BindingStartingCost, \r\n           ");
            viewString.Append(" CASE WHEN T.SelectorUnitTime = CAST(\'2\' AS [Edm.Int32]) THEN True ELSE False EN");
            viewString.Append("D AS _from0, \r\n            CASE WHEN T.SelectorUnitTime = CAST(\'3\' AS [Edm.Int32");
            viewString.Append("]) THEN True ELSE False END AS _from1, \r\n            CASE WHEN T.SelectorUnitTim");
            viewString.Append("e = CAST(\'0\' AS [Edm.Int32]) THEN True ELSE False END AS _from2, \r\n            T");
            viewString.Append("rue AS _from3, \r\n            CASE WHEN T.SelectorUnitTime = CAST(\'1\' AS [Edm.Int");
            viewString.Append("32]) THEN True ELSE False END AS _from4, \r\n            CASE WHEN T.SelectorMqRun");
            viewString.Append(" = CAST(\'0\' AS [Edm.Int32]) THEN True ELSE False END AS _from5, \r\n            CA");
            viewString.Append("SE WHEN T.SelectorMqRun = CAST(\'1\' AS [Edm.Int32]) THEN True ELSE False END AS _");
            viewString.Append("from6\r\n        FROM dbModelStoreContainer.taskexecutorestimatedon AS T\r\n        ");
            viewString.Append("WHERE (T.SelectorUnitTime IN {CAST(\'0\' AS [Edm.Int32]), CAST(\'2\' AS [Edm.Int32])");
            viewString.Append(", CAST(\'3\' AS [Edm.Int32])} OR T.SelectorMqRun IN {CAST(\'0\' AS [Edm.Int32]), CAS");
            viewString.Append("T(\'1\' AS [Edm.Int32])})\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("dbEntities.taskexecutorestimatedon", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for dbEntities.steps
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView22()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(6762);
            viewString.Append("\r\n    SELECT VALUE -- Constructing steps\r\n        CASE\r\n            WHEN T1._fro");
            viewString.Append("m4 THEN [dbModel.CostPerRunStep](T1.Step_TimeStampTable, T1.Step_CodTaskEstimate");
            viewString.Append("dOn, T1.Step_IdStep, T1.Step_FromUnit, T1.Step_ToUnit, T1.CostPerRunStep_CostPer");
            viewString.Append("Unit)\r\n            WHEN T1._from3 THEN [dbModel.AvarageRunPerRunStep](T1.Step_Ti");
            viewString.Append("meStampTable, T1.Step_CodTaskEstimatedOn, T1.Step_IdStep, T1.Step_FromUnit, T1.S");
            viewString.Append("tep_ToUnit, T1.AvarageRunPerRunStep_AvarageRunPerHour)\r\n            WHEN T1._fro");
            viewString.Append("m5 THEN [dbModel.DeficitForWeightStep](T1.Step_TimeStampTable, T1.Step_CodTaskEs");
            viewString.Append("timatedOn, T1.Step_IdStep, T1.Step_FromUnit, T1.Step_ToUnit, T1.DeficitForWeight");
            viewString.Append("Step_DeficitRate)\r\n            WHEN T1._from6 THEN [dbModel.CostPerMqStep](T1.St");
            viewString.Append("ep_TimeStampTable, T1.Step_CodTaskEstimatedOn, T1.Step_IdStep, T1.Step_FromUnit,");
            viewString.Append(" T1.Step_ToUnit, T1.CostPerMqStep_CostPerUnit)\r\n            WHEN T1._from7 THEN ");
            viewString.Append("[dbModel.DeficitOnCostForWeightStep](T1.Step_TimeStampTable, T1.Step_CodTaskEsti");
            viewString.Append("matedOn, T1.Step_IdStep, T1.Step_FromUnit, T1.Step_ToUnit, T1.DeficitOnCostForWe");
            viewString.Append("ightStep_DeficitRate)\r\n            WHEN T1._from0 THEN [dbModel.BindingAvarageRu");
            viewString.Append("nPerRunStep](T1.Step_TimeStampTable, T1.Step_CodTaskEstimatedOn, T1.Step_IdStep,");
            viewString.Append(" T1.Step_FromUnit, T1.Step_ToUnit, T1.BindingAvarageRunPerRunStep_AvarageRunPerH");
            viewString.Append("our4, T1.BindingAvarageRunPerRunStep_StartingTime4, T1.BindingAvarageRunPerRunSt");
            viewString.Append("ep_AvarageRunPerHour6, T1.BindingAvarageRunPerRunStep_StartingTime6, T1.BindingA");
            viewString.Append("varageRunPerRunStep_AvarageRunPerHour8, T1.BindingAvarageRunPerRunStep_StartingT");
            viewString.Append("ime8, T1.BindingAvarageRunPerRunStep_AvarageRunPerHour12, T1.BindingAvarageRunPe");
            viewString.Append("rRunStep_StartingTime12, T1.BindingAvarageRunPerRunStep_AvarageRunPerHour16, T1.");
            viewString.Append("BindingAvarageRunPerRunStep_StartingTime16, T1.BindingAvarageRunPerRunStep_Avara");
            viewString.Append("geRunPerHour24, T1.BindingAvarageRunPerRunStep_StartingTime24, T1.BindingAvarage");
            viewString.Append("RunPerRunStep_AvarageRunPerHour32, T1.BindingAvarageRunPerRunStep_StartingTime32");
            viewString.Append(", T1.BindingAvarageRunPerRunStep_AvarageRunPerHourBinding, T1.BindingAvarageRunP");
            viewString.Append("erRunStep_StartingTimeBinding)\r\n            ELSE [dbModel.BindingCostPerRunStep]");
            viewString.Append("(T1.Step_TimeStampTable, T1.Step_CodTaskEstimatedOn, T1.Step_IdStep, T1.Step_Fro");
            viewString.Append("mUnit, T1.Step_ToUnit, T1.BindingCostPerRunStep_CostPerUnit4, T1.BindingCostPerR");
            viewString.Append("unStep_StartingCost4, T1.BindingCostPerRunStep_CostPerUnit6, T1.BindingCostPerRu");
            viewString.Append("nStep_StartingCost6, T1.BindingCostPerRunStep_CostPerUnit8, T1.BindingCostPerRun");
            viewString.Append("Step_StartingCost8, T1.BindingCostPerRunStep_CostPerUnit12, T1.BindingCostPerRun");
            viewString.Append("Step_StartingCost12, T1.BindingCostPerRunStep_CostPerUnit16, T1.BindingCostPerRu");
            viewString.Append("nStep_StartingCost16, T1.BindingCostPerRunStep_CostPerUnit24, T1.BindingCostPerR");
            viewString.Append("unStep_StartingCost24, T1.BindingCostPerRunStep_CostPerUnit32, T1.BindingCostPer");
            viewString.Append("RunStep_StartingCost32, T1.BindingCostPerRunStep_BindingCost)\r\n        END\r\n    ");
            viewString.Append("FROM (\r\n        SELECT \r\n            T.TimeStampTable AS Step_TimeStampTable, \r\n");
            viewString.Append("            T.CodTaskEstimatedOn AS Step_CodTaskEstimatedOn, \r\n            T.IdS");
            viewString.Append("tep AS Step_IdStep, \r\n            T.FromUnit AS Step_FromUnit, \r\n            T.T");
            viewString.Append("oUnit AS Step_ToUnit, \r\n            T.CostPerUnit AS CostPerRunStep_CostPerUnit,");
            viewString.Append(" \r\n            T.AvarageRunPerHour AS AvarageRunPerRunStep_AvarageRunPerHour, \r\n");
            viewString.Append("            T.DeficitRate AS DeficitForWeightStep_DeficitRate, \r\n            T.C");
            viewString.Append("ostPerUnit AS CostPerMqStep_CostPerUnit, \r\n            T.DeficitRate AS DeficitO");
            viewString.Append("nCostForWeightStep_DeficitRate, \r\n            T.AvarageRunPerHour4 AS BindingAva");
            viewString.Append("rageRunPerRunStep_AvarageRunPerHour4, \r\n            T.StartingTime4 AS BindingAv");
            viewString.Append("arageRunPerRunStep_StartingTime4, \r\n            T.AvarageRunPerHour6 AS BindingA");
            viewString.Append("varageRunPerRunStep_AvarageRunPerHour6, \r\n            T.StartingTime6 AS Binding");
            viewString.Append("AvarageRunPerRunStep_StartingTime6, \r\n            T.AvarageRunPerHour8 AS Bindin");
            viewString.Append("gAvarageRunPerRunStep_AvarageRunPerHour8, \r\n            T.StartingTime8 AS Bindi");
            viewString.Append("ngAvarageRunPerRunStep_StartingTime8, \r\n            T.AvarageRunPerHour12 AS Bin");
            viewString.Append("dingAvarageRunPerRunStep_AvarageRunPerHour12, \r\n            T.StartingTime12 AS ");
            viewString.Append("BindingAvarageRunPerRunStep_StartingTime12, \r\n            T.AvarageRunPerHour16 ");
            viewString.Append("AS BindingAvarageRunPerRunStep_AvarageRunPerHour16, \r\n            T.StartingTime");
            viewString.Append("16 AS BindingAvarageRunPerRunStep_StartingTime16, \r\n            T.AvarageRunPerH");
            viewString.Append("our24 AS BindingAvarageRunPerRunStep_AvarageRunPerHour24, \r\n            T.Starti");
            viewString.Append("ngTime24 AS BindingAvarageRunPerRunStep_StartingTime24, \r\n            T.AvarageR");
            viewString.Append("unPerHour32 AS BindingAvarageRunPerRunStep_AvarageRunPerHour32, \r\n            T.");
            viewString.Append("StartingTime32 AS BindingAvarageRunPerRunStep_StartingTime32, \r\n            T.Av");
            viewString.Append("arageRunPerHourBinding AS BindingAvarageRunPerRunStep_AvarageRunPerHourBinding, ");
            viewString.Append("\r\n            T.StartingTimeBinding AS BindingAvarageRunPerRunStep_StartingTimeB");
            viewString.Append("inding, \r\n            T.CostPerUnit4 AS BindingCostPerRunStep_CostPerUnit4, \r\n  ");
            viewString.Append("          T.StartingCost4 AS BindingCostPerRunStep_StartingCost4, \r\n            ");
            viewString.Append("T.CostPerUnit6 AS BindingCostPerRunStep_CostPerUnit6, \r\n            T.StartingCo");
            viewString.Append("st6 AS BindingCostPerRunStep_StartingCost6, \r\n            T.CostPerUnit8 AS Bind");
            viewString.Append("ingCostPerRunStep_CostPerUnit8, \r\n            T.StartingCost8 AS BindingCostPerR");
            viewString.Append("unStep_StartingCost8, \r\n            T.CostPerUnit12 AS BindingCostPerRunStep_Cos");
            viewString.Append("tPerUnit12, \r\n            T.StartingCost12 AS BindingCostPerRunStep_StartingCost");
            viewString.Append("12, \r\n            T.CostPerUnit16 AS BindingCostPerRunStep_CostPerUnit16, \r\n    ");
            viewString.Append("        T.StartingCost16 AS BindingCostPerRunStep_StartingCost16, \r\n            ");
            viewString.Append("T.CostPerUnit24 AS BindingCostPerRunStep_CostPerUnit24, \r\n            T.Starting");
            viewString.Append("Cost24 AS BindingCostPerRunStep_StartingCost24, \r\n            T.CostPerUnit32 AS");
            viewString.Append(" BindingCostPerRunStep_CostPerUnit32, \r\n            T.StartingCost32 AS BindingC");
            viewString.Append("ostPerRunStep_StartingCost32, \r\n            T.BindingCost AS BindingCostPerRunSt");
            viewString.Append("ep_BindingCost, \r\n            CASE WHEN T.Selector = CAST(\'5\' AS [Edm.Int32]) TH");
            viewString.Append("EN True ELSE False END AS _from0, \r\n            CASE WHEN T.Selector = CAST(\'6\' ");
            viewString.Append("AS [Edm.Int32]) THEN True ELSE False END AS _from1, \r\n            True AS _from2");
            viewString.Append(", \r\n            CASE WHEN T.Selector = CAST(\'0\' AS [Edm.Int32]) THEN True ELSE F");
            viewString.Append("alse END AS _from3, \r\n            CASE WHEN T.Selector = CAST(\'1\' AS [Edm.Int32]");
            viewString.Append(") THEN True ELSE False END AS _from4, \r\n            CASE WHEN T.Selector = CAST(");
            viewString.Append("\'2\' AS [Edm.Int32]) THEN True ELSE False END AS _from5, \r\n            CASE WHEN ");
            viewString.Append("T.Selector = CAST(\'3\' AS [Edm.Int32]) THEN True ELSE False END AS _from6, \r\n    ");
            viewString.Append("        CASE WHEN T.Selector = CAST(\'4\' AS [Edm.Int32]) THEN True ELSE False END");
            viewString.Append(" AS _from7\r\n        FROM dbModelStoreContainer.steps AS T\r\n        WHERE T.Selec");
            viewString.Append("tor IN {CAST(\'0\' AS [Edm.Int32]), CAST(\'1\' AS [Edm.Int32]), CAST(\'2\' AS [Edm.Int");
            viewString.Append("32]), CAST(\'3\' AS [Edm.Int32]), CAST(\'4\' AS [Edm.Int32]), CAST(\'5\' AS [Edm.Int32");
            viewString.Append("]), CAST(\'6\' AS [Edm.Int32])}\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("dbEntities.steps", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for dbEntities.articlecost
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView23()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(4936);
            viewString.Append("\r\n    SELECT VALUE -- Constructing articlecost\r\n        CASE\r\n            WHEN T");
            viewString.Append("1._from7 THEN [dbModel.SheetPrintableArticlePakedCost](T1.ArticleCost_TimeStampT");
            viewString.Append("able, T1.ArticleCost_CodArticleCost, T1.ArticleCost_CodArticle, T1.SheetPrintabl");
            viewString.Append("eArticleCost_CostPerKg, T1.SheetPrintableArticleCost_CostPerSheet)\r\n            ");
            viewString.Append("WHEN T1._from0 THEN [dbModel.SheetPrintableArticleCuttedCost](T1.ArticleCost_Tim");
            viewString.Append("eStampTable, T1.ArticleCost_CodArticleCost, T1.ArticleCost_CodArticle, T1.SheetP");
            viewString.Append("rintableArticleCost_CostPerKg, T1.SheetPrintableArticleCost_CostPerSheet, T1.She");
            viewString.Append("etPrintableArticleCuttedCost_UseTheSameCostOfPalletAfterKg, T1.SheetPrintableArt");
            viewString.Append("icleCuttedCost_UseTheSameCostOfSheetAfterSheet, T1.SheetPrintableArticleCuttedCo");
            viewString.Append("st_KgPallet, T1.SheetPrintableArticleCuttedCost_KgSheet)\r\n            WHEN T1._f");
            viewString.Append("rom9 THEN [dbModel.SheetPrintableArticlePalletCost](T1.ArticleCost_TimeStampTabl");
            viewString.Append("e, T1.ArticleCost_CodArticleCost, T1.ArticleCost_CodArticle, T1.SheetPrintableAr");
            viewString.Append("ticleCost_CostPerKg, T1.SheetPrintableArticleCost_CostPerSheet)\r\n            WHE");
            viewString.Append("N T1._from8 THEN [dbModel.RollPrintableArticleStandardCost](T1.ArticleCost_TimeS");
            viewString.Append("tampTable, T1.ArticleCost_CodArticleCost, T1.ArticleCost_CodArticle, T1.RollPrin");
            viewString.Append("tableArticleCost_CostPerMl, T1.RollPrintableArticleCost_CostPerMq)\r\n            ");
            viewString.Append("WHEN T1._from1 THEN [dbModel.RollPrintableArticleCuttedCost](T1.ArticleCost_Time");
            viewString.Append("StampTable, T1.ArticleCost_CodArticleCost, T1.ArticleCost_CodArticle, T1.RollPri");
            viewString.Append("ntableArticleCost_CostPerMl, T1.RollPrintableArticleCost_CostPerMq, T1.RollPrint");
            viewString.Append("ableArticleCuttedCost_UseTheSameCostOfStandardWidthAfterKg, T1.RollPrintableArti");
            viewString.Append("cleCuttedCost_UseTheSameCostOfStandardWidthAfterMl, T1.RollPrintableArticleCutte");
            viewString.Append("dCost_Kg, T1.RollPrintableArticleCuttedCost_Ml)\r\n            WHEN T1._from6 THEN");
            viewString.Append(" [dbModel.ObjectPrintableArticleStandardCost](T1.ArticleCost_TimeStampTable, T1.");
            viewString.Append("ArticleCost_CodArticleCost, T1.ArticleCost_CodArticle, T1.ObjectPrintableArticle");
            viewString.Append("Cost_CostPerUnit)\r\n            ELSE [dbModel.RigidPrintableArticleStandardCost](");
            viewString.Append("T1.ArticleCost_TimeStampTable, T1.ArticleCost_CodArticleCost, T1.ArticleCost_Cod");
            viewString.Append("Article, T1.RigidPrintableArticleCost_CostPerMq)\r\n        END\r\n    FROM (\r\n     ");
            viewString.Append("   SELECT \r\n            T.TimeStampTable AS ArticleCost_TimeStampTable, \r\n      ");
            viewString.Append("      T.CodArticleCost AS ArticleCost_CodArticleCost, \r\n            T.CodArticle");
            viewString.Append(" AS ArticleCost_CodArticle, \r\n            T.CostPerKg AS SheetPrintableArticleCo");
            viewString.Append("st_CostPerKg, \r\n            T.CostPerSheet AS SheetPrintableArticleCost_CostPerS");
            viewString.Append("heet, \r\n            T.UseTheSameCostOfPalletAfterKg AS SheetPrintableArticleCutt");
            viewString.Append("edCost_UseTheSameCostOfPalletAfterKg, \r\n            T.UseTheSameCostOfSheetAfter");
            viewString.Append("Sheet AS SheetPrintableArticleCuttedCost_UseTheSameCostOfSheetAfterSheet, \r\n    ");
            viewString.Append("        T.KgPallet AS SheetPrintableArticleCuttedCost_KgPallet, \r\n            T.");
            viewString.Append("KgSheet AS SheetPrintableArticleCuttedCost_KgSheet, \r\n            T.CostPerMl AS");
            viewString.Append(" RollPrintableArticleCost_CostPerMl, \r\n            T.CostPerMq AS RollPrintableA");
            viewString.Append("rticleCost_CostPerMq, \r\n            T.UseTheSameCostOfStandardWidthAfterKg AS Ro");
            viewString.Append("llPrintableArticleCuttedCost_UseTheSameCostOfStandardWidthAfterKg, \r\n           ");
            viewString.Append(" T.UseTheSameCostOfStandardWidthAfterMl AS RollPrintableArticleCuttedCost_UseThe");
            viewString.Append("SameCostOfStandardWidthAfterMl, \r\n            T.Kg AS RollPrintableArticleCutted");
            viewString.Append("Cost_Kg, \r\n            T.Ml AS RollPrintableArticleCuttedCost_Ml, \r\n            ");
            viewString.Append("T.CostPerUnit AS ObjectPrintableArticleCost_CostPerUnit, \r\n            T.CostPer");
            viewString.Append("Mq AS RigidPrintableArticleCost_CostPerMq, \r\n            CASE WHEN T.SelectorArt");
            viewString.Append("icleSheetPrintableCost = CAST(\'1\' AS [Edm.Int32]) THEN True ELSE False END AS _f");
            viewString.Append("rom0, \r\n            CASE WHEN T.SelectorArticleRollPrintableCost = CAST(\'1\' AS [");
            viewString.Append("Edm.Int32]) THEN True ELSE False END AS _from1, \r\n            True AS _from2, \r\n");
            viewString.Append("            CASE WHEN T.SelectorArticleCost = CAST(\'0\' AS [Edm.Int32]) THEN True");
            viewString.Append(" ELSE False END AS _from3, \r\n            CASE WHEN T.SelectorArticleCost = CAST(");
            viewString.Append("\'1\' AS [Edm.Int32]) THEN True ELSE False END AS _from4, \r\n            CASE WHEN ");
            viewString.Append("T.SelectorArticleCost = CAST(\'2\' AS [Edm.Int32]) THEN True ELSE False END AS _fr");
            viewString.Append("om5, \r\n            CASE WHEN T.SelectorArticleCost = CAST(\'3\' AS [Edm.Int32]) TH");
            viewString.Append("EN True ELSE False END AS _from6, \r\n            CASE WHEN T.SelectorArticleSheet");
            viewString.Append("PrintableCost = CAST(\'0\' AS [Edm.Int32]) THEN True ELSE False END AS _from7, \r\n ");
            viewString.Append("           CASE WHEN T.SelectorArticleRollPrintableCost = CAST(\'0\' AS [Edm.Int32");
            viewString.Append("]) THEN True ELSE False END AS _from8, \r\n            CASE WHEN T.SelectorArticle");
            viewString.Append("SheetPrintableCost = CAST(\'2\' AS [Edm.Int32]) THEN True ELSE False END AS _from9");
            viewString.Append("\r\n        FROM dbModelStoreContainer.articlecost AS T\r\n        WHERE (T.Selector");
            viewString.Append("ArticleRollPrintableCost IN {CAST(\'0\' AS [Edm.Int32]), CAST(\'1\' AS [Edm.Int32])}");
            viewString.Append(" OR T.SelectorArticleSheetPrintableCost IN {CAST(\'0\' AS [Edm.Int32]), CAST(\'1\' A");
            viewString.Append("S [Edm.Int32]), CAST(\'2\' AS [Edm.Int32])} OR T.SelectorArticleCost IN {CAST(\'2\' ");
            viewString.Append("AS [Edm.Int32]), CAST(\'3\' AS [Edm.Int32])})\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("dbEntities.articlecost", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for dbEntities.articles
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView24()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(4660);
            viewString.Append("\r\n    SELECT VALUE -- Constructing articles\r\n        CASE\r\n            WHEN T1._");
            viewString.Append("from3 THEN [dbModel.NoPrintable](T1.Article_TimeStampTable, T1.Article_CodArticl");
            viewString.Append("e, T1.Article_ArticleName, T1.Article_CodSupplierBuy, T1.Article_UnitOfMeasure, ");
            viewString.Append("T1.Article_CodSupplierMaker, T1.NoPrintable_SupplierMaker, T1.NoPrintable_MqFora");
            viewString.Append("fait)\r\n            WHEN T1._from2 THEN [dbModel.SheetPrintableArticle](T1.Articl");
            viewString.Append("e_TimeStampTable, T1.Article_CodArticle, T1.Article_ArticleName, T1.Article_CodS");
            viewString.Append("upplierBuy, T1.Article_UnitOfMeasure, T1.Article_CodSupplierMaker, T1.Printable_");
            viewString.Append("TypeOfMaterial, T1.Printable_Weight, T1.Printable_Color, T1.Printable_Thikness, ");
            viewString.Append("T1.Printable_NameOfMaterial, T1.Printable_NoBv, T1.Printable_Hand, T1.Printable_");
            viewString.Append("SupplierMaker, T1.SheetPrintableArticle_Format, T1.SheetPrintableArticle_NoPinza");
            viewString.Append(", T1.SheetPrintableArticle_SheetPerPacked, T1.SheetPrintableArticle_SheetPerPall");
            viewString.Append("et)\r\n            WHEN T1._from4 THEN [dbModel.RollPrintableArticle](T1.Article_T");
            viewString.Append("imeStampTable, T1.Article_CodArticle, T1.Article_ArticleName, T1.Article_CodSupp");
            viewString.Append("lierBuy, T1.Article_UnitOfMeasure, T1.Article_CodSupplierMaker, T1.Printable_Typ");
            viewString.Append("eOfMaterial, T1.Printable_Weight, T1.Printable_Color, T1.Printable_Thikness, T1.");
            viewString.Append("Printable_NameOfMaterial, T1.Printable_NoBv, T1.Printable_Hand, T1.Printable_Sup");
            viewString.Append("plierMaker, T1.RollPrintableArticle_Width, T1.RollPrintableArticle_MqForafait)\r\n");
            viewString.Append("            WHEN T1._from6 THEN [dbModel.RigidPrintableArticle](T1.Article_TimeS");
            viewString.Append("tampTable, T1.Article_CodArticle, T1.Article_ArticleName, T1.Article_CodSupplier");
            viewString.Append("Buy, T1.Article_UnitOfMeasure, T1.Article_CodSupplierMaker, T1.Printable_TypeOfM");
            viewString.Append("aterial, T1.Printable_Weight, T1.Printable_Color, T1.Printable_Thikness, T1.Prin");
            viewString.Append("table_NameOfMaterial, T1.Printable_NoBv, T1.Printable_Hand, T1.Printable_Supplie");
            viewString.Append("rMaker, T1.RigidPrintableArticle_Format)\r\n            ELSE [dbModel.ObjectPrinta");
            viewString.Append("bleArticle](T1.Article_TimeStampTable, T1.Article_CodArticle, T1.Article_Article");
            viewString.Append("Name, T1.Article_CodSupplierBuy, T1.Article_UnitOfMeasure, T1.Article_CodSupplie");
            viewString.Append("rMaker, T1.Printable_TypeOfMaterial, T1.Printable_Weight, T1.Printable_Color, T1");
            viewString.Append(".Printable_Thikness, T1.Printable_NameOfMaterial, T1.Printable_NoBv, T1.Printabl");
            viewString.Append("e_Hand, T1.Printable_SupplierMaker, T1.ObjectPrintableArticle_Size, T1.ObjectPri");
            viewString.Append("ntableArticle_PrintableFormat)\r\n        END\r\n    FROM (\r\n        SELECT \r\n      ");
            viewString.Append("      T.TimeStampTable AS Article_TimeStampTable, \r\n            T.CodArticle AS ");
            viewString.Append("Article_CodArticle, \r\n            T.ArticleName AS Article_ArticleName, \r\n      ");
            viewString.Append("      T.CodSupplierBuy AS Article_CodSupplierBuy, \r\n            T.UnitOfMeasure ");
            viewString.Append("AS Article_UnitOfMeasure, \r\n            T.CodSupplierMaker AS Article_CodSupplie");
            viewString.Append("rMaker, \r\n            T.SupplierMaker AS NoPrintable_SupplierMaker, \r\n          ");
            viewString.Append("  T.MqForafait AS NoPrintable_MqForafait, \r\n            T.TypeOfMaterial AS Prin");
            viewString.Append("table_TypeOfMaterial, \r\n            T.Weight AS Printable_Weight, \r\n            ");
            viewString.Append("T.Color AS Printable_Color, \r\n            T.Thikness AS Printable_Thikness, \r\n  ");
            viewString.Append("          T.NameOfMaterial AS Printable_NameOfMaterial, \r\n            T.NoBv AS ");
            viewString.Append("Printable_NoBv, \r\n            T.Hand AS Printable_Hand, \r\n            T.Supplier");
            viewString.Append("Maker AS Printable_SupplierMaker, \r\n            T.Format AS SheetPrintableArticl");
            viewString.Append("e_Format, \r\n            T.NoPinza AS SheetPrintableArticle_NoPinza, \r\n          ");
            viewString.Append("  T.SheetPerPacked AS SheetPrintableArticle_SheetPerPacked, \r\n            T.Shee");
            viewString.Append("tPerPallet AS SheetPrintableArticle_SheetPerPallet, \r\n            T.Width AS Rol");
            viewString.Append("lPrintableArticle_Width, \r\n            T.MqForafait AS RollPrintableArticle_MqFo");
            viewString.Append("rafait, \r\n            T.Format AS RigidPrintableArticle_Format, \r\n            T.");
            viewString.Append("Size AS ObjectPrintableArticle_Size, \r\n            T.PrintableFormat AS ObjectPr");
            viewString.Append("intableArticle_PrintableFormat, \r\n            CASE WHEN T.SelectorPrintable = CA");
            viewString.Append("ST(\'0\' AS [Edm.Int32]) THEN True ELSE False END AS _from0, \r\n            True AS");
            viewString.Append(" _from1, \r\n            CASE WHEN T.SelectorSheetRollWide = CAST(\'0\' AS [Edm.Int3");
            viewString.Append("2]) THEN True ELSE False END AS _from2, \r\n            CASE WHEN T.SelectorPrinta");
            viewString.Append("ble = CAST(\'1\' AS [Edm.Int32]) THEN True ELSE False END AS _from3, \r\n           ");
            viewString.Append(" CASE WHEN T.SelectorSheetRollWide = CAST(\'1\' AS [Edm.Int32]) THEN True ELSE Fal");
            viewString.Append("se END AS _from4, \r\n            CASE WHEN T.SelectorSheetRollWide = CAST(\'3\' AS ");
            viewString.Append("[Edm.Int32]) THEN True ELSE False END AS _from5, \r\n            CASE WHEN T.Selec");
            viewString.Append("torSheetRollWide = CAST(\'2\' AS [Edm.Int32]) THEN True ELSE False END AS _from6\r\n");
            viewString.Append("        FROM dbModelStoreContainer.articles AS T\r\n        WHERE (T.SelectorSheet");
            viewString.Append("RollWide IN {CAST(\'0\' AS [Edm.Int32]), CAST(\'1\' AS [Edm.Int32]), CAST(\'2\' AS [Ed");
            viewString.Append("m.Int32]), CAST(\'3\' AS [Edm.Int32])} OR T.SelectorPrintable = CAST(\'1\' AS [Edm.I");
            viewString.Append("nt32]))\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("dbEntities.articles", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for dbEntities.customersupplierbases
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView25()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("dbEntities.customersupplierbases", "\r\n    SELECT VALUE -- Constructing customersupplierbases\r\n        [dbModel.Custom" +
                    "erSupplierBase](T1.CustomerSupplierBase_TimeStampTable, T1.CustomerSupplierBase_" +
                    "CodCustomerSupplier, T1.CustomerSupplierBase_CodCustomerSupplierBase, T1.Custome" +
                    "rSupplierBase_CodTypeOfBase, T1.CustomerSupplierBase_Address, T1.CustomerSupplie" +
                    "rBase_City, T1.CustomerSupplierBase_PostalCode, T1.CustomerSupplierBase_Country," +
                    " T1.CustomerSupplierBase_Phone, T1.CustomerSupplierBase_Fax, T1.CustomerSupplier" +
                    "Base_Email, T1.CustomerSupplierBase_Note, T1.CustomerSupplierBase_Referee, T1.Cu" +
                    "stomerSupplierBase_Pec, T1.CustomerSupplierBase_Province)\r\n    FROM (\r\n        S" +
                    "ELECT \r\n            T.TimeStampTable AS CustomerSupplierBase_TimeStampTable, \r\n " +
                    "           T.CodCustomerSupplier AS CustomerSupplierBase_CodCustomerSupplier, \r\n" +
                    "            T.CodCustomerSupplierBase AS CustomerSupplierBase_CodCustomerSupplie" +
                    "rBase, \r\n            T.CodTypeOfBase AS CustomerSupplierBase_CodTypeOfBase, \r\n  " +
                    "          T.Address AS CustomerSupplierBase_Address, \r\n            T.City AS Cus" +
                    "tomerSupplierBase_City, \r\n            T.PostalCode AS CustomerSupplierBase_Posta" +
                    "lCode, \r\n            T.Country AS CustomerSupplierBase_Country, \r\n            T." +
                    "Phone AS CustomerSupplierBase_Phone, \r\n            T.Fax AS CustomerSupplierBase" +
                    "_Fax, \r\n            T.Email AS CustomerSupplierBase_Email, \r\n            T.Note " +
                    "AS CustomerSupplierBase_Note, \r\n            T.Referee AS CustomerSupplierBase_Re" +
                    "feree, \r\n            T.Pec AS CustomerSupplierBase_Pec, \r\n            T.Province" +
                    " AS CustomerSupplierBase_Province, \r\n            True AS _from0\r\n        FROM db" +
                    "ModelStoreContainer.customersupplierbases AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for dbEntities.customersuppliers
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView26()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("dbEntities.customersuppliers", @"
    SELECT VALUE -- Constructing customersuppliers
        CASE
            WHEN T1._from1 THEN [dbModel.Customer](T1.CustomerSupplier_TimeStampTable, T1.CustomerSupplier_CodCustomerSupplier, T1.CustomerSupplier_BusinessName, T1.CustomerSupplier_VatNumber, T1.CustomerSupplier_TaxCode, T1.CustomerSupplier_Outdated)
            ELSE [dbModel.Supplier](T1.CustomerSupplier_TimeStampTable, T1.CustomerSupplier_CodCustomerSupplier, T1.CustomerSupplier_BusinessName, T1.CustomerSupplier_VatNumber, T1.CustomerSupplier_TaxCode, T1.CustomerSupplier_Outdated)
        END
    FROM (
        SELECT 
            T.TimeStampTable AS CustomerSupplier_TimeStampTable, 
            T.CodCustomerSupplier AS CustomerSupplier_CodCustomerSupplier, 
            T.BusinessName AS CustomerSupplier_BusinessName, 
            T.VatNumber AS CustomerSupplier_VatNumber, 
            T.TaxCode AS CustomerSupplier_TaxCode, 
            T.Outdated AS CustomerSupplier_Outdated, 
            True AS _from0, 
            CASE WHEN T.Selector = CAST('0' AS [Edm.Int32]) THEN True ELSE False END AS _from1, 
            CASE WHEN T.Selector = CAST('1' AS [Edm.Int32]) THEN True ELSE False END AS _from2
        FROM dbModelStoreContainer.customersuppliers AS T
        WHERE T.Selector IN {CAST('0' AS [Edm.Int32]), CAST('1' AS [Edm.Int32])}
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for dbEntities.typeofbase
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView27()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("dbEntities.typeofbase", @"
    SELECT VALUE -- Constructing typeofbase
        [dbModel.TypeOfBase](T1.TypeOfBase_TimeStampTable, T1.TypeOfBase_CodTypeOfBase, T1.TypeOfBase_BaseName)
    FROM (
        SELECT 
            T.TimeStampTable AS TypeOfBase_TimeStampTable, 
            T.CodTypeOfBase AS TypeOfBase_CodTypeOfBase, 
            T.BaseName AS TypeOfBase_BaseName, 
            True AS _from0
        FROM dbModelStoreContainer.typeofbase AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for dbEntities.ProductParts
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView28()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3919);
            viewString.Append("\r\n    SELECT VALUE -- Constructing ProductParts\r\n        CASE\r\n            WHEN ");
            viewString.Append("(NOT(T1._from1) AND NOT(T1._from2) AND NOT(T1._from3) AND NOT(T1._from4) AND NOT");
            viewString.Append("(T1._from5)) THEN [dbModel.ProductPart](T1.ProductPart_TimeStampTable, T1.Produc");
            viewString.Append("tPart_CodProductPart, T1.ProductPart_CodProduct, T1.ProductPart_ProductPartName,");
            viewString.Append(" T1.ProductPart_PrintingType, T1.ProductPart_Format, T1.ProductPart_ServicesNumb");
            viewString.Append("er, T1.[ProductPart.CodProductPart_], T1.ProductPart_FormatOpened, T1.ProductPar");
            viewString.Append("t_SubjectNumber)\r\n            WHEN T1._from2 THEN [dbModel.ProductPartSingleShee");
            viewString.Append("t](T1.ProductPart_TimeStampTable, T1.ProductPart_CodProductPart, T1.ProductPart_");
            viewString.Append("CodProduct, T1.ProductPart_ProductPartName, T1.ProductPart_PrintingType, T1.Prod");
            viewString.Append("uctPart_Format, T1.ProductPart_ServicesNumber, T1.[ProductPart.CodProductPart_],");
            viewString.Append(" T1.ProductPart_FormatOpened, T1.ProductPart_SubjectNumber, T1.ProductPartSingle");
            viewString.Append("Sheet_RawCut)\r\n            WHEN T1._from1 THEN [dbModel.ProductPartCoverSheet](T");
            viewString.Append("1.ProductPart_TimeStampTable, T1.ProductPart_CodProductPart, T1.ProductPart_CodP");
            viewString.Append("roduct, T1.ProductPart_ProductPartName, T1.ProductPart_PrintingType, T1.ProductP");
            viewString.Append("art_Format, T1.ProductPart_ServicesNumber, T1.[ProductPart.CodProductPart_], T1.");
            viewString.Append("ProductPart_FormatOpened, T1.ProductPart_SubjectNumber, T1.ProductPartCoverSheet");
            viewString.Append("_WidthWings, T1.ProductPartCoverSheet_Back)\r\n            WHEN T1._from3 THEN [db");
            viewString.Append("Model.ProductPartBookSheet](T1.ProductPart_TimeStampTable, T1.ProductPart_CodPro");
            viewString.Append("ductPart, T1.ProductPart_CodProduct, T1.ProductPart_ProductPartName, T1.ProductP");
            viewString.Append("art_PrintingType, T1.ProductPart_Format, T1.ProductPart_ServicesNumber, T1.[Prod");
            viewString.Append("uctPart.CodProductPart_], T1.ProductPart_FormatOpened, T1.ProductPart_SubjectNum");
            viewString.Append("ber, T1.ProductPartBookSheet_Pages)\r\n            WHEN T1._from4 THEN [dbModel.Pr");
            viewString.Append("oductPartBlockSheet](T1.ProductPart_TimeStampTable, T1.ProductPart_CodProductPar");
            viewString.Append("t, T1.ProductPart_CodProduct, T1.ProductPart_ProductPartName, T1.ProductPart_Pri");
            viewString.Append("ntingType, T1.ProductPart_Format, T1.ProductPart_ServicesNumber, T1.[ProductPart");
            viewString.Append(".CodProductPart_], T1.ProductPart_FormatOpened, T1.ProductPart_SubjectNumber)\r\n ");
            viewString.Append("           ELSE [dbModel.ProductPartRigid](T1.ProductPart_TimeStampTable, T1.Pro");
            viewString.Append("ductPart_CodProductPart, T1.ProductPart_CodProduct, T1.ProductPart_ProductPartNa");
            viewString.Append("me, T1.ProductPart_PrintingType, T1.ProductPart_Format, T1.ProductPart_ServicesN");
            viewString.Append("umber, T1.[ProductPart.CodProductPart_], T1.ProductPart_FormatOpened, T1.Product");
            viewString.Append("Part_SubjectNumber)\r\n        END\r\n    FROM (\r\n        SELECT \r\n            T.Tim");
            viewString.Append("eStampTable AS ProductPart_TimeStampTable, \r\n            T.CodProductPart AS Pro");
            viewString.Append("ductPart_CodProductPart, \r\n            T.CodProduct AS ProductPart_CodProduct, \r");
            viewString.Append("\n            T.ProductPartName AS ProductPart_ProductPartName, \r\n            T.P");
            viewString.Append("rintingType AS ProductPart_PrintingType, \r\n            T.Format AS ProductPart_F");
            viewString.Append("ormat, \r\n            T.ServicesNumber AS ProductPart_ServicesNumber, \r\n         ");
            viewString.Append("   T.CodProductPart_ AS [ProductPart.CodProductPart_], \r\n            T.FormatOpe");
            viewString.Append("ned AS ProductPart_FormatOpened, \r\n            T.SubjectNumber AS ProductPart_Su");
            viewString.Append("bjectNumber, \r\n            T.RawCut AS ProductPartSingleSheet_RawCut, \r\n        ");
            viewString.Append("    T.WidthWings AS ProductPartCoverSheet_WidthWings, \r\n            T.Back AS Pr");
            viewString.Append("oductPartCoverSheet_Back, \r\n            T.Pages AS ProductPartBookSheet_Pages, \r");
            viewString.Append("\n            True AS _from0, \r\n            CASE WHEN T.SelectorProductPart = CAS");
            viewString.Append("T(\'1\' AS [Edm.Int32]) THEN True ELSE False END AS _from1, \r\n            CASE WHE");
            viewString.Append("N T.SelectorProductPart = CAST(\'0\' AS [Edm.Int32]) THEN True ELSE False END AS _");
            viewString.Append("from2, \r\n            CASE WHEN T.SelectorProductPart = CAST(\'2\' AS [Edm.Int32]) ");
            viewString.Append("THEN True ELSE False END AS _from3, \r\n            CASE WHEN T.SelectorProductPar");
            viewString.Append("t = CAST(\'3\' AS [Edm.Int32]) THEN True ELSE False END AS _from4, \r\n            C");
            viewString.Append("ASE WHEN T.SelectorProductPart = CAST(\'4\' AS [Edm.Int32]) THEN True ELSE False E");
            viewString.Append("ND AS _from5\r\n        FROM dbModelStoreContainer.productparts AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("dbEntities.ProductParts", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for dbEntities.ProductPartsPrintableArticles
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView29()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2173);
            viewString.Append("\r\n    SELECT VALUE -- Constructing ProductPartsPrintableArticles\r\n        CASE\r\n");
            viewString.Append("            WHEN T1._from1 THEN [dbModel.ProductPartSheetArticle](T1.ProductPart");
            viewString.Append("sPrintableArticle_TimeStampTable, T1.ProductPartsPrintableArticle_CodProductPart");
            viewString.Append("PrintableArticle, T1.ProductPartsPrintableArticle_CodProductPart, T1.ProductPart");
            viewString.Append("sPrintableArticle_ProductPartPrintableArticleName, T1.ProductPartsPrintableArtic");
            viewString.Append("le_TypeOfMaterial, T1.ProductPartsPrintableArticle_NameOfMaterial, T1.ProductPar");
            viewString.Append("tsPrintableArticle_Color, T1.ProductPartsPrintableArticle_Weight)\r\n            E");
            viewString.Append("LSE [dbModel.ProductPartRigidArticle](T1.ProductPartsPrintableArticle_TimeStampT");
            viewString.Append("able, T1.ProductPartsPrintableArticle_CodProductPartPrintableArticle, T1.Product");
            viewString.Append("PartsPrintableArticle_CodProductPart, T1.ProductPartsPrintableArticle_ProductPar");
            viewString.Append("tPrintableArticleName, T1.ProductPartsPrintableArticle_TypeOfMaterial, T1.Produc");
            viewString.Append("tPartsPrintableArticle_NameOfMaterial, T1.ProductPartsPrintableArticle_Color, T1");
            viewString.Append(".ProductPartsPrintableArticle_Weight)\r\n        END\r\n    FROM (\r\n        SELECT \r");
            viewString.Append("\n            T.TimeStampTable AS ProductPartsPrintableArticle_TimeStampTable, \r\n");
            viewString.Append("            T.CodProductPartPrintableArticle AS ProductPartsPrintableArticle_Cod");
            viewString.Append("ProductPartPrintableArticle, \r\n            T.CodProductPart AS ProductPartsPrint");
            viewString.Append("ableArticle_CodProductPart, \r\n            T.ProductPartPrintableArticleName AS P");
            viewString.Append("roductPartsPrintableArticle_ProductPartPrintableArticleName, \r\n            T.Typ");
            viewString.Append("eOfMaterial AS ProductPartsPrintableArticle_TypeOfMaterial, \r\n            T.Name");
            viewString.Append("OfMaterial AS ProductPartsPrintableArticle_NameOfMaterial, \r\n            T.Color");
            viewString.Append(" AS ProductPartsPrintableArticle_Color, \r\n            T.Weight AS ProductPartsPr");
            viewString.Append("intableArticle_Weight, \r\n            True AS _from0, \r\n            CASE WHEN T.S");
            viewString.Append("electorProductPartPrintableArticle = CAST(\'0\' AS [Edm.Int32]) THEN True ELSE Fal");
            viewString.Append("se END AS _from1, \r\n            CASE WHEN T.SelectorProductPartPrintableArticle ");
            viewString.Append("= CAST(\'1\' AS [Edm.Int32]) THEN True ELSE False END AS _from2\r\n        FROM dbMo");
            viewString.Append("delStoreContainer.productpartsprintablearticle AS T\r\n        WHERE T.SelectorPro");
            viewString.Append("ductPartPrintableArticle IN {CAST(\'0\' AS [Edm.Int32]), CAST(\'1\' AS [Edm.Int32])}");
            viewString.Append("\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("dbEntities.ProductPartsPrintableArticles", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for dbEntities.ProductPartTasks
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView30()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("dbEntities.ProductPartTasks", @"
    SELECT VALUE -- Constructing ProductPartTasks
        [dbModel.ProductPartTask](T1.ProductPartTask_TimeStampTable, T1.ProductPartTask_CodProductPartTask, T1.ProductPartTask_CodProductPart, T1.ProductPartTask_CodOptionTypeOfTask, T1.ProductPartTask_Hidden, T1.ProductPartTask_IndexOf)
    FROM (
        SELECT 
            T.TimeStampTable AS ProductPartTask_TimeStampTable, 
            T.CodProductPartTask AS ProductPartTask_CodProductPartTask, 
            T.CodProductPart AS ProductPartTask_CodProductPart, 
            T.CodOptionTypeOfTask AS ProductPartTask_CodOptionTypeOfTask, 
            T.Hidden AS ProductPartTask_Hidden, 
            T.IndexOf AS ProductPartTask_IndexOf, 
            True AS _from0
        FROM dbModelStoreContainer.productparttasks AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for dbEntities.Products
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView31()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("dbEntities.Products", "\r\n    SELECT VALUE -- Constructing Products\r\n        CASE\r\n            WHEN T1._f" +
                    "rom4 THEN [dbModel.ProductSingleSheet](T1.Product_TimeStampTable, T1.Product_Cod" +
                    "Product, T1.Product_ProductName, T1.Product_CodMenuProduct)\r\n            WHEN T1" +
                    "._from1 THEN [dbModel.ProductBookSheet](T1.Product_TimeStampTable, T1.Product_Co" +
                    "dProduct, T1.Product_ProductName, T1.Product_CodMenuProduct, T1.ProductBookSheet" +
                    "_Format)\r\n            WHEN T1._from2 THEN [dbModel.ProductBlockSheet](T1.Product" +
                    "_TimeStampTable, T1.Product_CodProduct, T1.Product_ProductName, T1.Product_CodMe" +
                    "nuProduct, T1.ProductBlockSheet_Format)\r\n            ELSE [dbModel.ProductRigid]" +
                    "(T1.Product_TimeStampTable, T1.Product_CodProduct, T1.Product_ProductName, T1.Pr" +
                    "oduct_CodMenuProduct, T1.ProductRigid_Format)\r\n        END\r\n    FROM (\r\n        " +
                    "SELECT \r\n            T.TimeStampTable AS Product_TimeStampTable, \r\n            T" +
                    ".CodProduct AS Product_CodProduct, \r\n            T.ProductName AS Product_Produc" +
                    "tName, \r\n            T.id AS Product_CodMenuProduct, \r\n            T.Format AS P" +
                    "roductBookSheet_Format, \r\n            T.Format AS ProductBlockSheet_Format, \r\n  " +
                    "          T.Format AS ProductRigid_Format, \r\n            True AS _from0, \r\n     " +
                    "       CASE WHEN T.SelectorProduct = CAST(\'1\' AS [Edm.Int32]) THEN True ELSE Fal" +
                    "se END AS _from1, \r\n            CASE WHEN T.SelectorProduct = CAST(\'2\' AS [Edm.I" +
                    "nt32]) THEN True ELSE False END AS _from2, \r\n            CASE WHEN T.SelectorPro" +
                    "duct = CAST(\'3\' AS [Edm.Int32]) THEN True ELSE False END AS _from3, \r\n          " +
                    "  CASE WHEN T.SelectorProduct = CAST(\'0\' AS [Edm.Int32]) THEN True ELSE False EN" +
                    "D AS _from4\r\n        FROM dbModelStoreContainer.products AS T\r\n        WHERE T.S" +
                    "electorProduct IN {CAST(\'0\' AS [Edm.Int32]), CAST(\'1\' AS [Edm.Int32]), CAST(\'2\' " +
                    "AS [Edm.Int32]), CAST(\'3\' AS [Edm.Int32])}\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for dbEntities.ProductTasks
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView32()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("dbEntities.ProductTasks", @"
    SELECT VALUE -- Constructing ProductTasks
        [dbModel.ProductTask](T1.ProductTask_TimeStampTable, T1.ProductTask_CodProductTask, T1.ProductTask_CodProduct, T1.ProductTask_ProductTaskName, T1.ProductTask_SelectorProductTask, T1.ProductTask_CodOptionTypeOfTask, T1.ProductTask_Hidden, T1.ProductTask_IndexOf)
    FROM (
        SELECT 
            T.TimeStampTable AS ProductTask_TimeStampTable, 
            T.CodProductTask AS ProductTask_CodProductTask, 
            T.CodProduct AS ProductTask_CodProduct, 
            T.ProductTaskName AS ProductTask_ProductTaskName, 
            T.SelectorProductTask AS ProductTask_SelectorProductTask, 
            T.CodOptionTypeOfTask AS ProductTask_CodOptionTypeOfTask, 
            T.Hidden AS ProductTask_Hidden, 
            T.IndexOf AS ProductTask_IndexOf, 
            True AS _from0
        FROM dbModelStoreContainer.producttasks AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for dbEntities.TaskExecutorTypeOfTasks
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView33()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("dbEntities.TaskExecutorTypeOfTasks", @"
    SELECT VALUE -- Constructing TaskExecutorTypeOfTasks
        [dbModel.TaskExecutorTypeOfTask](T1.TaskExecutorTypeOfTask_TimeStampTable, T1.TaskExecutorTypeOfTask_CodTaskExecutorTypeOfTask, T1.TaskExecutorTypeOfTask_CodTypeOfTask, T1.TaskExecutorTypeOfTask_CodTaskExecutor)
    FROM (
        SELECT 
            T.TimeStampTable AS TaskExecutorTypeOfTask_TimeStampTable, 
            T.CodTaskExecutorTypeOfTask AS TaskExecutorTypeOfTask_CodTaskExecutorTypeOfTask, 
            T.CodTypeOfTask AS TaskExecutorTypeOfTask_CodTypeOfTask, 
            T.CodTaskExecutor AS TaskExecutorTypeOfTask_CodTaskExecutor, 
            True AS _from0
        FROM dbModelStoreContainer.taskexecutortypeoftask AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for dbEntities.TypeOfTasks
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView34()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("dbEntities.TypeOfTasks", @"
    SELECT VALUE -- Constructing TypeOfTasks
        [dbModel.TypeOfTask](T1.TypeOfTask_TimeStampTable, T1.TypeOfTask_CodTypeOfTask, T1.TypeOfTask_TaskName, T1.TypeOfTask_CodCategoryOfTask)
    FROM (
        SELECT 
            T.TimeStampTable AS TypeOfTask_TimeStampTable, 
            T.CodTypeOfTask AS TypeOfTask_CodTypeOfTask, 
            T.TaskName AS TypeOfTask_TaskName, 
            T.CodCategoryOfTask AS TypeOfTask_CodCategoryOfTask, 
            True AS _from0
        FROM dbModelStoreContainer.typeoftask AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for dbEntities.OptionTypeOfTasks
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView35()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("dbEntities.OptionTypeOfTasks", @"
    SELECT VALUE -- Constructing OptionTypeOfTasks
        [dbModel.OptionTypeOfTask](T1.OptionTypeOfTask_TimeStampTable, T1.OptionTypeOfTask_CodOptionTypeOfTask, T1.OptionTypeOfTask_CodTypeOfTask, T1.OptionTypeOfTask_OptionName, T1.OptionTypeOfTask_IdexOf)
    FROM (
        SELECT 
            T.TimeStampTable AS OptionTypeOfTask_TimeStampTable, 
            T.CodOptionTypeOfTask AS OptionTypeOfTask_CodOptionTypeOfTask, 
            T.CodTypeOfTask AS OptionTypeOfTask_CodTypeOfTask, 
            T.OptionName AS OptionTypeOfTask_OptionName, 
            T.IdexOf AS OptionTypeOfTask_IdexOf, 
            True AS _from0
        FROM dbModelStoreContainer.optiontypeoftask AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for dbEntities.Costs
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView36()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("dbEntities.Costs", @"
    SELECT VALUE -- Constructing Costs
        [dbModel.Cost](T1.Cost_TimeStampTable, T1.Cost_CodCost, T1.Cost_CodDocumentProduct, T1.Cost_CodProductTask, T1.Cost_CodProductPartTask, T1.Cost_CodProductPartPrintableArticle, T1.Cost_Description, T1.Cost_Quantity, T1.Cost_UnitCost, T1.Cost_TotalCost)
    FROM (
        SELECT 
            T.TimeStampTable AS Cost_TimeStampTable, 
            T.CodCost AS Cost_CodCost, 
            T.CodDocumentProduct AS Cost_CodDocumentProduct, 
            T.CodProductTask AS Cost_CodProductTask, 
            T.CodProductPartTask AS Cost_CodProductPartTask, 
            T.CodProductPartPrintableArticle AS Cost_CodProductPartPrintableArticle, 
            T.Description AS Cost_Description, 
            T.Quantity AS Cost_Quantity, 
            T.UnitCost AS Cost_UnitCost, 
            T.TotalCost AS Cost_TotalCost, 
            True AS _from0
        FROM dbModelStoreContainer.costs AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for dbEntities.DocumentProducts
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView37()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("dbEntities.DocumentProducts", @"
    SELECT VALUE -- Constructing DocumentProducts
        [dbModel.DocumentProduct](T1.DocumentProduct_TimeStampTable, T1.DocumentProduct_CodDocumentProduct, T1.DocumentProduct_CodDocument, T1.DocumentProduct_ProductName, T1.DocumentProduct_CodProduct, T1.DocumentProduct_Quantity, T1.DocumentProduct_UnitPrice, T1.DocumentProduct_TotalAmount)
    FROM (
        SELECT 
            T.TimeStampTable AS DocumentProduct_TimeStampTable, 
            T.CodDocumentProduct AS DocumentProduct_CodDocumentProduct, 
            T.CodDocument AS DocumentProduct_CodDocument, 
            T.ProductName AS DocumentProduct_ProductName, 
            T.CodProduct AS DocumentProduct_CodProduct, 
            T.Quantity AS DocumentProduct_Quantity, 
            T.UnitPrice AS DocumentProduct_UnitPrice, 
            T.TotalAmount AS DocumentProduct_TotalAmount, 
            True AS _from0
        FROM dbModelStoreContainer.documentproducts AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for dbEntities.Documents
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView38()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("dbEntities.Documents", @"
    SELECT VALUE -- Constructing Documents
        [dbModel.Document](T1.Document_TimeStampTable, T1.Document_CodDocument, T1.Document_DocumentName, T1.Document_CodCustomer, T1.Document_Customer, T1.Document_SelectorDocument, T1.Document_Number, T1.Document_Notes, T1.Document_DateDocument)
    FROM (
        SELECT 
            T.TimeStampTable AS Document_TimeStampTable, 
            T.CodDocument AS Document_CodDocument, 
            T.DocumentName AS Document_DocumentName, 
            T.CodCustomer AS Document_CodCustomer, 
            T.Customer AS Document_Customer, 
            T.SelectorDocument AS Document_SelectorDocument, 
            T.Number AS Document_Number, 
            T.Notes AS Document_Notes, 
            T.DateDocument AS Document_DateDocument, 
            True AS _from0
        FROM dbModelStoreContainer.documents AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for dbEntities.ProductPartsToProductTasks
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView39()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("dbEntities.ProductPartsToProductTasks", @"
    SELECT VALUE -- Constructing ProductPartsToProductTasks
        [dbModel.productpartstoproducttask](T1.productpartstoproducttask_TimeStampTable, T1.productpartstoproducttask_CodProductPartToProductTask, T1.productpartstoproducttask_CodProductPart, T1.productpartstoproducttask_CodProductTask)
    FROM (
        SELECT 
            T.TimeStampTable AS productpartstoproducttask_TimeStampTable, 
            T.CodProductPartToProductTask AS productpartstoproducttask_CodProductPartToProductTask, 
            T.CodProductPart AS productpartstoproducttask_CodProductPart, 
            T.CodProductTask AS productpartstoproducttask_CodProductTask, 
            True AS _from0
        FROM dbModelStoreContainer.productpartstoproducttask AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for dbModelStoreContainer.menuproduct
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView40()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("dbModelStoreContainer.menuproduct", @"
    SELECT VALUE -- Constructing menuproduct
        [dbModel.Store.menuproduct](T1.menuproduct_TimeStampTable, T1.menuproduct_CodMenuProduct, T1.menuproduct_Enabled, T1.menuproduct_CodCategory, T1.menuproduct_Hidden, T1.menuproduct_IndexOf, T1.menuproduct_IndexOfCategory)
    FROM (
        SELECT 
            T.TimeStampTable AS menuproduct_TimeStampTable, 
            T.CodMenuProduct AS menuproduct_CodMenuProduct, 
            T.Enabled AS menuproduct_Enabled, 
            T.CodCategory AS menuproduct_CodCategory, 
            T.Hidden AS menuproduct_Hidden, 
            T.IndexOf AS menuproduct_IndexOf, 
            T.IndexOfCategory AS menuproduct_IndexOfCategory, 
            True AS _from0
        FROM dbEntities.MenuProducts AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for dbEntities.MenuProducts
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView41()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("dbEntities.MenuProducts", @"
    SELECT VALUE -- Constructing MenuProducts
        [dbModel.MenuProduct](T1.MenuProduct_TimeStampTable, T1.MenuProduct_CodMenuProduct, T1.MenuProduct_Enabled, T1.MenuProduct_CodCategory, T1.MenuProduct_Hidden, T1.MenuProduct_IndexOf, T1.MenuProduct_IndexOfCategory)
    FROM (
        SELECT 
            T.TimeStampTable AS MenuProduct_TimeStampTable, 
            T.CodMenuProduct AS MenuProduct_CodMenuProduct, 
            T.Enabled AS MenuProduct_Enabled, 
            T.CodCategory AS MenuProduct_CodCategory, 
            T.Hidden AS MenuProduct_Hidden, 
            T.IndexOf AS MenuProduct_IndexOf, 
            T.IndexOfCategory AS MenuProduct_IndexOfCategory, 
            True AS _from0
        FROM dbModelStoreContainer.menuproduct AS T
    ) AS T1");
        }
    }
}
